// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DebugService.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_DebugService_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_DebugService_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_DebugService_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_DebugService_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[15]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_DebugService_2eproto;
class ActiveBreakpointRequest;
class ActiveBreakpointRequestDefaultTypeInternal;
extern ActiveBreakpointRequestDefaultTypeInternal _ActiveBreakpointRequest_default_instance_;
class ActiveBreakpointResult;
class ActiveBreakpointResultDefaultTypeInternal;
extern ActiveBreakpointResultDefaultTypeInternal _ActiveBreakpointResult_default_instance_;
class ClearHighlightingRequest;
class ClearHighlightingRequestDefaultTypeInternal;
extern ClearHighlightingRequestDefaultTypeInternal _ClearHighlightingRequest_default_instance_;
class CurrentStackFrameRequest;
class CurrentStackFrameRequestDefaultTypeInternal;
extern CurrentStackFrameRequestDefaultTypeInternal _CurrentStackFrameRequest_default_instance_;
class ElementCommandRequest;
class ElementCommandRequestDefaultTypeInternal;
extern ElementCommandRequestDefaultTypeInternal _ElementCommandRequest_default_instance_;
class EndSessionRequest;
class EndSessionRequestDefaultTypeInternal;
extern EndSessionRequestDefaultTypeInternal _EndSessionRequest_default_instance_;
class MarkElementRequest;
class MarkElementRequestDefaultTypeInternal;
extern MarkElementRequestDefaultTypeInternal _MarkElementRequest_default_instance_;
class RGBColor;
class RGBColorDefaultTypeInternal;
extern RGBColorDefaultTypeInternal _RGBColor_default_instance_;
class Result;
class ResultDefaultTypeInternal;
extern ResultDefaultTypeInternal _Result_default_instance_;
class SessionStateRequest;
class SessionStateRequestDefaultTypeInternal;
extern SessionStateRequestDefaultTypeInternal _SessionStateRequest_default_instance_;
class SetCurrentElementRequest;
class SetCurrentElementRequestDefaultTypeInternal;
extern SetCurrentElementRequestDefaultTypeInternal _SetCurrentElementRequest_default_instance_;
class StackFrame;
class StackFrameDefaultTypeInternal;
extern StackFrameDefaultTypeInternal _StackFrame_default_instance_;
class StartSessionRequest;
class StartSessionRequestDefaultTypeInternal;
extern StartSessionRequestDefaultTypeInternal _StartSessionRequest_default_instance_;
class StartSessionResult;
class StartSessionResultDefaultTypeInternal;
extern StartSessionResultDefaultTypeInternal _StartSessionResult_default_instance_;
class UpdateIRRequest;
class UpdateIRRequestDefaultTypeInternal;
extern UpdateIRRequestDefaultTypeInternal _UpdateIRRequest_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::ActiveBreakpointRequest* Arena::CreateMaybeMessage<::ActiveBreakpointRequest>(Arena*);
template<> ::ActiveBreakpointResult* Arena::CreateMaybeMessage<::ActiveBreakpointResult>(Arena*);
template<> ::ClearHighlightingRequest* Arena::CreateMaybeMessage<::ClearHighlightingRequest>(Arena*);
template<> ::CurrentStackFrameRequest* Arena::CreateMaybeMessage<::CurrentStackFrameRequest>(Arena*);
template<> ::ElementCommandRequest* Arena::CreateMaybeMessage<::ElementCommandRequest>(Arena*);
template<> ::EndSessionRequest* Arena::CreateMaybeMessage<::EndSessionRequest>(Arena*);
template<> ::MarkElementRequest* Arena::CreateMaybeMessage<::MarkElementRequest>(Arena*);
template<> ::RGBColor* Arena::CreateMaybeMessage<::RGBColor>(Arena*);
template<> ::Result* Arena::CreateMaybeMessage<::Result>(Arena*);
template<> ::SessionStateRequest* Arena::CreateMaybeMessage<::SessionStateRequest>(Arena*);
template<> ::SetCurrentElementRequest* Arena::CreateMaybeMessage<::SetCurrentElementRequest>(Arena*);
template<> ::StackFrame* Arena::CreateMaybeMessage<::StackFrame>(Arena*);
template<> ::StartSessionRequest* Arena::CreateMaybeMessage<::StartSessionRequest>(Arena*);
template<> ::StartSessionResult* Arena::CreateMaybeMessage<::StartSessionResult>(Arena*);
template<> ::UpdateIRRequest* Arena::CreateMaybeMessage<::UpdateIRRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum SessionState : int {
  Listening = 0,
  Paused = 1,
  SessionState_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  SessionState_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool SessionState_IsValid(int value);
constexpr SessionState SessionState_MIN = Listening;
constexpr SessionState SessionState_MAX = Paused;
constexpr int SessionState_ARRAYSIZE = SessionState_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SessionState_descriptor();
template<typename T>
inline const std::string& SessionState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SessionState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SessionState_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SessionState_descriptor(), enum_t_value);
}
inline bool SessionState_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SessionState* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SessionState>(
    SessionState_descriptor(), name, value);
}
enum ClientKind : int {
  debugger = 0,
  runtime = 1,
  ClientKind_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ClientKind_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ClientKind_IsValid(int value);
constexpr ClientKind ClientKind_MIN = debugger;
constexpr ClientKind ClientKind_MAX = runtime;
constexpr int ClientKind_ARRAYSIZE = ClientKind_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ClientKind_descriptor();
template<typename T>
inline const std::string& ClientKind_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ClientKind>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ClientKind_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ClientKind_descriptor(), enum_t_value);
}
inline bool ClientKind_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ClientKind* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ClientKind>(
    ClientKind_descriptor(), name, value);
}
enum HighlightingType : int {
  temporary = 0,
  permanent = 1,
  HighlightingType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  HighlightingType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool HighlightingType_IsValid(int value);
constexpr HighlightingType HighlightingType_MIN = temporary;
constexpr HighlightingType HighlightingType_MAX = permanent;
constexpr int HighlightingType_ARRAYSIZE = HighlightingType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* HighlightingType_descriptor();
template<typename T>
inline const std::string& HighlightingType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, HighlightingType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function HighlightingType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    HighlightingType_descriptor(), enum_t_value);
}
inline bool HighlightingType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, HighlightingType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<HighlightingType>(
    HighlightingType_descriptor(), name, value);
}
enum IRElementKind : int {
  Instruction = 0,
  Operand = 1,
  Block = 2,
  User = 3,
  UserParent = 4,
  IRElementKind_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  IRElementKind_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool IRElementKind_IsValid(int value);
constexpr IRElementKind IRElementKind_MIN = Instruction;
constexpr IRElementKind IRElementKind_MAX = UserParent;
constexpr int IRElementKind_ARRAYSIZE = IRElementKind_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* IRElementKind_descriptor();
template<typename T>
inline const std::string& IRElementKind_Name(T enum_t_value) {
  static_assert(::std::is_same<T, IRElementKind>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function IRElementKind_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    IRElementKind_descriptor(), enum_t_value);
}
inline bool IRElementKind_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, IRElementKind* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<IRElementKind>(
    IRElementKind_descriptor(), name, value);
}
enum ElementCommand : int {
  GoToDefinition = 0,
  MarkBlock = 1,
  ShowUses = 2,
  MarkUses = 3,
  ShowReferences = 4,
  MarkReferences = 5,
  MarkExpression = 6,
  ShowExpression = 7,
  ClearMarker = 8,
  ElementCommand_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ElementCommand_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ElementCommand_IsValid(int value);
constexpr ElementCommand ElementCommand_MIN = GoToDefinition;
constexpr ElementCommand ElementCommand_MAX = ClearMarker;
constexpr int ElementCommand_ARRAYSIZE = ElementCommand_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ElementCommand_descriptor();
template<typename T>
inline const std::string& ElementCommand_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ElementCommand>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ElementCommand_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ElementCommand_descriptor(), enum_t_value);
}
inline bool ElementCommand_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ElementCommand* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ElementCommand>(
    ElementCommand_descriptor(), name, value);
}
// ===================================================================

class SessionStateRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SessionStateRequest) */ {
 public:
  inline SessionStateRequest() : SessionStateRequest(nullptr) {}
  virtual ~SessionStateRequest();

  SessionStateRequest(const SessionStateRequest& from);
  SessionStateRequest(SessionStateRequest&& from) noexcept
    : SessionStateRequest() {
    *this = ::std::move(from);
  }

  inline SessionStateRequest& operator=(const SessionStateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SessionStateRequest& operator=(SessionStateRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SessionStateRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SessionStateRequest* internal_default_instance() {
    return reinterpret_cast<const SessionStateRequest*>(
               &_SessionStateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SessionStateRequest& a, SessionStateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SessionStateRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SessionStateRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SessionStateRequest* New() const final {
    return CreateMaybeMessage<SessionStateRequest>(nullptr);
  }

  SessionStateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SessionStateRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SessionStateRequest& from);
  void MergeFrom(const SessionStateRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SessionStateRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SessionStateRequest";
  }
  protected:
  explicit SessionStateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_DebugService_2eproto);
    return ::descriptor_table_DebugService_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStateFieldNumber = 1,
  };
  // .SessionState state = 1;
  void clear_state();
  ::SessionState state() const;
  void set_state(::SessionState value);
  private:
  ::SessionState _internal_state() const;
  void _internal_set_state(::SessionState value);
  public:

  // @@protoc_insertion_point(class_scope:SessionStateRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_DebugService_2eproto;
};
// -------------------------------------------------------------------

class StartSessionRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:StartSessionRequest) */ {
 public:
  inline StartSessionRequest() : StartSessionRequest(nullptr) {}
  virtual ~StartSessionRequest();

  StartSessionRequest(const StartSessionRequest& from);
  StartSessionRequest(StartSessionRequest&& from) noexcept
    : StartSessionRequest() {
    *this = ::std::move(from);
  }

  inline StartSessionRequest& operator=(const StartSessionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StartSessionRequest& operator=(StartSessionRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StartSessionRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StartSessionRequest* internal_default_instance() {
    return reinterpret_cast<const StartSessionRequest*>(
               &_StartSessionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(StartSessionRequest& a, StartSessionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(StartSessionRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StartSessionRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StartSessionRequest* New() const final {
    return CreateMaybeMessage<StartSessionRequest>(nullptr);
  }

  StartSessionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StartSessionRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StartSessionRequest& from);
  void MergeFrom(const StartSessionRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StartSessionRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "StartSessionRequest";
  }
  protected:
  explicit StartSessionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_DebugService_2eproto);
    return ::descriptor_table_DebugService_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProcessIdFieldNumber = 2,
    kProcessArgsFieldNumber = 3,
    kKindFieldNumber = 1,
  };
  // int64 processId = 2;
  void clear_processid();
  ::PROTOBUF_NAMESPACE_ID::int64 processid() const;
  void set_processid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_processid() const;
  void _internal_set_processid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 processArgs = 3;
  void clear_processargs();
  ::PROTOBUF_NAMESPACE_ID::int64 processargs() const;
  void set_processargs(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_processargs() const;
  void _internal_set_processargs(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // .ClientKind kind = 1;
  void clear_kind();
  ::ClientKind kind() const;
  void set_kind(::ClientKind value);
  private:
  ::ClientKind _internal_kind() const;
  void _internal_set_kind(::ClientKind value);
  public:

  // @@protoc_insertion_point(class_scope:StartSessionRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 processid_;
  ::PROTOBUF_NAMESPACE_ID::int64 processargs_;
  int kind_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_DebugService_2eproto;
};
// -------------------------------------------------------------------

class StartSessionResult PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:StartSessionResult) */ {
 public:
  inline StartSessionResult() : StartSessionResult(nullptr) {}
  virtual ~StartSessionResult();

  StartSessionResult(const StartSessionResult& from);
  StartSessionResult(StartSessionResult&& from) noexcept
    : StartSessionResult() {
    *this = ::std::move(from);
  }

  inline StartSessionResult& operator=(const StartSessionResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline StartSessionResult& operator=(StartSessionResult&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StartSessionResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StartSessionResult* internal_default_instance() {
    return reinterpret_cast<const StartSessionResult*>(
               &_StartSessionResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(StartSessionResult& a, StartSessionResult& b) {
    a.Swap(&b);
  }
  inline void Swap(StartSessionResult* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StartSessionResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StartSessionResult* New() const final {
    return CreateMaybeMessage<StartSessionResult>(nullptr);
  }

  StartSessionResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StartSessionResult>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StartSessionResult& from);
  void MergeFrom(const StartSessionResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StartSessionResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "StartSessionResult";
  }
  protected:
  explicit StartSessionResult(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_DebugService_2eproto);
    return ::descriptor_table_DebugService_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorMessageFieldNumber = 2,
    kSessionIdFieldNumber = 3,
    kErrorCodeFieldNumber = 1,
  };
  // string errorMessage = 2;
  void clear_errormessage();
  const std::string& errormessage() const;
  void set_errormessage(const std::string& value);
  void set_errormessage(std::string&& value);
  void set_errormessage(const char* value);
  void set_errormessage(const char* value, size_t size);
  std::string* mutable_errormessage();
  std::string* release_errormessage();
  void set_allocated_errormessage(std::string* errormessage);
  private:
  const std::string& _internal_errormessage() const;
  void _internal_set_errormessage(const std::string& value);
  std::string* _internal_mutable_errormessage();
  public:

  // int64 sessionId = 3;
  void clear_sessionid();
  ::PROTOBUF_NAMESPACE_ID::int64 sessionid() const;
  void set_sessionid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_sessionid() const;
  void _internal_set_sessionid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 errorCode = 1;
  void clear_errorcode();
  ::PROTOBUF_NAMESPACE_ID::int32 errorcode() const;
  void set_errorcode(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_errorcode() const;
  void _internal_set_errorcode(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:StartSessionResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr errormessage_;
  ::PROTOBUF_NAMESPACE_ID::int64 sessionid_;
  ::PROTOBUF_NAMESPACE_ID::int32 errorcode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_DebugService_2eproto;
};
// -------------------------------------------------------------------

class EndSessionRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:EndSessionRequest) */ {
 public:
  inline EndSessionRequest() : EndSessionRequest(nullptr) {}
  virtual ~EndSessionRequest();

  EndSessionRequest(const EndSessionRequest& from);
  EndSessionRequest(EndSessionRequest&& from) noexcept
    : EndSessionRequest() {
    *this = ::std::move(from);
  }

  inline EndSessionRequest& operator=(const EndSessionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline EndSessionRequest& operator=(EndSessionRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EndSessionRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EndSessionRequest* internal_default_instance() {
    return reinterpret_cast<const EndSessionRequest*>(
               &_EndSessionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(EndSessionRequest& a, EndSessionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(EndSessionRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EndSessionRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EndSessionRequest* New() const final {
    return CreateMaybeMessage<EndSessionRequest>(nullptr);
  }

  EndSessionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EndSessionRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EndSessionRequest& from);
  void MergeFrom(const EndSessionRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EndSessionRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "EndSessionRequest";
  }
  protected:
  explicit EndSessionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_DebugService_2eproto);
    return ::descriptor_table_DebugService_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSessionIdFieldNumber = 1,
  };
  // int64 sessionId = 1;
  void clear_sessionid();
  ::PROTOBUF_NAMESPACE_ID::int64 sessionid() const;
  void set_sessionid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_sessionid() const;
  void _internal_set_sessionid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:EndSessionRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 sessionid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_DebugService_2eproto;
};
// -------------------------------------------------------------------

class StackFrame PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:StackFrame) */ {
 public:
  inline StackFrame() : StackFrame(nullptr) {}
  virtual ~StackFrame();

  StackFrame(const StackFrame& from);
  StackFrame(StackFrame&& from) noexcept
    : StackFrame() {
    *this = ::std::move(from);
  }

  inline StackFrame& operator=(const StackFrame& from) {
    CopyFrom(from);
    return *this;
  }
  inline StackFrame& operator=(StackFrame&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StackFrame& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StackFrame* internal_default_instance() {
    return reinterpret_cast<const StackFrame*>(
               &_StackFrame_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(StackFrame& a, StackFrame& b) {
    a.Swap(&b);
  }
  inline void Swap(StackFrame* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StackFrame* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StackFrame* New() const final {
    return CreateMaybeMessage<StackFrame>(nullptr);
  }

  StackFrame* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StackFrame>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StackFrame& from);
  void MergeFrom(const StackFrame& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StackFrame* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "StackFrame";
  }
  protected:
  explicit StackFrame(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_DebugService_2eproto);
    return ::descriptor_table_DebugService_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFileFieldNumber = 1,
    kFunctionFieldNumber = 2,
    kLineNumberFieldNumber = 3,
  };
  // string file = 1;
  void clear_file();
  const std::string& file() const;
  void set_file(const std::string& value);
  void set_file(std::string&& value);
  void set_file(const char* value);
  void set_file(const char* value, size_t size);
  std::string* mutable_file();
  std::string* release_file();
  void set_allocated_file(std::string* file);
  private:
  const std::string& _internal_file() const;
  void _internal_set_file(const std::string& value);
  std::string* _internal_mutable_file();
  public:

  // string function = 2;
  void clear_function();
  const std::string& function() const;
  void set_function(const std::string& value);
  void set_function(std::string&& value);
  void set_function(const char* value);
  void set_function(const char* value, size_t size);
  std::string* mutable_function();
  std::string* release_function();
  void set_allocated_function(std::string* function);
  private:
  const std::string& _internal_function() const;
  void _internal_set_function(const std::string& value);
  std::string* _internal_mutable_function();
  public:

  // int32 lineNumber = 3;
  void clear_linenumber();
  ::PROTOBUF_NAMESPACE_ID::int32 linenumber() const;
  void set_linenumber(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_linenumber() const;
  void _internal_set_linenumber(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:StackFrame)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr function_;
  ::PROTOBUF_NAMESPACE_ID::int32 linenumber_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_DebugService_2eproto;
};
// -------------------------------------------------------------------

class CurrentStackFrameRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CurrentStackFrameRequest) */ {
 public:
  inline CurrentStackFrameRequest() : CurrentStackFrameRequest(nullptr) {}
  virtual ~CurrentStackFrameRequest();

  CurrentStackFrameRequest(const CurrentStackFrameRequest& from);
  CurrentStackFrameRequest(CurrentStackFrameRequest&& from) noexcept
    : CurrentStackFrameRequest() {
    *this = ::std::move(from);
  }

  inline CurrentStackFrameRequest& operator=(const CurrentStackFrameRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CurrentStackFrameRequest& operator=(CurrentStackFrameRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CurrentStackFrameRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CurrentStackFrameRequest* internal_default_instance() {
    return reinterpret_cast<const CurrentStackFrameRequest*>(
               &_CurrentStackFrameRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CurrentStackFrameRequest& a, CurrentStackFrameRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CurrentStackFrameRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CurrentStackFrameRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CurrentStackFrameRequest* New() const final {
    return CreateMaybeMessage<CurrentStackFrameRequest>(nullptr);
  }

  CurrentStackFrameRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CurrentStackFrameRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CurrentStackFrameRequest& from);
  void MergeFrom(const CurrentStackFrameRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CurrentStackFrameRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CurrentStackFrameRequest";
  }
  protected:
  explicit CurrentStackFrameRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_DebugService_2eproto);
    return ::descriptor_table_DebugService_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCurrentFrameFieldNumber = 1,
  };
  // .StackFrame currentFrame = 1;
  bool has_currentframe() const;
  private:
  bool _internal_has_currentframe() const;
  public:
  void clear_currentframe();
  const ::StackFrame& currentframe() const;
  ::StackFrame* release_currentframe();
  ::StackFrame* mutable_currentframe();
  void set_allocated_currentframe(::StackFrame* currentframe);
  private:
  const ::StackFrame& _internal_currentframe() const;
  ::StackFrame* _internal_mutable_currentframe();
  public:
  void unsafe_arena_set_allocated_currentframe(
      ::StackFrame* currentframe);
  ::StackFrame* unsafe_arena_release_currentframe();

  // @@protoc_insertion_point(class_scope:CurrentStackFrameRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::StackFrame* currentframe_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_DebugService_2eproto;
};
// -------------------------------------------------------------------

class UpdateIRRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UpdateIRRequest) */ {
 public:
  inline UpdateIRRequest() : UpdateIRRequest(nullptr) {}
  virtual ~UpdateIRRequest();

  UpdateIRRequest(const UpdateIRRequest& from);
  UpdateIRRequest(UpdateIRRequest&& from) noexcept
    : UpdateIRRequest() {
    *this = ::std::move(from);
  }

  inline UpdateIRRequest& operator=(const UpdateIRRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateIRRequest& operator=(UpdateIRRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateIRRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateIRRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateIRRequest*>(
               &_UpdateIRRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(UpdateIRRequest& a, UpdateIRRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateIRRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateIRRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateIRRequest* New() const final {
    return CreateMaybeMessage<UpdateIRRequest>(nullptr);
  }

  UpdateIRRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateIRRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateIRRequest& from);
  void MergeFrom(const UpdateIRRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateIRRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UpdateIRRequest";
  }
  protected:
  explicit UpdateIRRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_DebugService_2eproto);
    return ::descriptor_table_DebugService_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTextFieldNumber = 2,
    kSessionIdFieldNumber = 1,
  };
  // string text = 2;
  void clear_text();
  const std::string& text() const;
  void set_text(const std::string& value);
  void set_text(std::string&& value);
  void set_text(const char* value);
  void set_text(const char* value, size_t size);
  std::string* mutable_text();
  std::string* release_text();
  void set_allocated_text(std::string* text);
  private:
  const std::string& _internal_text() const;
  void _internal_set_text(const std::string& value);
  std::string* _internal_mutable_text();
  public:

  // int64 sessionId = 1;
  void clear_sessionid();
  ::PROTOBUF_NAMESPACE_ID::int64 sessionid() const;
  void set_sessionid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_sessionid() const;
  void _internal_set_sessionid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:UpdateIRRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_;
  ::PROTOBUF_NAMESPACE_ID::int64 sessionid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_DebugService_2eproto;
};
// -------------------------------------------------------------------

class Result PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Result) */ {
 public:
  inline Result() : Result(nullptr) {}
  virtual ~Result();

  Result(const Result& from);
  Result(Result&& from) noexcept
    : Result() {
    *this = ::std::move(from);
  }

  inline Result& operator=(const Result& from) {
    CopyFrom(from);
    return *this;
  }
  inline Result& operator=(Result&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Result& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Result* internal_default_instance() {
    return reinterpret_cast<const Result*>(
               &_Result_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Result& a, Result& b) {
    a.Swap(&b);
  }
  inline void Swap(Result* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Result* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Result* New() const final {
    return CreateMaybeMessage<Result>(nullptr);
  }

  Result* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Result>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Result& from);
  void MergeFrom(const Result& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Result* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Result";
  }
  protected:
  explicit Result(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_DebugService_2eproto);
    return ::descriptor_table_DebugService_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorMessageFieldNumber = 3,
    kSuccessFieldNumber = 1,
    kErrorCodeFieldNumber = 2,
  };
  // string errorMessage = 3;
  void clear_errormessage();
  const std::string& errormessage() const;
  void set_errormessage(const std::string& value);
  void set_errormessage(std::string&& value);
  void set_errormessage(const char* value);
  void set_errormessage(const char* value, size_t size);
  std::string* mutable_errormessage();
  std::string* release_errormessage();
  void set_allocated_errormessage(std::string* errormessage);
  private:
  const std::string& _internal_errormessage() const;
  void _internal_set_errormessage(const std::string& value);
  std::string* _internal_mutable_errormessage();
  public:

  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // int32 errorCode = 2;
  void clear_errorcode();
  ::PROTOBUF_NAMESPACE_ID::int32 errorcode() const;
  void set_errorcode(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_errorcode() const;
  void _internal_set_errorcode(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Result)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr errormessage_;
  bool success_;
  ::PROTOBUF_NAMESPACE_ID::int32 errorcode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_DebugService_2eproto;
};
// -------------------------------------------------------------------

class RGBColor PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RGBColor) */ {
 public:
  inline RGBColor() : RGBColor(nullptr) {}
  virtual ~RGBColor();

  RGBColor(const RGBColor& from);
  RGBColor(RGBColor&& from) noexcept
    : RGBColor() {
    *this = ::std::move(from);
  }

  inline RGBColor& operator=(const RGBColor& from) {
    CopyFrom(from);
    return *this;
  }
  inline RGBColor& operator=(RGBColor&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RGBColor& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RGBColor* internal_default_instance() {
    return reinterpret_cast<const RGBColor*>(
               &_RGBColor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(RGBColor& a, RGBColor& b) {
    a.Swap(&b);
  }
  inline void Swap(RGBColor* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RGBColor* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RGBColor* New() const final {
    return CreateMaybeMessage<RGBColor>(nullptr);
  }

  RGBColor* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RGBColor>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RGBColor& from);
  void MergeFrom(const RGBColor& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RGBColor* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RGBColor";
  }
  protected:
  explicit RGBColor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_DebugService_2eproto);
    return ::descriptor_table_DebugService_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRFieldNumber = 1,
    kGFieldNumber = 2,
    kBFieldNumber = 3,
  };
  // int32 R = 1;
  void clear_r();
  ::PROTOBUF_NAMESPACE_ID::int32 r() const;
  void set_r(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_r() const;
  void _internal_set_r(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 G = 2;
  void clear_g();
  ::PROTOBUF_NAMESPACE_ID::int32 g() const;
  void set_g(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_g() const;
  void _internal_set_g(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 B = 3;
  void clear_b();
  ::PROTOBUF_NAMESPACE_ID::int32 b() const;
  void set_b(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_b() const;
  void _internal_set_b(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:RGBColor)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 r_;
  ::PROTOBUF_NAMESPACE_ID::int32 g_;
  ::PROTOBUF_NAMESPACE_ID::int32 b_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_DebugService_2eproto;
};
// -------------------------------------------------------------------

class ClearHighlightingRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClearHighlightingRequest) */ {
 public:
  inline ClearHighlightingRequest() : ClearHighlightingRequest(nullptr) {}
  virtual ~ClearHighlightingRequest();

  ClearHighlightingRequest(const ClearHighlightingRequest& from);
  ClearHighlightingRequest(ClearHighlightingRequest&& from) noexcept
    : ClearHighlightingRequest() {
    *this = ::std::move(from);
  }

  inline ClearHighlightingRequest& operator=(const ClearHighlightingRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClearHighlightingRequest& operator=(ClearHighlightingRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ClearHighlightingRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClearHighlightingRequest* internal_default_instance() {
    return reinterpret_cast<const ClearHighlightingRequest*>(
               &_ClearHighlightingRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(ClearHighlightingRequest& a, ClearHighlightingRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ClearHighlightingRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClearHighlightingRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ClearHighlightingRequest* New() const final {
    return CreateMaybeMessage<ClearHighlightingRequest>(nullptr);
  }

  ClearHighlightingRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClearHighlightingRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ClearHighlightingRequest& from);
  void MergeFrom(const ClearHighlightingRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClearHighlightingRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ClearHighlightingRequest";
  }
  protected:
  explicit ClearHighlightingRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_DebugService_2eproto);
    return ::descriptor_table_DebugService_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHighlightingFieldNumber = 1,
  };
  // .HighlightingType highlighting = 1;
  void clear_highlighting();
  ::HighlightingType highlighting() const;
  void set_highlighting(::HighlightingType value);
  private:
  ::HighlightingType _internal_highlighting() const;
  void _internal_set_highlighting(::HighlightingType value);
  public:

  // @@protoc_insertion_point(class_scope:ClearHighlightingRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int highlighting_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_DebugService_2eproto;
};
// -------------------------------------------------------------------

class MarkElementRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MarkElementRequest) */ {
 public:
  inline MarkElementRequest() : MarkElementRequest(nullptr) {}
  virtual ~MarkElementRequest();

  MarkElementRequest(const MarkElementRequest& from);
  MarkElementRequest(MarkElementRequest&& from) noexcept
    : MarkElementRequest() {
    *this = ::std::move(from);
  }

  inline MarkElementRequest& operator=(const MarkElementRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline MarkElementRequest& operator=(MarkElementRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MarkElementRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MarkElementRequest* internal_default_instance() {
    return reinterpret_cast<const MarkElementRequest*>(
               &_MarkElementRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(MarkElementRequest& a, MarkElementRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(MarkElementRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MarkElementRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MarkElementRequest* New() const final {
    return CreateMaybeMessage<MarkElementRequest>(nullptr);
  }

  MarkElementRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MarkElementRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MarkElementRequest& from);
  void MergeFrom(const MarkElementRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MarkElementRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MarkElementRequest";
  }
  protected:
  explicit MarkElementRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_DebugService_2eproto);
    return ::descriptor_table_DebugService_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLabelFieldNumber = 3,
    kColorFieldNumber = 2,
    kElementAddressFieldNumber = 1,
    kHighlightingFieldNumber = 4,
  };
  // string label = 3;
  void clear_label();
  const std::string& label() const;
  void set_label(const std::string& value);
  void set_label(std::string&& value);
  void set_label(const char* value);
  void set_label(const char* value, size_t size);
  std::string* mutable_label();
  std::string* release_label();
  void set_allocated_label(std::string* label);
  private:
  const std::string& _internal_label() const;
  void _internal_set_label(const std::string& value);
  std::string* _internal_mutable_label();
  public:

  // .RGBColor color = 2;
  bool has_color() const;
  private:
  bool _internal_has_color() const;
  public:
  void clear_color();
  const ::RGBColor& color() const;
  ::RGBColor* release_color();
  ::RGBColor* mutable_color();
  void set_allocated_color(::RGBColor* color);
  private:
  const ::RGBColor& _internal_color() const;
  ::RGBColor* _internal_mutable_color();
  public:
  void unsafe_arena_set_allocated_color(
      ::RGBColor* color);
  ::RGBColor* unsafe_arena_release_color();

  // int64 elementAddress = 1;
  void clear_elementaddress();
  ::PROTOBUF_NAMESPACE_ID::int64 elementaddress() const;
  void set_elementaddress(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_elementaddress() const;
  void _internal_set_elementaddress(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // .HighlightingType highlighting = 4;
  void clear_highlighting();
  ::HighlightingType highlighting() const;
  void set_highlighting(::HighlightingType value);
  private:
  ::HighlightingType _internal_highlighting() const;
  void _internal_set_highlighting(::HighlightingType value);
  public:

  // @@protoc_insertion_point(class_scope:MarkElementRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr label_;
  ::RGBColor* color_;
  ::PROTOBUF_NAMESPACE_ID::int64 elementaddress_;
  int highlighting_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_DebugService_2eproto;
};
// -------------------------------------------------------------------

class SetCurrentElementRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SetCurrentElementRequest) */ {
 public:
  inline SetCurrentElementRequest() : SetCurrentElementRequest(nullptr) {}
  virtual ~SetCurrentElementRequest();

  SetCurrentElementRequest(const SetCurrentElementRequest& from);
  SetCurrentElementRequest(SetCurrentElementRequest&& from) noexcept
    : SetCurrentElementRequest() {
    *this = ::std::move(from);
  }

  inline SetCurrentElementRequest& operator=(const SetCurrentElementRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetCurrentElementRequest& operator=(SetCurrentElementRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetCurrentElementRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetCurrentElementRequest* internal_default_instance() {
    return reinterpret_cast<const SetCurrentElementRequest*>(
               &_SetCurrentElementRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(SetCurrentElementRequest& a, SetCurrentElementRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetCurrentElementRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetCurrentElementRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetCurrentElementRequest* New() const final {
    return CreateMaybeMessage<SetCurrentElementRequest>(nullptr);
  }

  SetCurrentElementRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetCurrentElementRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetCurrentElementRequest& from);
  void MergeFrom(const SetCurrentElementRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetCurrentElementRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SetCurrentElementRequest";
  }
  protected:
  explicit SetCurrentElementRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_DebugService_2eproto);
    return ::descriptor_table_DebugService_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLabelFieldNumber = 4,
    kElementAddressFieldNumber = 2,
    kElementIdFieldNumber = 1,
    kElementKindFieldNumber = 3,
  };
  // string label = 4;
  void clear_label();
  const std::string& label() const;
  void set_label(const std::string& value);
  void set_label(std::string&& value);
  void set_label(const char* value);
  void set_label(const char* value, size_t size);
  std::string* mutable_label();
  std::string* release_label();
  void set_allocated_label(std::string* label);
  private:
  const std::string& _internal_label() const;
  void _internal_set_label(const std::string& value);
  std::string* _internal_mutable_label();
  public:

  // int64 elementAddress = 2;
  void clear_elementaddress();
  ::PROTOBUF_NAMESPACE_ID::int64 elementaddress() const;
  void set_elementaddress(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_elementaddress() const;
  void _internal_set_elementaddress(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 elementId = 1;
  void clear_elementid();
  ::PROTOBUF_NAMESPACE_ID::int32 elementid() const;
  void set_elementid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_elementid() const;
  void _internal_set_elementid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .IRElementKind elementKind = 3;
  void clear_elementkind();
  ::IRElementKind elementkind() const;
  void set_elementkind(::IRElementKind value);
  private:
  ::IRElementKind _internal_elementkind() const;
  void _internal_set_elementkind(::IRElementKind value);
  public:

  // @@protoc_insertion_point(class_scope:SetCurrentElementRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr label_;
  ::PROTOBUF_NAMESPACE_ID::int64 elementaddress_;
  ::PROTOBUF_NAMESPACE_ID::int32 elementid_;
  int elementkind_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_DebugService_2eproto;
};
// -------------------------------------------------------------------

class ElementCommandRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ElementCommandRequest) */ {
 public:
  inline ElementCommandRequest() : ElementCommandRequest(nullptr) {}
  virtual ~ElementCommandRequest();

  ElementCommandRequest(const ElementCommandRequest& from);
  ElementCommandRequest(ElementCommandRequest&& from) noexcept
    : ElementCommandRequest() {
    *this = ::std::move(from);
  }

  inline ElementCommandRequest& operator=(const ElementCommandRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ElementCommandRequest& operator=(ElementCommandRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ElementCommandRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ElementCommandRequest* internal_default_instance() {
    return reinterpret_cast<const ElementCommandRequest*>(
               &_ElementCommandRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(ElementCommandRequest& a, ElementCommandRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ElementCommandRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ElementCommandRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ElementCommandRequest* New() const final {
    return CreateMaybeMessage<ElementCommandRequest>(nullptr);
  }

  ElementCommandRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ElementCommandRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ElementCommandRequest& from);
  void MergeFrom(const ElementCommandRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ElementCommandRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ElementCommandRequest";
  }
  protected:
  explicit ElementCommandRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_DebugService_2eproto);
    return ::descriptor_table_DebugService_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLabelFieldNumber = 3,
    kStackFrameFieldNumber = 5,
    kElementAddressFieldNumber = 2,
    kCommandFieldNumber = 1,
    kHighlightingFieldNumber = 4,
  };
  // string label = 3;
  void clear_label();
  const std::string& label() const;
  void set_label(const std::string& value);
  void set_label(std::string&& value);
  void set_label(const char* value);
  void set_label(const char* value, size_t size);
  std::string* mutable_label();
  std::string* release_label();
  void set_allocated_label(std::string* label);
  private:
  const std::string& _internal_label() const;
  void _internal_set_label(const std::string& value);
  std::string* _internal_mutable_label();
  public:

  // .StackFrame stackFrame = 5;
  bool has_stackframe() const;
  private:
  bool _internal_has_stackframe() const;
  public:
  void clear_stackframe();
  const ::StackFrame& stackframe() const;
  ::StackFrame* release_stackframe();
  ::StackFrame* mutable_stackframe();
  void set_allocated_stackframe(::StackFrame* stackframe);
  private:
  const ::StackFrame& _internal_stackframe() const;
  ::StackFrame* _internal_mutable_stackframe();
  public:
  void unsafe_arena_set_allocated_stackframe(
      ::StackFrame* stackframe);
  ::StackFrame* unsafe_arena_release_stackframe();

  // int64 elementAddress = 2;
  void clear_elementaddress();
  ::PROTOBUF_NAMESPACE_ID::int64 elementaddress() const;
  void set_elementaddress(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_elementaddress() const;
  void _internal_set_elementaddress(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // .ElementCommand command = 1;
  void clear_command();
  ::ElementCommand command() const;
  void set_command(::ElementCommand value);
  private:
  ::ElementCommand _internal_command() const;
  void _internal_set_command(::ElementCommand value);
  public:

  // .HighlightingType highlighting = 4;
  void clear_highlighting();
  ::HighlightingType highlighting() const;
  void set_highlighting(::HighlightingType value);
  private:
  ::HighlightingType _internal_highlighting() const;
  void _internal_set_highlighting(::HighlightingType value);
  public:

  // @@protoc_insertion_point(class_scope:ElementCommandRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr label_;
  ::StackFrame* stackframe_;
  ::PROTOBUF_NAMESPACE_ID::int64 elementaddress_;
  int command_;
  int highlighting_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_DebugService_2eproto;
};
// -------------------------------------------------------------------

class ActiveBreakpointRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ActiveBreakpointRequest) */ {
 public:
  inline ActiveBreakpointRequest() : ActiveBreakpointRequest(nullptr) {}
  virtual ~ActiveBreakpointRequest();

  ActiveBreakpointRequest(const ActiveBreakpointRequest& from);
  ActiveBreakpointRequest(ActiveBreakpointRequest&& from) noexcept
    : ActiveBreakpointRequest() {
    *this = ::std::move(from);
  }

  inline ActiveBreakpointRequest& operator=(const ActiveBreakpointRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ActiveBreakpointRequest& operator=(ActiveBreakpointRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ActiveBreakpointRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ActiveBreakpointRequest* internal_default_instance() {
    return reinterpret_cast<const ActiveBreakpointRequest*>(
               &_ActiveBreakpointRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(ActiveBreakpointRequest& a, ActiveBreakpointRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ActiveBreakpointRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ActiveBreakpointRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ActiveBreakpointRequest* New() const final {
    return CreateMaybeMessage<ActiveBreakpointRequest>(nullptr);
  }

  ActiveBreakpointRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ActiveBreakpointRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ActiveBreakpointRequest& from);
  void MergeFrom(const ActiveBreakpointRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ActiveBreakpointRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ActiveBreakpointRequest";
  }
  protected:
  explicit ActiveBreakpointRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_DebugService_2eproto);
    return ::descriptor_table_DebugService_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kElementAddressFieldNumber = 1,
  };
  // int64 elementAddress = 1;
  void clear_elementaddress();
  ::PROTOBUF_NAMESPACE_ID::int64 elementaddress() const;
  void set_elementaddress(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_elementaddress() const;
  void _internal_set_elementaddress(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:ActiveBreakpointRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 elementaddress_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_DebugService_2eproto;
};
// -------------------------------------------------------------------

class ActiveBreakpointResult PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ActiveBreakpointResult) */ {
 public:
  inline ActiveBreakpointResult() : ActiveBreakpointResult(nullptr) {}
  virtual ~ActiveBreakpointResult();

  ActiveBreakpointResult(const ActiveBreakpointResult& from);
  ActiveBreakpointResult(ActiveBreakpointResult&& from) noexcept
    : ActiveBreakpointResult() {
    *this = ::std::move(from);
  }

  inline ActiveBreakpointResult& operator=(const ActiveBreakpointResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline ActiveBreakpointResult& operator=(ActiveBreakpointResult&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ActiveBreakpointResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ActiveBreakpointResult* internal_default_instance() {
    return reinterpret_cast<const ActiveBreakpointResult*>(
               &_ActiveBreakpointResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(ActiveBreakpointResult& a, ActiveBreakpointResult& b) {
    a.Swap(&b);
  }
  inline void Swap(ActiveBreakpointResult* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ActiveBreakpointResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ActiveBreakpointResult* New() const final {
    return CreateMaybeMessage<ActiveBreakpointResult>(nullptr);
  }

  ActiveBreakpointResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ActiveBreakpointResult>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ActiveBreakpointResult& from);
  void MergeFrom(const ActiveBreakpointResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ActiveBreakpointResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ActiveBreakpointResult";
  }
  protected:
  explicit ActiveBreakpointResult(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_DebugService_2eproto);
    return ::descriptor_table_DebugService_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorMessageFieldNumber = 3,
    kErrorCodeFieldNumber = 2,
    kSuccessFieldNumber = 1,
    kHasBreakpointFieldNumber = 4,
  };
  // string errorMessage = 3;
  void clear_errormessage();
  const std::string& errormessage() const;
  void set_errormessage(const std::string& value);
  void set_errormessage(std::string&& value);
  void set_errormessage(const char* value);
  void set_errormessage(const char* value, size_t size);
  std::string* mutable_errormessage();
  std::string* release_errormessage();
  void set_allocated_errormessage(std::string* errormessage);
  private:
  const std::string& _internal_errormessage() const;
  void _internal_set_errormessage(const std::string& value);
  std::string* _internal_mutable_errormessage();
  public:

  // int32 errorCode = 2;
  void clear_errorcode();
  ::PROTOBUF_NAMESPACE_ID::int32 errorcode() const;
  void set_errorcode(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_errorcode() const;
  void _internal_set_errorcode(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // bool hasBreakpoint = 4;
  void clear_hasbreakpoint();
  bool hasbreakpoint() const;
  void set_hasbreakpoint(bool value);
  private:
  bool _internal_hasbreakpoint() const;
  void _internal_set_hasbreakpoint(bool value);
  public:

  // @@protoc_insertion_point(class_scope:ActiveBreakpointResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr errormessage_;
  ::PROTOBUF_NAMESPACE_ID::int32 errorcode_;
  bool success_;
  bool hasbreakpoint_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_DebugService_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SessionStateRequest

// .SessionState state = 1;
inline void SessionStateRequest::clear_state() {
  state_ = 0;
}
inline ::SessionState SessionStateRequest::_internal_state() const {
  return static_cast< ::SessionState >(state_);
}
inline ::SessionState SessionStateRequest::state() const {
  // @@protoc_insertion_point(field_get:SessionStateRequest.state)
  return _internal_state();
}
inline void SessionStateRequest::_internal_set_state(::SessionState value) {
  
  state_ = value;
}
inline void SessionStateRequest::set_state(::SessionState value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:SessionStateRequest.state)
}

// -------------------------------------------------------------------

// StartSessionRequest

// .ClientKind kind = 1;
inline void StartSessionRequest::clear_kind() {
  kind_ = 0;
}
inline ::ClientKind StartSessionRequest::_internal_kind() const {
  return static_cast< ::ClientKind >(kind_);
}
inline ::ClientKind StartSessionRequest::kind() const {
  // @@protoc_insertion_point(field_get:StartSessionRequest.kind)
  return _internal_kind();
}
inline void StartSessionRequest::_internal_set_kind(::ClientKind value) {
  
  kind_ = value;
}
inline void StartSessionRequest::set_kind(::ClientKind value) {
  _internal_set_kind(value);
  // @@protoc_insertion_point(field_set:StartSessionRequest.kind)
}

// int64 processId = 2;
inline void StartSessionRequest::clear_processid() {
  processid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 StartSessionRequest::_internal_processid() const {
  return processid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 StartSessionRequest::processid() const {
  // @@protoc_insertion_point(field_get:StartSessionRequest.processId)
  return _internal_processid();
}
inline void StartSessionRequest::_internal_set_processid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  processid_ = value;
}
inline void StartSessionRequest::set_processid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_processid(value);
  // @@protoc_insertion_point(field_set:StartSessionRequest.processId)
}

// int64 processArgs = 3;
inline void StartSessionRequest::clear_processargs() {
  processargs_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 StartSessionRequest::_internal_processargs() const {
  return processargs_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 StartSessionRequest::processargs() const {
  // @@protoc_insertion_point(field_get:StartSessionRequest.processArgs)
  return _internal_processargs();
}
inline void StartSessionRequest::_internal_set_processargs(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  processargs_ = value;
}
inline void StartSessionRequest::set_processargs(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_processargs(value);
  // @@protoc_insertion_point(field_set:StartSessionRequest.processArgs)
}

// -------------------------------------------------------------------

// StartSessionResult

// int32 errorCode = 1;
inline void StartSessionResult::clear_errorcode() {
  errorcode_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StartSessionResult::_internal_errorcode() const {
  return errorcode_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StartSessionResult::errorcode() const {
  // @@protoc_insertion_point(field_get:StartSessionResult.errorCode)
  return _internal_errorcode();
}
inline void StartSessionResult::_internal_set_errorcode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  errorcode_ = value;
}
inline void StartSessionResult::set_errorcode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_errorcode(value);
  // @@protoc_insertion_point(field_set:StartSessionResult.errorCode)
}

// string errorMessage = 2;
inline void StartSessionResult::clear_errormessage() {
  errormessage_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& StartSessionResult::errormessage() const {
  // @@protoc_insertion_point(field_get:StartSessionResult.errorMessage)
  return _internal_errormessage();
}
inline void StartSessionResult::set_errormessage(const std::string& value) {
  _internal_set_errormessage(value);
  // @@protoc_insertion_point(field_set:StartSessionResult.errorMessage)
}
inline std::string* StartSessionResult::mutable_errormessage() {
  // @@protoc_insertion_point(field_mutable:StartSessionResult.errorMessage)
  return _internal_mutable_errormessage();
}
inline const std::string& StartSessionResult::_internal_errormessage() const {
  return errormessage_.Get();
}
inline void StartSessionResult::_internal_set_errormessage(const std::string& value) {
  
  errormessage_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void StartSessionResult::set_errormessage(std::string&& value) {
  
  errormessage_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:StartSessionResult.errorMessage)
}
inline void StartSessionResult::set_errormessage(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  errormessage_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:StartSessionResult.errorMessage)
}
inline void StartSessionResult::set_errormessage(const char* value,
    size_t size) {
  
  errormessage_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:StartSessionResult.errorMessage)
}
inline std::string* StartSessionResult::_internal_mutable_errormessage() {
  
  return errormessage_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* StartSessionResult::release_errormessage() {
  // @@protoc_insertion_point(field_release:StartSessionResult.errorMessage)
  return errormessage_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StartSessionResult::set_allocated_errormessage(std::string* errormessage) {
  if (errormessage != nullptr) {
    
  } else {
    
  }
  errormessage_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), errormessage,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:StartSessionResult.errorMessage)
}

// int64 sessionId = 3;
inline void StartSessionResult::clear_sessionid() {
  sessionid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 StartSessionResult::_internal_sessionid() const {
  return sessionid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 StartSessionResult::sessionid() const {
  // @@protoc_insertion_point(field_get:StartSessionResult.sessionId)
  return _internal_sessionid();
}
inline void StartSessionResult::_internal_set_sessionid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  sessionid_ = value;
}
inline void StartSessionResult::set_sessionid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_sessionid(value);
  // @@protoc_insertion_point(field_set:StartSessionResult.sessionId)
}

// -------------------------------------------------------------------

// EndSessionRequest

// int64 sessionId = 1;
inline void EndSessionRequest::clear_sessionid() {
  sessionid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 EndSessionRequest::_internal_sessionid() const {
  return sessionid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 EndSessionRequest::sessionid() const {
  // @@protoc_insertion_point(field_get:EndSessionRequest.sessionId)
  return _internal_sessionid();
}
inline void EndSessionRequest::_internal_set_sessionid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  sessionid_ = value;
}
inline void EndSessionRequest::set_sessionid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_sessionid(value);
  // @@protoc_insertion_point(field_set:EndSessionRequest.sessionId)
}

// -------------------------------------------------------------------

// StackFrame

// string file = 1;
inline void StackFrame::clear_file() {
  file_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& StackFrame::file() const {
  // @@protoc_insertion_point(field_get:StackFrame.file)
  return _internal_file();
}
inline void StackFrame::set_file(const std::string& value) {
  _internal_set_file(value);
  // @@protoc_insertion_point(field_set:StackFrame.file)
}
inline std::string* StackFrame::mutable_file() {
  // @@protoc_insertion_point(field_mutable:StackFrame.file)
  return _internal_mutable_file();
}
inline const std::string& StackFrame::_internal_file() const {
  return file_.Get();
}
inline void StackFrame::_internal_set_file(const std::string& value) {
  
  file_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void StackFrame::set_file(std::string&& value) {
  
  file_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:StackFrame.file)
}
inline void StackFrame::set_file(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  file_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:StackFrame.file)
}
inline void StackFrame::set_file(const char* value,
    size_t size) {
  
  file_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:StackFrame.file)
}
inline std::string* StackFrame::_internal_mutable_file() {
  
  return file_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* StackFrame::release_file() {
  // @@protoc_insertion_point(field_release:StackFrame.file)
  return file_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StackFrame::set_allocated_file(std::string* file) {
  if (file != nullptr) {
    
  } else {
    
  }
  file_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), file,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:StackFrame.file)
}

// string function = 2;
inline void StackFrame::clear_function() {
  function_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& StackFrame::function() const {
  // @@protoc_insertion_point(field_get:StackFrame.function)
  return _internal_function();
}
inline void StackFrame::set_function(const std::string& value) {
  _internal_set_function(value);
  // @@protoc_insertion_point(field_set:StackFrame.function)
}
inline std::string* StackFrame::mutable_function() {
  // @@protoc_insertion_point(field_mutable:StackFrame.function)
  return _internal_mutable_function();
}
inline const std::string& StackFrame::_internal_function() const {
  return function_.Get();
}
inline void StackFrame::_internal_set_function(const std::string& value) {
  
  function_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void StackFrame::set_function(std::string&& value) {
  
  function_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:StackFrame.function)
}
inline void StackFrame::set_function(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  function_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:StackFrame.function)
}
inline void StackFrame::set_function(const char* value,
    size_t size) {
  
  function_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:StackFrame.function)
}
inline std::string* StackFrame::_internal_mutable_function() {
  
  return function_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* StackFrame::release_function() {
  // @@protoc_insertion_point(field_release:StackFrame.function)
  return function_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StackFrame::set_allocated_function(std::string* function) {
  if (function != nullptr) {
    
  } else {
    
  }
  function_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), function,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:StackFrame.function)
}

// int32 lineNumber = 3;
inline void StackFrame::clear_linenumber() {
  linenumber_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StackFrame::_internal_linenumber() const {
  return linenumber_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StackFrame::linenumber() const {
  // @@protoc_insertion_point(field_get:StackFrame.lineNumber)
  return _internal_linenumber();
}
inline void StackFrame::_internal_set_linenumber(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  linenumber_ = value;
}
inline void StackFrame::set_linenumber(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_linenumber(value);
  // @@protoc_insertion_point(field_set:StackFrame.lineNumber)
}

// -------------------------------------------------------------------

// CurrentStackFrameRequest

// .StackFrame currentFrame = 1;
inline bool CurrentStackFrameRequest::_internal_has_currentframe() const {
  return this != internal_default_instance() && currentframe_ != nullptr;
}
inline bool CurrentStackFrameRequest::has_currentframe() const {
  return _internal_has_currentframe();
}
inline void CurrentStackFrameRequest::clear_currentframe() {
  if (GetArena() == nullptr && currentframe_ != nullptr) {
    delete currentframe_;
  }
  currentframe_ = nullptr;
}
inline const ::StackFrame& CurrentStackFrameRequest::_internal_currentframe() const {
  const ::StackFrame* p = currentframe_;
  return p != nullptr ? *p : *reinterpret_cast<const ::StackFrame*>(
      &::_StackFrame_default_instance_);
}
inline const ::StackFrame& CurrentStackFrameRequest::currentframe() const {
  // @@protoc_insertion_point(field_get:CurrentStackFrameRequest.currentFrame)
  return _internal_currentframe();
}
inline void CurrentStackFrameRequest::unsafe_arena_set_allocated_currentframe(
    ::StackFrame* currentframe) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(currentframe_);
  }
  currentframe_ = currentframe;
  if (currentframe) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CurrentStackFrameRequest.currentFrame)
}
inline ::StackFrame* CurrentStackFrameRequest::release_currentframe() {
  
  ::StackFrame* temp = currentframe_;
  currentframe_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::StackFrame* CurrentStackFrameRequest::unsafe_arena_release_currentframe() {
  // @@protoc_insertion_point(field_release:CurrentStackFrameRequest.currentFrame)
  
  ::StackFrame* temp = currentframe_;
  currentframe_ = nullptr;
  return temp;
}
inline ::StackFrame* CurrentStackFrameRequest::_internal_mutable_currentframe() {
  
  if (currentframe_ == nullptr) {
    auto* p = CreateMaybeMessage<::StackFrame>(GetArena());
    currentframe_ = p;
  }
  return currentframe_;
}
inline ::StackFrame* CurrentStackFrameRequest::mutable_currentframe() {
  // @@protoc_insertion_point(field_mutable:CurrentStackFrameRequest.currentFrame)
  return _internal_mutable_currentframe();
}
inline void CurrentStackFrameRequest::set_allocated_currentframe(::StackFrame* currentframe) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete currentframe_;
  }
  if (currentframe) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(currentframe);
    if (message_arena != submessage_arena) {
      currentframe = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, currentframe, submessage_arena);
    }
    
  } else {
    
  }
  currentframe_ = currentframe;
  // @@protoc_insertion_point(field_set_allocated:CurrentStackFrameRequest.currentFrame)
}

// -------------------------------------------------------------------

// UpdateIRRequest

// int64 sessionId = 1;
inline void UpdateIRRequest::clear_sessionid() {
  sessionid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 UpdateIRRequest::_internal_sessionid() const {
  return sessionid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 UpdateIRRequest::sessionid() const {
  // @@protoc_insertion_point(field_get:UpdateIRRequest.sessionId)
  return _internal_sessionid();
}
inline void UpdateIRRequest::_internal_set_sessionid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  sessionid_ = value;
}
inline void UpdateIRRequest::set_sessionid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_sessionid(value);
  // @@protoc_insertion_point(field_set:UpdateIRRequest.sessionId)
}

// string text = 2;
inline void UpdateIRRequest::clear_text() {
  text_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& UpdateIRRequest::text() const {
  // @@protoc_insertion_point(field_get:UpdateIRRequest.text)
  return _internal_text();
}
inline void UpdateIRRequest::set_text(const std::string& value) {
  _internal_set_text(value);
  // @@protoc_insertion_point(field_set:UpdateIRRequest.text)
}
inline std::string* UpdateIRRequest::mutable_text() {
  // @@protoc_insertion_point(field_mutable:UpdateIRRequest.text)
  return _internal_mutable_text();
}
inline const std::string& UpdateIRRequest::_internal_text() const {
  return text_.Get();
}
inline void UpdateIRRequest::_internal_set_text(const std::string& value) {
  
  text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UpdateIRRequest::set_text(std::string&& value) {
  
  text_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:UpdateIRRequest.text)
}
inline void UpdateIRRequest::set_text(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:UpdateIRRequest.text)
}
inline void UpdateIRRequest::set_text(const char* value,
    size_t size) {
  
  text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:UpdateIRRequest.text)
}
inline std::string* UpdateIRRequest::_internal_mutable_text() {
  
  return text_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UpdateIRRequest::release_text() {
  // @@protoc_insertion_point(field_release:UpdateIRRequest.text)
  return text_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UpdateIRRequest::set_allocated_text(std::string* text) {
  if (text != nullptr) {
    
  } else {
    
  }
  text_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), text,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:UpdateIRRequest.text)
}

// -------------------------------------------------------------------

// Result

// bool success = 1;
inline void Result::clear_success() {
  success_ = false;
}
inline bool Result::_internal_success() const {
  return success_;
}
inline bool Result::success() const {
  // @@protoc_insertion_point(field_get:Result.success)
  return _internal_success();
}
inline void Result::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void Result::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:Result.success)
}

// int32 errorCode = 2;
inline void Result::clear_errorcode() {
  errorcode_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Result::_internal_errorcode() const {
  return errorcode_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Result::errorcode() const {
  // @@protoc_insertion_point(field_get:Result.errorCode)
  return _internal_errorcode();
}
inline void Result::_internal_set_errorcode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  errorcode_ = value;
}
inline void Result::set_errorcode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_errorcode(value);
  // @@protoc_insertion_point(field_set:Result.errorCode)
}

// string errorMessage = 3;
inline void Result::clear_errormessage() {
  errormessage_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Result::errormessage() const {
  // @@protoc_insertion_point(field_get:Result.errorMessage)
  return _internal_errormessage();
}
inline void Result::set_errormessage(const std::string& value) {
  _internal_set_errormessage(value);
  // @@protoc_insertion_point(field_set:Result.errorMessage)
}
inline std::string* Result::mutable_errormessage() {
  // @@protoc_insertion_point(field_mutable:Result.errorMessage)
  return _internal_mutable_errormessage();
}
inline const std::string& Result::_internal_errormessage() const {
  return errormessage_.Get();
}
inline void Result::_internal_set_errormessage(const std::string& value) {
  
  errormessage_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Result::set_errormessage(std::string&& value) {
  
  errormessage_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Result.errorMessage)
}
inline void Result::set_errormessage(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  errormessage_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Result.errorMessage)
}
inline void Result::set_errormessage(const char* value,
    size_t size) {
  
  errormessage_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Result.errorMessage)
}
inline std::string* Result::_internal_mutable_errormessage() {
  
  return errormessage_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Result::release_errormessage() {
  // @@protoc_insertion_point(field_release:Result.errorMessage)
  return errormessage_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Result::set_allocated_errormessage(std::string* errormessage) {
  if (errormessage != nullptr) {
    
  } else {
    
  }
  errormessage_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), errormessage,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Result.errorMessage)
}

// -------------------------------------------------------------------

// RGBColor

// int32 R = 1;
inline void RGBColor::clear_r() {
  r_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RGBColor::_internal_r() const {
  return r_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RGBColor::r() const {
  // @@protoc_insertion_point(field_get:RGBColor.R)
  return _internal_r();
}
inline void RGBColor::_internal_set_r(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  r_ = value;
}
inline void RGBColor::set_r(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_r(value);
  // @@protoc_insertion_point(field_set:RGBColor.R)
}

// int32 G = 2;
inline void RGBColor::clear_g() {
  g_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RGBColor::_internal_g() const {
  return g_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RGBColor::g() const {
  // @@protoc_insertion_point(field_get:RGBColor.G)
  return _internal_g();
}
inline void RGBColor::_internal_set_g(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  g_ = value;
}
inline void RGBColor::set_g(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_g(value);
  // @@protoc_insertion_point(field_set:RGBColor.G)
}

// int32 B = 3;
inline void RGBColor::clear_b() {
  b_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RGBColor::_internal_b() const {
  return b_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RGBColor::b() const {
  // @@protoc_insertion_point(field_get:RGBColor.B)
  return _internal_b();
}
inline void RGBColor::_internal_set_b(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  b_ = value;
}
inline void RGBColor::set_b(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_b(value);
  // @@protoc_insertion_point(field_set:RGBColor.B)
}

// -------------------------------------------------------------------

// ClearHighlightingRequest

// .HighlightingType highlighting = 1;
inline void ClearHighlightingRequest::clear_highlighting() {
  highlighting_ = 0;
}
inline ::HighlightingType ClearHighlightingRequest::_internal_highlighting() const {
  return static_cast< ::HighlightingType >(highlighting_);
}
inline ::HighlightingType ClearHighlightingRequest::highlighting() const {
  // @@protoc_insertion_point(field_get:ClearHighlightingRequest.highlighting)
  return _internal_highlighting();
}
inline void ClearHighlightingRequest::_internal_set_highlighting(::HighlightingType value) {
  
  highlighting_ = value;
}
inline void ClearHighlightingRequest::set_highlighting(::HighlightingType value) {
  _internal_set_highlighting(value);
  // @@protoc_insertion_point(field_set:ClearHighlightingRequest.highlighting)
}

// -------------------------------------------------------------------

// MarkElementRequest

// int64 elementAddress = 1;
inline void MarkElementRequest::clear_elementaddress() {
  elementaddress_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MarkElementRequest::_internal_elementaddress() const {
  return elementaddress_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MarkElementRequest::elementaddress() const {
  // @@protoc_insertion_point(field_get:MarkElementRequest.elementAddress)
  return _internal_elementaddress();
}
inline void MarkElementRequest::_internal_set_elementaddress(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  elementaddress_ = value;
}
inline void MarkElementRequest::set_elementaddress(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_elementaddress(value);
  // @@protoc_insertion_point(field_set:MarkElementRequest.elementAddress)
}

// .RGBColor color = 2;
inline bool MarkElementRequest::_internal_has_color() const {
  return this != internal_default_instance() && color_ != nullptr;
}
inline bool MarkElementRequest::has_color() const {
  return _internal_has_color();
}
inline void MarkElementRequest::clear_color() {
  if (GetArena() == nullptr && color_ != nullptr) {
    delete color_;
  }
  color_ = nullptr;
}
inline const ::RGBColor& MarkElementRequest::_internal_color() const {
  const ::RGBColor* p = color_;
  return p != nullptr ? *p : *reinterpret_cast<const ::RGBColor*>(
      &::_RGBColor_default_instance_);
}
inline const ::RGBColor& MarkElementRequest::color() const {
  // @@protoc_insertion_point(field_get:MarkElementRequest.color)
  return _internal_color();
}
inline void MarkElementRequest::unsafe_arena_set_allocated_color(
    ::RGBColor* color) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(color_);
  }
  color_ = color;
  if (color) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:MarkElementRequest.color)
}
inline ::RGBColor* MarkElementRequest::release_color() {
  
  ::RGBColor* temp = color_;
  color_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::RGBColor* MarkElementRequest::unsafe_arena_release_color() {
  // @@protoc_insertion_point(field_release:MarkElementRequest.color)
  
  ::RGBColor* temp = color_;
  color_ = nullptr;
  return temp;
}
inline ::RGBColor* MarkElementRequest::_internal_mutable_color() {
  
  if (color_ == nullptr) {
    auto* p = CreateMaybeMessage<::RGBColor>(GetArena());
    color_ = p;
  }
  return color_;
}
inline ::RGBColor* MarkElementRequest::mutable_color() {
  // @@protoc_insertion_point(field_mutable:MarkElementRequest.color)
  return _internal_mutable_color();
}
inline void MarkElementRequest::set_allocated_color(::RGBColor* color) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete color_;
  }
  if (color) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(color);
    if (message_arena != submessage_arena) {
      color = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, color, submessage_arena);
    }
    
  } else {
    
  }
  color_ = color;
  // @@protoc_insertion_point(field_set_allocated:MarkElementRequest.color)
}

// string label = 3;
inline void MarkElementRequest::clear_label() {
  label_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& MarkElementRequest::label() const {
  // @@protoc_insertion_point(field_get:MarkElementRequest.label)
  return _internal_label();
}
inline void MarkElementRequest::set_label(const std::string& value) {
  _internal_set_label(value);
  // @@protoc_insertion_point(field_set:MarkElementRequest.label)
}
inline std::string* MarkElementRequest::mutable_label() {
  // @@protoc_insertion_point(field_mutable:MarkElementRequest.label)
  return _internal_mutable_label();
}
inline const std::string& MarkElementRequest::_internal_label() const {
  return label_.Get();
}
inline void MarkElementRequest::_internal_set_label(const std::string& value) {
  
  label_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void MarkElementRequest::set_label(std::string&& value) {
  
  label_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:MarkElementRequest.label)
}
inline void MarkElementRequest::set_label(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  label_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:MarkElementRequest.label)
}
inline void MarkElementRequest::set_label(const char* value,
    size_t size) {
  
  label_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:MarkElementRequest.label)
}
inline std::string* MarkElementRequest::_internal_mutable_label() {
  
  return label_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* MarkElementRequest::release_label() {
  // @@protoc_insertion_point(field_release:MarkElementRequest.label)
  return label_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MarkElementRequest::set_allocated_label(std::string* label) {
  if (label != nullptr) {
    
  } else {
    
  }
  label_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), label,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:MarkElementRequest.label)
}

// .HighlightingType highlighting = 4;
inline void MarkElementRequest::clear_highlighting() {
  highlighting_ = 0;
}
inline ::HighlightingType MarkElementRequest::_internal_highlighting() const {
  return static_cast< ::HighlightingType >(highlighting_);
}
inline ::HighlightingType MarkElementRequest::highlighting() const {
  // @@protoc_insertion_point(field_get:MarkElementRequest.highlighting)
  return _internal_highlighting();
}
inline void MarkElementRequest::_internal_set_highlighting(::HighlightingType value) {
  
  highlighting_ = value;
}
inline void MarkElementRequest::set_highlighting(::HighlightingType value) {
  _internal_set_highlighting(value);
  // @@protoc_insertion_point(field_set:MarkElementRequest.highlighting)
}

// -------------------------------------------------------------------

// SetCurrentElementRequest

// int32 elementId = 1;
inline void SetCurrentElementRequest::clear_elementid() {
  elementid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SetCurrentElementRequest::_internal_elementid() const {
  return elementid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SetCurrentElementRequest::elementid() const {
  // @@protoc_insertion_point(field_get:SetCurrentElementRequest.elementId)
  return _internal_elementid();
}
inline void SetCurrentElementRequest::_internal_set_elementid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  elementid_ = value;
}
inline void SetCurrentElementRequest::set_elementid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_elementid(value);
  // @@protoc_insertion_point(field_set:SetCurrentElementRequest.elementId)
}

// int64 elementAddress = 2;
inline void SetCurrentElementRequest::clear_elementaddress() {
  elementaddress_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SetCurrentElementRequest::_internal_elementaddress() const {
  return elementaddress_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SetCurrentElementRequest::elementaddress() const {
  // @@protoc_insertion_point(field_get:SetCurrentElementRequest.elementAddress)
  return _internal_elementaddress();
}
inline void SetCurrentElementRequest::_internal_set_elementaddress(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  elementaddress_ = value;
}
inline void SetCurrentElementRequest::set_elementaddress(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_elementaddress(value);
  // @@protoc_insertion_point(field_set:SetCurrentElementRequest.elementAddress)
}

// .IRElementKind elementKind = 3;
inline void SetCurrentElementRequest::clear_elementkind() {
  elementkind_ = 0;
}
inline ::IRElementKind SetCurrentElementRequest::_internal_elementkind() const {
  return static_cast< ::IRElementKind >(elementkind_);
}
inline ::IRElementKind SetCurrentElementRequest::elementkind() const {
  // @@protoc_insertion_point(field_get:SetCurrentElementRequest.elementKind)
  return _internal_elementkind();
}
inline void SetCurrentElementRequest::_internal_set_elementkind(::IRElementKind value) {
  
  elementkind_ = value;
}
inline void SetCurrentElementRequest::set_elementkind(::IRElementKind value) {
  _internal_set_elementkind(value);
  // @@protoc_insertion_point(field_set:SetCurrentElementRequest.elementKind)
}

// string label = 4;
inline void SetCurrentElementRequest::clear_label() {
  label_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SetCurrentElementRequest::label() const {
  // @@protoc_insertion_point(field_get:SetCurrentElementRequest.label)
  return _internal_label();
}
inline void SetCurrentElementRequest::set_label(const std::string& value) {
  _internal_set_label(value);
  // @@protoc_insertion_point(field_set:SetCurrentElementRequest.label)
}
inline std::string* SetCurrentElementRequest::mutable_label() {
  // @@protoc_insertion_point(field_mutable:SetCurrentElementRequest.label)
  return _internal_mutable_label();
}
inline const std::string& SetCurrentElementRequest::_internal_label() const {
  return label_.Get();
}
inline void SetCurrentElementRequest::_internal_set_label(const std::string& value) {
  
  label_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SetCurrentElementRequest::set_label(std::string&& value) {
  
  label_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:SetCurrentElementRequest.label)
}
inline void SetCurrentElementRequest::set_label(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  label_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:SetCurrentElementRequest.label)
}
inline void SetCurrentElementRequest::set_label(const char* value,
    size_t size) {
  
  label_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:SetCurrentElementRequest.label)
}
inline std::string* SetCurrentElementRequest::_internal_mutable_label() {
  
  return label_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SetCurrentElementRequest::release_label() {
  // @@protoc_insertion_point(field_release:SetCurrentElementRequest.label)
  return label_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SetCurrentElementRequest::set_allocated_label(std::string* label) {
  if (label != nullptr) {
    
  } else {
    
  }
  label_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), label,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:SetCurrentElementRequest.label)
}

// -------------------------------------------------------------------

// ElementCommandRequest

// .ElementCommand command = 1;
inline void ElementCommandRequest::clear_command() {
  command_ = 0;
}
inline ::ElementCommand ElementCommandRequest::_internal_command() const {
  return static_cast< ::ElementCommand >(command_);
}
inline ::ElementCommand ElementCommandRequest::command() const {
  // @@protoc_insertion_point(field_get:ElementCommandRequest.command)
  return _internal_command();
}
inline void ElementCommandRequest::_internal_set_command(::ElementCommand value) {
  
  command_ = value;
}
inline void ElementCommandRequest::set_command(::ElementCommand value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:ElementCommandRequest.command)
}

// int64 elementAddress = 2;
inline void ElementCommandRequest::clear_elementaddress() {
  elementaddress_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ElementCommandRequest::_internal_elementaddress() const {
  return elementaddress_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ElementCommandRequest::elementaddress() const {
  // @@protoc_insertion_point(field_get:ElementCommandRequest.elementAddress)
  return _internal_elementaddress();
}
inline void ElementCommandRequest::_internal_set_elementaddress(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  elementaddress_ = value;
}
inline void ElementCommandRequest::set_elementaddress(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_elementaddress(value);
  // @@protoc_insertion_point(field_set:ElementCommandRequest.elementAddress)
}

// string label = 3;
inline void ElementCommandRequest::clear_label() {
  label_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ElementCommandRequest::label() const {
  // @@protoc_insertion_point(field_get:ElementCommandRequest.label)
  return _internal_label();
}
inline void ElementCommandRequest::set_label(const std::string& value) {
  _internal_set_label(value);
  // @@protoc_insertion_point(field_set:ElementCommandRequest.label)
}
inline std::string* ElementCommandRequest::mutable_label() {
  // @@protoc_insertion_point(field_mutable:ElementCommandRequest.label)
  return _internal_mutable_label();
}
inline const std::string& ElementCommandRequest::_internal_label() const {
  return label_.Get();
}
inline void ElementCommandRequest::_internal_set_label(const std::string& value) {
  
  label_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ElementCommandRequest::set_label(std::string&& value) {
  
  label_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ElementCommandRequest.label)
}
inline void ElementCommandRequest::set_label(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  label_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ElementCommandRequest.label)
}
inline void ElementCommandRequest::set_label(const char* value,
    size_t size) {
  
  label_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ElementCommandRequest.label)
}
inline std::string* ElementCommandRequest::_internal_mutable_label() {
  
  return label_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ElementCommandRequest::release_label() {
  // @@protoc_insertion_point(field_release:ElementCommandRequest.label)
  return label_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ElementCommandRequest::set_allocated_label(std::string* label) {
  if (label != nullptr) {
    
  } else {
    
  }
  label_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), label,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ElementCommandRequest.label)
}

// .HighlightingType highlighting = 4;
inline void ElementCommandRequest::clear_highlighting() {
  highlighting_ = 0;
}
inline ::HighlightingType ElementCommandRequest::_internal_highlighting() const {
  return static_cast< ::HighlightingType >(highlighting_);
}
inline ::HighlightingType ElementCommandRequest::highlighting() const {
  // @@protoc_insertion_point(field_get:ElementCommandRequest.highlighting)
  return _internal_highlighting();
}
inline void ElementCommandRequest::_internal_set_highlighting(::HighlightingType value) {
  
  highlighting_ = value;
}
inline void ElementCommandRequest::set_highlighting(::HighlightingType value) {
  _internal_set_highlighting(value);
  // @@protoc_insertion_point(field_set:ElementCommandRequest.highlighting)
}

// .StackFrame stackFrame = 5;
inline bool ElementCommandRequest::_internal_has_stackframe() const {
  return this != internal_default_instance() && stackframe_ != nullptr;
}
inline bool ElementCommandRequest::has_stackframe() const {
  return _internal_has_stackframe();
}
inline void ElementCommandRequest::clear_stackframe() {
  if (GetArena() == nullptr && stackframe_ != nullptr) {
    delete stackframe_;
  }
  stackframe_ = nullptr;
}
inline const ::StackFrame& ElementCommandRequest::_internal_stackframe() const {
  const ::StackFrame* p = stackframe_;
  return p != nullptr ? *p : *reinterpret_cast<const ::StackFrame*>(
      &::_StackFrame_default_instance_);
}
inline const ::StackFrame& ElementCommandRequest::stackframe() const {
  // @@protoc_insertion_point(field_get:ElementCommandRequest.stackFrame)
  return _internal_stackframe();
}
inline void ElementCommandRequest::unsafe_arena_set_allocated_stackframe(
    ::StackFrame* stackframe) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stackframe_);
  }
  stackframe_ = stackframe;
  if (stackframe) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ElementCommandRequest.stackFrame)
}
inline ::StackFrame* ElementCommandRequest::release_stackframe() {
  
  ::StackFrame* temp = stackframe_;
  stackframe_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::StackFrame* ElementCommandRequest::unsafe_arena_release_stackframe() {
  // @@protoc_insertion_point(field_release:ElementCommandRequest.stackFrame)
  
  ::StackFrame* temp = stackframe_;
  stackframe_ = nullptr;
  return temp;
}
inline ::StackFrame* ElementCommandRequest::_internal_mutable_stackframe() {
  
  if (stackframe_ == nullptr) {
    auto* p = CreateMaybeMessage<::StackFrame>(GetArena());
    stackframe_ = p;
  }
  return stackframe_;
}
inline ::StackFrame* ElementCommandRequest::mutable_stackframe() {
  // @@protoc_insertion_point(field_mutable:ElementCommandRequest.stackFrame)
  return _internal_mutable_stackframe();
}
inline void ElementCommandRequest::set_allocated_stackframe(::StackFrame* stackframe) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete stackframe_;
  }
  if (stackframe) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(stackframe);
    if (message_arena != submessage_arena) {
      stackframe = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stackframe, submessage_arena);
    }
    
  } else {
    
  }
  stackframe_ = stackframe;
  // @@protoc_insertion_point(field_set_allocated:ElementCommandRequest.stackFrame)
}

// -------------------------------------------------------------------

// ActiveBreakpointRequest

// int64 elementAddress = 1;
inline void ActiveBreakpointRequest::clear_elementaddress() {
  elementaddress_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ActiveBreakpointRequest::_internal_elementaddress() const {
  return elementaddress_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ActiveBreakpointRequest::elementaddress() const {
  // @@protoc_insertion_point(field_get:ActiveBreakpointRequest.elementAddress)
  return _internal_elementaddress();
}
inline void ActiveBreakpointRequest::_internal_set_elementaddress(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  elementaddress_ = value;
}
inline void ActiveBreakpointRequest::set_elementaddress(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_elementaddress(value);
  // @@protoc_insertion_point(field_set:ActiveBreakpointRequest.elementAddress)
}

// -------------------------------------------------------------------

// ActiveBreakpointResult

// bool success = 1;
inline void ActiveBreakpointResult::clear_success() {
  success_ = false;
}
inline bool ActiveBreakpointResult::_internal_success() const {
  return success_;
}
inline bool ActiveBreakpointResult::success() const {
  // @@protoc_insertion_point(field_get:ActiveBreakpointResult.success)
  return _internal_success();
}
inline void ActiveBreakpointResult::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void ActiveBreakpointResult::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:ActiveBreakpointResult.success)
}

// int32 errorCode = 2;
inline void ActiveBreakpointResult::clear_errorcode() {
  errorcode_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ActiveBreakpointResult::_internal_errorcode() const {
  return errorcode_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ActiveBreakpointResult::errorcode() const {
  // @@protoc_insertion_point(field_get:ActiveBreakpointResult.errorCode)
  return _internal_errorcode();
}
inline void ActiveBreakpointResult::_internal_set_errorcode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  errorcode_ = value;
}
inline void ActiveBreakpointResult::set_errorcode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_errorcode(value);
  // @@protoc_insertion_point(field_set:ActiveBreakpointResult.errorCode)
}

// string errorMessage = 3;
inline void ActiveBreakpointResult::clear_errormessage() {
  errormessage_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ActiveBreakpointResult::errormessage() const {
  // @@protoc_insertion_point(field_get:ActiveBreakpointResult.errorMessage)
  return _internal_errormessage();
}
inline void ActiveBreakpointResult::set_errormessage(const std::string& value) {
  _internal_set_errormessage(value);
  // @@protoc_insertion_point(field_set:ActiveBreakpointResult.errorMessage)
}
inline std::string* ActiveBreakpointResult::mutable_errormessage() {
  // @@protoc_insertion_point(field_mutable:ActiveBreakpointResult.errorMessage)
  return _internal_mutable_errormessage();
}
inline const std::string& ActiveBreakpointResult::_internal_errormessage() const {
  return errormessage_.Get();
}
inline void ActiveBreakpointResult::_internal_set_errormessage(const std::string& value) {
  
  errormessage_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ActiveBreakpointResult::set_errormessage(std::string&& value) {
  
  errormessage_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ActiveBreakpointResult.errorMessage)
}
inline void ActiveBreakpointResult::set_errormessage(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  errormessage_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ActiveBreakpointResult.errorMessage)
}
inline void ActiveBreakpointResult::set_errormessage(const char* value,
    size_t size) {
  
  errormessage_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ActiveBreakpointResult.errorMessage)
}
inline std::string* ActiveBreakpointResult::_internal_mutable_errormessage() {
  
  return errormessage_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ActiveBreakpointResult::release_errormessage() {
  // @@protoc_insertion_point(field_release:ActiveBreakpointResult.errorMessage)
  return errormessage_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ActiveBreakpointResult::set_allocated_errormessage(std::string* errormessage) {
  if (errormessage != nullptr) {
    
  } else {
    
  }
  errormessage_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), errormessage,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ActiveBreakpointResult.errorMessage)
}

// bool hasBreakpoint = 4;
inline void ActiveBreakpointResult::clear_hasbreakpoint() {
  hasbreakpoint_ = false;
}
inline bool ActiveBreakpointResult::_internal_hasbreakpoint() const {
  return hasbreakpoint_;
}
inline bool ActiveBreakpointResult::hasbreakpoint() const {
  // @@protoc_insertion_point(field_get:ActiveBreakpointResult.hasBreakpoint)
  return _internal_hasbreakpoint();
}
inline void ActiveBreakpointResult::_internal_set_hasbreakpoint(bool value) {
  
  hasbreakpoint_ = value;
}
inline void ActiveBreakpointResult::set_hasbreakpoint(bool value) {
  _internal_set_hasbreakpoint(value);
  // @@protoc_insertion_point(field_set:ActiveBreakpointResult.hasBreakpoint)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::SessionState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SessionState>() {
  return ::SessionState_descriptor();
}
template <> struct is_proto_enum< ::ClientKind> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ClientKind>() {
  return ::ClientKind_descriptor();
}
template <> struct is_proto_enum< ::HighlightingType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::HighlightingType>() {
  return ::HighlightingType_descriptor();
}
template <> struct is_proto_enum< ::IRElementKind> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::IRElementKind>() {
  return ::IRElementKind_descriptor();
}
template <> struct is_proto_enum< ::ElementCommand> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ElementCommand>() {
  return ::ElementCommand_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_DebugService_2eproto

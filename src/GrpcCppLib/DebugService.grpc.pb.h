// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: DebugService.proto
#ifndef GRPC_DebugService_2eproto__INCLUDED
#define GRPC_DebugService_2eproto__INCLUDED

#include "DebugService.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

class DebugService final {
 public:
  static constexpr char const* service_full_name() {
    return "DebugService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status StartSession(::grpc::ClientContext* context, const ::StartSessionRequest& request, ::StartSessionResult* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::StartSessionResult>> AsyncStartSession(::grpc::ClientContext* context, const ::StartSessionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::StartSessionResult>>(AsyncStartSessionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::StartSessionResult>> PrepareAsyncStartSession(::grpc::ClientContext* context, const ::StartSessionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::StartSessionResult>>(PrepareAsyncStartSessionRaw(context, request, cq));
    }
    virtual ::grpc::Status EndSession(::grpc::ClientContext* context, const ::EndSessionRequest& request, ::Result* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Result>> AsyncEndSession(::grpc::ClientContext* context, const ::EndSessionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Result>>(AsyncEndSessionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Result>> PrepareAsyncEndSession(::grpc::ClientContext* context, const ::EndSessionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Result>>(PrepareAsyncEndSessionRaw(context, request, cq));
    }
    virtual ::grpc::Status UpdateIR(::grpc::ClientContext* context, const ::UpdateIRRequest& request, ::Result* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Result>> AsyncUpdateIR(::grpc::ClientContext* context, const ::UpdateIRRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Result>>(AsyncUpdateIRRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Result>> PrepareAsyncUpdateIR(::grpc::ClientContext* context, const ::UpdateIRRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Result>>(PrepareAsyncUpdateIRRaw(context, request, cq));
    }
    virtual ::grpc::Status MarkElement(::grpc::ClientContext* context, const ::MarkElementRequest& request, ::Result* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Result>> AsyncMarkElement(::grpc::ClientContext* context, const ::MarkElementRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Result>>(AsyncMarkElementRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Result>> PrepareAsyncMarkElement(::grpc::ClientContext* context, const ::MarkElementRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Result>>(PrepareAsyncMarkElementRaw(context, request, cq));
    }
    virtual ::grpc::Status SetCurrentElement(::grpc::ClientContext* context, const ::SetCurrentElementRequest& request, ::Result* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Result>> AsyncSetCurrentElement(::grpc::ClientContext* context, const ::SetCurrentElementRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Result>>(AsyncSetCurrentElementRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Result>> PrepareAsyncSetCurrentElement(::grpc::ClientContext* context, const ::SetCurrentElementRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Result>>(PrepareAsyncSetCurrentElementRaw(context, request, cq));
    }
    virtual ::grpc::Status ExecuteCommand(::grpc::ClientContext* context, const ::ElementCommandRequest& request, ::Result* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Result>> AsyncExecuteCommand(::grpc::ClientContext* context, const ::ElementCommandRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Result>>(AsyncExecuteCommandRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Result>> PrepareAsyncExecuteCommand(::grpc::ClientContext* context, const ::ElementCommandRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Result>>(PrepareAsyncExecuteCommandRaw(context, request, cq));
    }
    virtual ::grpc::Status HasActiveBreakpoint(::grpc::ClientContext* context, const ::ActiveBreakpointRequest& request, ::ActiveBreakpointResult* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ActiveBreakpointResult>> AsyncHasActiveBreakpoint(::grpc::ClientContext* context, const ::ActiveBreakpointRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ActiveBreakpointResult>>(AsyncHasActiveBreakpointRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ActiveBreakpointResult>> PrepareAsyncHasActiveBreakpoint(::grpc::ClientContext* context, const ::ActiveBreakpointRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ActiveBreakpointResult>>(PrepareAsyncHasActiveBreakpointRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void StartSession(::grpc::ClientContext* context, const ::StartSessionRequest* request, ::StartSessionResult* response, std::function<void(::grpc::Status)>) = 0;
      virtual void StartSession(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::StartSessionResult* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void StartSession(::grpc::ClientContext* context, const ::StartSessionRequest* request, ::StartSessionResult* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void StartSession(::grpc::ClientContext* context, const ::StartSessionRequest* request, ::StartSessionResult* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void StartSession(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::StartSessionResult* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void StartSession(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::StartSessionResult* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void EndSession(::grpc::ClientContext* context, const ::EndSessionRequest* request, ::Result* response, std::function<void(::grpc::Status)>) = 0;
      virtual void EndSession(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Result* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void EndSession(::grpc::ClientContext* context, const ::EndSessionRequest* request, ::Result* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void EndSession(::grpc::ClientContext* context, const ::EndSessionRequest* request, ::Result* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void EndSession(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Result* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void EndSession(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Result* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void UpdateIR(::grpc::ClientContext* context, const ::UpdateIRRequest* request, ::Result* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UpdateIR(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Result* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void UpdateIR(::grpc::ClientContext* context, const ::UpdateIRRequest* request, ::Result* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void UpdateIR(::grpc::ClientContext* context, const ::UpdateIRRequest* request, ::Result* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void UpdateIR(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Result* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void UpdateIR(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Result* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void MarkElement(::grpc::ClientContext* context, const ::MarkElementRequest* request, ::Result* response, std::function<void(::grpc::Status)>) = 0;
      virtual void MarkElement(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Result* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void MarkElement(::grpc::ClientContext* context, const ::MarkElementRequest* request, ::Result* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void MarkElement(::grpc::ClientContext* context, const ::MarkElementRequest* request, ::Result* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void MarkElement(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Result* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void MarkElement(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Result* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void SetCurrentElement(::grpc::ClientContext* context, const ::SetCurrentElementRequest* request, ::Result* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetCurrentElement(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Result* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SetCurrentElement(::grpc::ClientContext* context, const ::SetCurrentElementRequest* request, ::Result* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SetCurrentElement(::grpc::ClientContext* context, const ::SetCurrentElementRequest* request, ::Result* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SetCurrentElement(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Result* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SetCurrentElement(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Result* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void ExecuteCommand(::grpc::ClientContext* context, const ::ElementCommandRequest* request, ::Result* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ExecuteCommand(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Result* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ExecuteCommand(::grpc::ClientContext* context, const ::ElementCommandRequest* request, ::Result* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ExecuteCommand(::grpc::ClientContext* context, const ::ElementCommandRequest* request, ::Result* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ExecuteCommand(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Result* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ExecuteCommand(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Result* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void HasActiveBreakpoint(::grpc::ClientContext* context, const ::ActiveBreakpointRequest* request, ::ActiveBreakpointResult* response, std::function<void(::grpc::Status)>) = 0;
      virtual void HasActiveBreakpoint(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ActiveBreakpointResult* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void HasActiveBreakpoint(::grpc::ClientContext* context, const ::ActiveBreakpointRequest* request, ::ActiveBreakpointResult* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void HasActiveBreakpoint(::grpc::ClientContext* context, const ::ActiveBreakpointRequest* request, ::ActiveBreakpointResult* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void HasActiveBreakpoint(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ActiveBreakpointResult* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void HasActiveBreakpoint(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ActiveBreakpointResult* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::StartSessionResult>* AsyncStartSessionRaw(::grpc::ClientContext* context, const ::StartSessionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::StartSessionResult>* PrepareAsyncStartSessionRaw(::grpc::ClientContext* context, const ::StartSessionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Result>* AsyncEndSessionRaw(::grpc::ClientContext* context, const ::EndSessionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Result>* PrepareAsyncEndSessionRaw(::grpc::ClientContext* context, const ::EndSessionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Result>* AsyncUpdateIRRaw(::grpc::ClientContext* context, const ::UpdateIRRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Result>* PrepareAsyncUpdateIRRaw(::grpc::ClientContext* context, const ::UpdateIRRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Result>* AsyncMarkElementRaw(::grpc::ClientContext* context, const ::MarkElementRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Result>* PrepareAsyncMarkElementRaw(::grpc::ClientContext* context, const ::MarkElementRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Result>* AsyncSetCurrentElementRaw(::grpc::ClientContext* context, const ::SetCurrentElementRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Result>* PrepareAsyncSetCurrentElementRaw(::grpc::ClientContext* context, const ::SetCurrentElementRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Result>* AsyncExecuteCommandRaw(::grpc::ClientContext* context, const ::ElementCommandRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Result>* PrepareAsyncExecuteCommandRaw(::grpc::ClientContext* context, const ::ElementCommandRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ActiveBreakpointResult>* AsyncHasActiveBreakpointRaw(::grpc::ClientContext* context, const ::ActiveBreakpointRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ActiveBreakpointResult>* PrepareAsyncHasActiveBreakpointRaw(::grpc::ClientContext* context, const ::ActiveBreakpointRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status StartSession(::grpc::ClientContext* context, const ::StartSessionRequest& request, ::StartSessionResult* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::StartSessionResult>> AsyncStartSession(::grpc::ClientContext* context, const ::StartSessionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::StartSessionResult>>(AsyncStartSessionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::StartSessionResult>> PrepareAsyncStartSession(::grpc::ClientContext* context, const ::StartSessionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::StartSessionResult>>(PrepareAsyncStartSessionRaw(context, request, cq));
    }
    ::grpc::Status EndSession(::grpc::ClientContext* context, const ::EndSessionRequest& request, ::Result* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Result>> AsyncEndSession(::grpc::ClientContext* context, const ::EndSessionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Result>>(AsyncEndSessionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Result>> PrepareAsyncEndSession(::grpc::ClientContext* context, const ::EndSessionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Result>>(PrepareAsyncEndSessionRaw(context, request, cq));
    }
    ::grpc::Status UpdateIR(::grpc::ClientContext* context, const ::UpdateIRRequest& request, ::Result* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Result>> AsyncUpdateIR(::grpc::ClientContext* context, const ::UpdateIRRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Result>>(AsyncUpdateIRRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Result>> PrepareAsyncUpdateIR(::grpc::ClientContext* context, const ::UpdateIRRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Result>>(PrepareAsyncUpdateIRRaw(context, request, cq));
    }
    ::grpc::Status MarkElement(::grpc::ClientContext* context, const ::MarkElementRequest& request, ::Result* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Result>> AsyncMarkElement(::grpc::ClientContext* context, const ::MarkElementRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Result>>(AsyncMarkElementRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Result>> PrepareAsyncMarkElement(::grpc::ClientContext* context, const ::MarkElementRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Result>>(PrepareAsyncMarkElementRaw(context, request, cq));
    }
    ::grpc::Status SetCurrentElement(::grpc::ClientContext* context, const ::SetCurrentElementRequest& request, ::Result* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Result>> AsyncSetCurrentElement(::grpc::ClientContext* context, const ::SetCurrentElementRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Result>>(AsyncSetCurrentElementRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Result>> PrepareAsyncSetCurrentElement(::grpc::ClientContext* context, const ::SetCurrentElementRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Result>>(PrepareAsyncSetCurrentElementRaw(context, request, cq));
    }
    ::grpc::Status ExecuteCommand(::grpc::ClientContext* context, const ::ElementCommandRequest& request, ::Result* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Result>> AsyncExecuteCommand(::grpc::ClientContext* context, const ::ElementCommandRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Result>>(AsyncExecuteCommandRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Result>> PrepareAsyncExecuteCommand(::grpc::ClientContext* context, const ::ElementCommandRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Result>>(PrepareAsyncExecuteCommandRaw(context, request, cq));
    }
    ::grpc::Status HasActiveBreakpoint(::grpc::ClientContext* context, const ::ActiveBreakpointRequest& request, ::ActiveBreakpointResult* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ActiveBreakpointResult>> AsyncHasActiveBreakpoint(::grpc::ClientContext* context, const ::ActiveBreakpointRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ActiveBreakpointResult>>(AsyncHasActiveBreakpointRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ActiveBreakpointResult>> PrepareAsyncHasActiveBreakpoint(::grpc::ClientContext* context, const ::ActiveBreakpointRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ActiveBreakpointResult>>(PrepareAsyncHasActiveBreakpointRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void StartSession(::grpc::ClientContext* context, const ::StartSessionRequest* request, ::StartSessionResult* response, std::function<void(::grpc::Status)>) override;
      void StartSession(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::StartSessionResult* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void StartSession(::grpc::ClientContext* context, const ::StartSessionRequest* request, ::StartSessionResult* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void StartSession(::grpc::ClientContext* context, const ::StartSessionRequest* request, ::StartSessionResult* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void StartSession(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::StartSessionResult* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void StartSession(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::StartSessionResult* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void EndSession(::grpc::ClientContext* context, const ::EndSessionRequest* request, ::Result* response, std::function<void(::grpc::Status)>) override;
      void EndSession(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Result* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void EndSession(::grpc::ClientContext* context, const ::EndSessionRequest* request, ::Result* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void EndSession(::grpc::ClientContext* context, const ::EndSessionRequest* request, ::Result* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void EndSession(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Result* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void EndSession(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Result* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void UpdateIR(::grpc::ClientContext* context, const ::UpdateIRRequest* request, ::Result* response, std::function<void(::grpc::Status)>) override;
      void UpdateIR(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Result* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void UpdateIR(::grpc::ClientContext* context, const ::UpdateIRRequest* request, ::Result* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void UpdateIR(::grpc::ClientContext* context, const ::UpdateIRRequest* request, ::Result* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void UpdateIR(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Result* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void UpdateIR(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Result* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void MarkElement(::grpc::ClientContext* context, const ::MarkElementRequest* request, ::Result* response, std::function<void(::grpc::Status)>) override;
      void MarkElement(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Result* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void MarkElement(::grpc::ClientContext* context, const ::MarkElementRequest* request, ::Result* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void MarkElement(::grpc::ClientContext* context, const ::MarkElementRequest* request, ::Result* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void MarkElement(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Result* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void MarkElement(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Result* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void SetCurrentElement(::grpc::ClientContext* context, const ::SetCurrentElementRequest* request, ::Result* response, std::function<void(::grpc::Status)>) override;
      void SetCurrentElement(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Result* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SetCurrentElement(::grpc::ClientContext* context, const ::SetCurrentElementRequest* request, ::Result* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SetCurrentElement(::grpc::ClientContext* context, const ::SetCurrentElementRequest* request, ::Result* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SetCurrentElement(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Result* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SetCurrentElement(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Result* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void ExecuteCommand(::grpc::ClientContext* context, const ::ElementCommandRequest* request, ::Result* response, std::function<void(::grpc::Status)>) override;
      void ExecuteCommand(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Result* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ExecuteCommand(::grpc::ClientContext* context, const ::ElementCommandRequest* request, ::Result* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ExecuteCommand(::grpc::ClientContext* context, const ::ElementCommandRequest* request, ::Result* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ExecuteCommand(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Result* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ExecuteCommand(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Result* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void HasActiveBreakpoint(::grpc::ClientContext* context, const ::ActiveBreakpointRequest* request, ::ActiveBreakpointResult* response, std::function<void(::grpc::Status)>) override;
      void HasActiveBreakpoint(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ActiveBreakpointResult* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void HasActiveBreakpoint(::grpc::ClientContext* context, const ::ActiveBreakpointRequest* request, ::ActiveBreakpointResult* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void HasActiveBreakpoint(::grpc::ClientContext* context, const ::ActiveBreakpointRequest* request, ::ActiveBreakpointResult* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void HasActiveBreakpoint(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ActiveBreakpointResult* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void HasActiveBreakpoint(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ActiveBreakpointResult* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::StartSessionResult>* AsyncStartSessionRaw(::grpc::ClientContext* context, const ::StartSessionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::StartSessionResult>* PrepareAsyncStartSessionRaw(::grpc::ClientContext* context, const ::StartSessionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Result>* AsyncEndSessionRaw(::grpc::ClientContext* context, const ::EndSessionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Result>* PrepareAsyncEndSessionRaw(::grpc::ClientContext* context, const ::EndSessionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Result>* AsyncUpdateIRRaw(::grpc::ClientContext* context, const ::UpdateIRRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Result>* PrepareAsyncUpdateIRRaw(::grpc::ClientContext* context, const ::UpdateIRRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Result>* AsyncMarkElementRaw(::grpc::ClientContext* context, const ::MarkElementRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Result>* PrepareAsyncMarkElementRaw(::grpc::ClientContext* context, const ::MarkElementRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Result>* AsyncSetCurrentElementRaw(::grpc::ClientContext* context, const ::SetCurrentElementRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Result>* PrepareAsyncSetCurrentElementRaw(::grpc::ClientContext* context, const ::SetCurrentElementRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Result>* AsyncExecuteCommandRaw(::grpc::ClientContext* context, const ::ElementCommandRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Result>* PrepareAsyncExecuteCommandRaw(::grpc::ClientContext* context, const ::ElementCommandRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ActiveBreakpointResult>* AsyncHasActiveBreakpointRaw(::grpc::ClientContext* context, const ::ActiveBreakpointRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ActiveBreakpointResult>* PrepareAsyncHasActiveBreakpointRaw(::grpc::ClientContext* context, const ::ActiveBreakpointRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_StartSession_;
    const ::grpc::internal::RpcMethod rpcmethod_EndSession_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateIR_;
    const ::grpc::internal::RpcMethod rpcmethod_MarkElement_;
    const ::grpc::internal::RpcMethod rpcmethod_SetCurrentElement_;
    const ::grpc::internal::RpcMethod rpcmethod_ExecuteCommand_;
    const ::grpc::internal::RpcMethod rpcmethod_HasActiveBreakpoint_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status StartSession(::grpc::ServerContext* context, const ::StartSessionRequest* request, ::StartSessionResult* response);
    virtual ::grpc::Status EndSession(::grpc::ServerContext* context, const ::EndSessionRequest* request, ::Result* response);
    virtual ::grpc::Status UpdateIR(::grpc::ServerContext* context, const ::UpdateIRRequest* request, ::Result* response);
    virtual ::grpc::Status MarkElement(::grpc::ServerContext* context, const ::MarkElementRequest* request, ::Result* response);
    virtual ::grpc::Status SetCurrentElement(::grpc::ServerContext* context, const ::SetCurrentElementRequest* request, ::Result* response);
    virtual ::grpc::Status ExecuteCommand(::grpc::ServerContext* context, const ::ElementCommandRequest* request, ::Result* response);
    virtual ::grpc::Status HasActiveBreakpoint(::grpc::ServerContext* context, const ::ActiveBreakpointRequest* request, ::ActiveBreakpointResult* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_StartSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_StartSession() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_StartSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartSession(::grpc::ServerContext* /*context*/, const ::StartSessionRequest* /*request*/, ::StartSessionResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStartSession(::grpc::ServerContext* context, ::StartSessionRequest* request, ::grpc::ServerAsyncResponseWriter< ::StartSessionResult>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_EndSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_EndSession() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_EndSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EndSession(::grpc::ServerContext* /*context*/, const ::EndSessionRequest* /*request*/, ::Result* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestEndSession(::grpc::ServerContext* context, ::EndSessionRequest* request, ::grpc::ServerAsyncResponseWriter< ::Result>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateIR : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UpdateIR() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_UpdateIR() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateIR(::grpc::ServerContext* /*context*/, const ::UpdateIRRequest* /*request*/, ::Result* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateIR(::grpc::ServerContext* context, ::UpdateIRRequest* request, ::grpc::ServerAsyncResponseWriter< ::Result>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_MarkElement : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_MarkElement() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_MarkElement() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MarkElement(::grpc::ServerContext* /*context*/, const ::MarkElementRequest* /*request*/, ::Result* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestMarkElement(::grpc::ServerContext* context, ::MarkElementRequest* request, ::grpc::ServerAsyncResponseWriter< ::Result>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetCurrentElement : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetCurrentElement() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_SetCurrentElement() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetCurrentElement(::grpc::ServerContext* /*context*/, const ::SetCurrentElementRequest* /*request*/, ::Result* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetCurrentElement(::grpc::ServerContext* context, ::SetCurrentElementRequest* request, ::grpc::ServerAsyncResponseWriter< ::Result>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ExecuteCommand : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ExecuteCommand() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_ExecuteCommand() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExecuteCommand(::grpc::ServerContext* /*context*/, const ::ElementCommandRequest* /*request*/, ::Result* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestExecuteCommand(::grpc::ServerContext* context, ::ElementCommandRequest* request, ::grpc::ServerAsyncResponseWriter< ::Result>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_HasActiveBreakpoint : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_HasActiveBreakpoint() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_HasActiveBreakpoint() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HasActiveBreakpoint(::grpc::ServerContext* /*context*/, const ::ActiveBreakpointRequest* /*request*/, ::ActiveBreakpointResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestHasActiveBreakpoint(::grpc::ServerContext* context, ::ActiveBreakpointRequest* request, ::grpc::ServerAsyncResponseWriter< ::ActiveBreakpointResult>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_StartSession<WithAsyncMethod_EndSession<WithAsyncMethod_UpdateIR<WithAsyncMethod_MarkElement<WithAsyncMethod_SetCurrentElement<WithAsyncMethod_ExecuteCommand<WithAsyncMethod_HasActiveBreakpoint<Service > > > > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_StartSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_StartSession() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::StartSessionRequest, ::StartSessionResult>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::StartSessionRequest* request, ::StartSessionResult* response) { return this->StartSession(context, request, response); }));}
    void SetMessageAllocatorFor_StartSession(
        ::grpc::experimental::MessageAllocator< ::StartSessionRequest, ::StartSessionResult>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::StartSessionRequest, ::StartSessionResult>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_StartSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartSession(::grpc::ServerContext* /*context*/, const ::StartSessionRequest* /*request*/, ::StartSessionResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* StartSession(
      ::grpc::CallbackServerContext* /*context*/, const ::StartSessionRequest* /*request*/, ::StartSessionResult* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* StartSession(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::StartSessionRequest* /*request*/, ::StartSessionResult* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_EndSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_EndSession() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::EndSessionRequest, ::Result>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::EndSessionRequest* request, ::Result* response) { return this->EndSession(context, request, response); }));}
    void SetMessageAllocatorFor_EndSession(
        ::grpc::experimental::MessageAllocator< ::EndSessionRequest, ::Result>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(1);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::EndSessionRequest, ::Result>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_EndSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EndSession(::grpc::ServerContext* /*context*/, const ::EndSessionRequest* /*request*/, ::Result* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* EndSession(
      ::grpc::CallbackServerContext* /*context*/, const ::EndSessionRequest* /*request*/, ::Result* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* EndSession(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::EndSessionRequest* /*request*/, ::Result* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_UpdateIR : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_UpdateIR() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::UpdateIRRequest, ::Result>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::UpdateIRRequest* request, ::Result* response) { return this->UpdateIR(context, request, response); }));}
    void SetMessageAllocatorFor_UpdateIR(
        ::grpc::experimental::MessageAllocator< ::UpdateIRRequest, ::Result>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(2);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::UpdateIRRequest, ::Result>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_UpdateIR() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateIR(::grpc::ServerContext* /*context*/, const ::UpdateIRRequest* /*request*/, ::Result* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* UpdateIR(
      ::grpc::CallbackServerContext* /*context*/, const ::UpdateIRRequest* /*request*/, ::Result* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* UpdateIR(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::UpdateIRRequest* /*request*/, ::Result* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_MarkElement : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_MarkElement() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(3,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::MarkElementRequest, ::Result>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::MarkElementRequest* request, ::Result* response) { return this->MarkElement(context, request, response); }));}
    void SetMessageAllocatorFor_MarkElement(
        ::grpc::experimental::MessageAllocator< ::MarkElementRequest, ::Result>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(3);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::MarkElementRequest, ::Result>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_MarkElement() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MarkElement(::grpc::ServerContext* /*context*/, const ::MarkElementRequest* /*request*/, ::Result* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* MarkElement(
      ::grpc::CallbackServerContext* /*context*/, const ::MarkElementRequest* /*request*/, ::Result* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* MarkElement(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::MarkElementRequest* /*request*/, ::Result* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SetCurrentElement : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_SetCurrentElement() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(4,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::SetCurrentElementRequest, ::Result>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::SetCurrentElementRequest* request, ::Result* response) { return this->SetCurrentElement(context, request, response); }));}
    void SetMessageAllocatorFor_SetCurrentElement(
        ::grpc::experimental::MessageAllocator< ::SetCurrentElementRequest, ::Result>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(4);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::SetCurrentElementRequest, ::Result>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_SetCurrentElement() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetCurrentElement(::grpc::ServerContext* /*context*/, const ::SetCurrentElementRequest* /*request*/, ::Result* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SetCurrentElement(
      ::grpc::CallbackServerContext* /*context*/, const ::SetCurrentElementRequest* /*request*/, ::Result* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SetCurrentElement(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::SetCurrentElementRequest* /*request*/, ::Result* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ExecuteCommand : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_ExecuteCommand() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(5,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::ElementCommandRequest, ::Result>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::ElementCommandRequest* request, ::Result* response) { return this->ExecuteCommand(context, request, response); }));}
    void SetMessageAllocatorFor_ExecuteCommand(
        ::grpc::experimental::MessageAllocator< ::ElementCommandRequest, ::Result>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(5);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::ElementCommandRequest, ::Result>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_ExecuteCommand() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExecuteCommand(::grpc::ServerContext* /*context*/, const ::ElementCommandRequest* /*request*/, ::Result* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ExecuteCommand(
      ::grpc::CallbackServerContext* /*context*/, const ::ElementCommandRequest* /*request*/, ::Result* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ExecuteCommand(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::ElementCommandRequest* /*request*/, ::Result* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_HasActiveBreakpoint : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_HasActiveBreakpoint() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(6,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::ActiveBreakpointRequest, ::ActiveBreakpointResult>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::ActiveBreakpointRequest* request, ::ActiveBreakpointResult* response) { return this->HasActiveBreakpoint(context, request, response); }));}
    void SetMessageAllocatorFor_HasActiveBreakpoint(
        ::grpc::experimental::MessageAllocator< ::ActiveBreakpointRequest, ::ActiveBreakpointResult>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(6);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::ActiveBreakpointRequest, ::ActiveBreakpointResult>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_HasActiveBreakpoint() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HasActiveBreakpoint(::grpc::ServerContext* /*context*/, const ::ActiveBreakpointRequest* /*request*/, ::ActiveBreakpointResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* HasActiveBreakpoint(
      ::grpc::CallbackServerContext* /*context*/, const ::ActiveBreakpointRequest* /*request*/, ::ActiveBreakpointResult* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* HasActiveBreakpoint(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::ActiveBreakpointRequest* /*request*/, ::ActiveBreakpointResult* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_StartSession<ExperimentalWithCallbackMethod_EndSession<ExperimentalWithCallbackMethod_UpdateIR<ExperimentalWithCallbackMethod_MarkElement<ExperimentalWithCallbackMethod_SetCurrentElement<ExperimentalWithCallbackMethod_ExecuteCommand<ExperimentalWithCallbackMethod_HasActiveBreakpoint<Service > > > > > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_StartSession<ExperimentalWithCallbackMethod_EndSession<ExperimentalWithCallbackMethod_UpdateIR<ExperimentalWithCallbackMethod_MarkElement<ExperimentalWithCallbackMethod_SetCurrentElement<ExperimentalWithCallbackMethod_ExecuteCommand<ExperimentalWithCallbackMethod_HasActiveBreakpoint<Service > > > > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_StartSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_StartSession() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_StartSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartSession(::grpc::ServerContext* /*context*/, const ::StartSessionRequest* /*request*/, ::StartSessionResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_EndSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_EndSession() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_EndSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EndSession(::grpc::ServerContext* /*context*/, const ::EndSessionRequest* /*request*/, ::Result* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateIR : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UpdateIR() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_UpdateIR() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateIR(::grpc::ServerContext* /*context*/, const ::UpdateIRRequest* /*request*/, ::Result* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_MarkElement : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_MarkElement() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_MarkElement() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MarkElement(::grpc::ServerContext* /*context*/, const ::MarkElementRequest* /*request*/, ::Result* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetCurrentElement : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetCurrentElement() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_SetCurrentElement() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetCurrentElement(::grpc::ServerContext* /*context*/, const ::SetCurrentElementRequest* /*request*/, ::Result* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ExecuteCommand : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ExecuteCommand() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_ExecuteCommand() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExecuteCommand(::grpc::ServerContext* /*context*/, const ::ElementCommandRequest* /*request*/, ::Result* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_HasActiveBreakpoint : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_HasActiveBreakpoint() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_HasActiveBreakpoint() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HasActiveBreakpoint(::grpc::ServerContext* /*context*/, const ::ActiveBreakpointRequest* /*request*/, ::ActiveBreakpointResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_StartSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_StartSession() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_StartSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartSession(::grpc::ServerContext* /*context*/, const ::StartSessionRequest* /*request*/, ::StartSessionResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStartSession(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_EndSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_EndSession() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_EndSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EndSession(::grpc::ServerContext* /*context*/, const ::EndSessionRequest* /*request*/, ::Result* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestEndSession(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateIR : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UpdateIR() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_UpdateIR() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateIR(::grpc::ServerContext* /*context*/, const ::UpdateIRRequest* /*request*/, ::Result* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateIR(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_MarkElement : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_MarkElement() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_MarkElement() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MarkElement(::grpc::ServerContext* /*context*/, const ::MarkElementRequest* /*request*/, ::Result* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestMarkElement(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetCurrentElement : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetCurrentElement() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_SetCurrentElement() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetCurrentElement(::grpc::ServerContext* /*context*/, const ::SetCurrentElementRequest* /*request*/, ::Result* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetCurrentElement(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ExecuteCommand : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ExecuteCommand() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_ExecuteCommand() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExecuteCommand(::grpc::ServerContext* /*context*/, const ::ElementCommandRequest* /*request*/, ::Result* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestExecuteCommand(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_HasActiveBreakpoint : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_HasActiveBreakpoint() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_HasActiveBreakpoint() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HasActiveBreakpoint(::grpc::ServerContext* /*context*/, const ::ActiveBreakpointRequest* /*request*/, ::ActiveBreakpointResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestHasActiveBreakpoint(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_StartSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_StartSession() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->StartSession(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_StartSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartSession(::grpc::ServerContext* /*context*/, const ::StartSessionRequest* /*request*/, ::StartSessionResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* StartSession(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* StartSession(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_EndSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_EndSession() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->EndSession(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_EndSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EndSession(::grpc::ServerContext* /*context*/, const ::EndSessionRequest* /*request*/, ::Result* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* EndSession(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* EndSession(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_UpdateIR : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_UpdateIR() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UpdateIR(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_UpdateIR() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateIR(::grpc::ServerContext* /*context*/, const ::UpdateIRRequest* /*request*/, ::Result* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* UpdateIR(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* UpdateIR(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_MarkElement : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_MarkElement() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(3,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->MarkElement(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_MarkElement() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MarkElement(::grpc::ServerContext* /*context*/, const ::MarkElementRequest* /*request*/, ::Result* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* MarkElement(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* MarkElement(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SetCurrentElement : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_SetCurrentElement() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(4,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SetCurrentElement(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_SetCurrentElement() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetCurrentElement(::grpc::ServerContext* /*context*/, const ::SetCurrentElementRequest* /*request*/, ::Result* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SetCurrentElement(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SetCurrentElement(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ExecuteCommand : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_ExecuteCommand() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(5,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ExecuteCommand(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_ExecuteCommand() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExecuteCommand(::grpc::ServerContext* /*context*/, const ::ElementCommandRequest* /*request*/, ::Result* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ExecuteCommand(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ExecuteCommand(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_HasActiveBreakpoint : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_HasActiveBreakpoint() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(6,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->HasActiveBreakpoint(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_HasActiveBreakpoint() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HasActiveBreakpoint(::grpc::ServerContext* /*context*/, const ::ActiveBreakpointRequest* /*request*/, ::ActiveBreakpointResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* HasActiveBreakpoint(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* HasActiveBreakpoint(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_StartSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_StartSession() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::StartSessionRequest, ::StartSessionResult>(std::bind(&WithStreamedUnaryMethod_StartSession<BaseClass>::StreamedStartSession, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_StartSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status StartSession(::grpc::ServerContext* /*context*/, const ::StartSessionRequest* /*request*/, ::StartSessionResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedStartSession(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::StartSessionRequest,::StartSessionResult>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_EndSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_EndSession() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::EndSessionRequest, ::Result>(std::bind(&WithStreamedUnaryMethod_EndSession<BaseClass>::StreamedEndSession, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_EndSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status EndSession(::grpc::ServerContext* /*context*/, const ::EndSessionRequest* /*request*/, ::Result* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedEndSession(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::EndSessionRequest,::Result>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateIR : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UpdateIR() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::UpdateIRRequest, ::Result>(std::bind(&WithStreamedUnaryMethod_UpdateIR<BaseClass>::StreamedUpdateIR, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_UpdateIR() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateIR(::grpc::ServerContext* /*context*/, const ::UpdateIRRequest* /*request*/, ::Result* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateIR(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::UpdateIRRequest,::Result>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_MarkElement : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_MarkElement() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::MarkElementRequest, ::Result>(std::bind(&WithStreamedUnaryMethod_MarkElement<BaseClass>::StreamedMarkElement, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_MarkElement() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status MarkElement(::grpc::ServerContext* /*context*/, const ::MarkElementRequest* /*request*/, ::Result* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedMarkElement(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::MarkElementRequest,::Result>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetCurrentElement : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetCurrentElement() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler< ::SetCurrentElementRequest, ::Result>(std::bind(&WithStreamedUnaryMethod_SetCurrentElement<BaseClass>::StreamedSetCurrentElement, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_SetCurrentElement() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetCurrentElement(::grpc::ServerContext* /*context*/, const ::SetCurrentElementRequest* /*request*/, ::Result* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetCurrentElement(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::SetCurrentElementRequest,::Result>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ExecuteCommand : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ExecuteCommand() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler< ::ElementCommandRequest, ::Result>(std::bind(&WithStreamedUnaryMethod_ExecuteCommand<BaseClass>::StreamedExecuteCommand, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_ExecuteCommand() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ExecuteCommand(::grpc::ServerContext* /*context*/, const ::ElementCommandRequest* /*request*/, ::Result* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedExecuteCommand(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ElementCommandRequest,::Result>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_HasActiveBreakpoint : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_HasActiveBreakpoint() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler< ::ActiveBreakpointRequest, ::ActiveBreakpointResult>(std::bind(&WithStreamedUnaryMethod_HasActiveBreakpoint<BaseClass>::StreamedHasActiveBreakpoint, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_HasActiveBreakpoint() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status HasActiveBreakpoint(::grpc::ServerContext* /*context*/, const ::ActiveBreakpointRequest* /*request*/, ::ActiveBreakpointResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedHasActiveBreakpoint(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ActiveBreakpointRequest,::ActiveBreakpointResult>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_StartSession<WithStreamedUnaryMethod_EndSession<WithStreamedUnaryMethod_UpdateIR<WithStreamedUnaryMethod_MarkElement<WithStreamedUnaryMethod_SetCurrentElement<WithStreamedUnaryMethod_ExecuteCommand<WithStreamedUnaryMethod_HasActiveBreakpoint<Service > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_StartSession<WithStreamedUnaryMethod_EndSession<WithStreamedUnaryMethod_UpdateIR<WithStreamedUnaryMethod_MarkElement<WithStreamedUnaryMethod_SetCurrentElement<WithStreamedUnaryMethod_ExecuteCommand<WithStreamedUnaryMethod_HasActiveBreakpoint<Service > > > > > > > StreamedService;
};


#endif  // GRPC_DebugService_2eproto__INCLUDED

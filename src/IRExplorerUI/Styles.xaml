<ResourceDictionary
  xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
  xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
  xmlns:local="clr-namespace:IRExplorerUI">

  <Style x:Key="DisabledImageStyle" TargetType="Image">
    <Style.Triggers>
      <Trigger Property="IsEnabled" Value="False">
        <Setter Property="Opacity" Value="0.5" />
      </Trigger>
    </Style.Triggers>
  </Style>

  <Style x:Key="ListViewHeaderStyle" TargetType="{x:Type GridViewColumnHeader}">
    <Setter Property="HorizontalContentAlignment" Value="Left" />
  </Style>

  <Style x:Key="HoverUnderlineStyle" TargetType="TextBlock">
    <Style.Triggers>
      <Trigger Property="IsMouseOver" Value="True">
        <Setter Property="TextBlock.TextDecorations" Value="Underline" />
        <Setter Property="TextBlock.Foreground" Value="DarkBlue" />
      </Trigger>
    </Style.Triggers>
  </Style>

  <SolidColorBrush x:Key="SelectedBackgroundBrush" Color="#FFB1D6F1" />
  <SolidColorBrush x:Key="DisabledForegroundBrush" Color="#888" />

  <Style x:Key="FlatListViewItem" TargetType="ListViewItem">
    <Setter Property="OverridesDefaultStyle" Value="true" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="ListBoxItem">
          <Border
            Name="Border"
            Padding="1"
            Background="{TemplateBinding Background}"
            BorderBrush="{TemplateBinding BorderBrush}"
            BorderThickness="{TemplateBinding BorderThickness}"
            ToolTip="{TemplateBinding ToolTip}">
            <GridViewRowPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="IsSelected" Value="true">
              <Setter TargetName="Border" Property="Background" Value="{StaticResource SelectedBackgroundBrush}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
              <Setter Property="Foreground" Value="{StaticResource DisabledForegroundBrush}" />
            </Trigger>

            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="IsMouseOver" Value="true" />
                <Condition Property="IsSelected" Value="false" />
              </MultiTrigger.Conditions>
              <Setter TargetName="Border" Property="Background" Value="#D0E3F1" />
            </MultiTrigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style x:Key="SimpleListViewItem" TargetType="ListViewItem">
    <Setter Property="OverridesDefaultStyle" Value="true" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="ListBoxItem">
          <Border
            Name="Border"
            Padding="0"
            Background="{TemplateBinding Background}"
            BorderBrush="{TemplateBinding BorderBrush}"
            BorderThickness="{TemplateBinding BorderThickness}">
            <GridViewRowPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
          </Border>

          <ControlTemplate.Triggers>
            <Trigger Property="IsSelected" Value="true">
              <Setter TargetName="Border" Property="Background" Value="LightGray" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <ContextMenu x:Key="PopupContextMenu">
    <MenuItem
      Header="Always on Top"
      IsCheckable="True"
      IsChecked="{Binding Path=IsAlwaysOnTop}">
      <MenuItem.Icon>
        <Image
          Width="16"
          Height="16"
          Source="{StaticResource PinIcon}" />
      </MenuItem.Icon>
    </MenuItem>
    <Separator />

    <MenuItem>
      <MenuItem.Header>
        <local:ColorSelector ColorSelectedCommand="{Binding PopupColorSelectedCommand}" />
      </MenuItem.Header>
    </MenuItem>
  </ContextMenu>

  <ContextMenu x:Key="GraphContextMenu">
    <MenuItem
      Focusable="False"
      Header="Mark Block"
      IsHitTestVisible="False" />
    <MenuItem>
      <MenuItem.Header>
        <local:ColorSelector ColorSelectedCommand="local:GraphCommand.MarkBlock" />
      </MenuItem.Header>
    </MenuItem>
    <Separator />
    <MenuItem Header="Mark Predecessors">
      <MenuItem>
        <MenuItem.Header>
          <local:ColorSelector ColorSelectedCommand="local:GraphCommand.MarkPredecessors" />
        </MenuItem.Header>
      </MenuItem>
    </MenuItem>
    <MenuItem Header="Mark Successors">
      <MenuItem>
        <MenuItem.Header>
          <local:ColorSelector ColorSelectedCommand="local:GraphCommand.MarkSuccessors" />
        </MenuItem.Header>
      </MenuItem>
    </MenuItem>
    <MenuItem Header="Mark Node Group" ToolTip="Mark block and all its predecessors and succesors">
      <MenuItem>
        <MenuItem.Header>
          <local:ColorSelector ColorSelectedCommand="local:GraphCommand.MarkGroup" />
        </MenuItem.Header>
      </MenuItem>
    </MenuItem>
    <Separator />

    <MenuItem Header="Mark Dominators" ToolTip="Mark all the blocks that dominate it">
      <MenuItem>
        <MenuItem.Header>
          <local:ColorSelector ColorSelectedCommand="local:GraphCommand.MarkDominators" />
        </MenuItem.Header>
      </MenuItem>
    </MenuItem>
    <MenuItem Header="Mark Post-Dominators" ToolTip="Mark all the blocks that post-dominate it">
      <MenuItem>
        <MenuItem.Header>
          <local:ColorSelector ColorSelectedCommand="local:GraphCommand.MarkPostDominators" />
        </MenuItem.Header>
      </MenuItem>
    </MenuItem>
    <MenuItem Header="Mark Dominance Frontier" ToolTip="Mark all the blocks in its dominance frontier">
      <MenuItem>
        <MenuItem.Header>
          <local:ColorSelector ColorSelectedCommand="local:GraphCommand.MarkDominanceFrontier" />
        </MenuItem.Header>
      </MenuItem>
    </MenuItem>
    <MenuItem Header="Mark Post-Dominance Frontier" ToolTip="Mark all the blocks in its post-dominance frontier">
      <MenuItem>
        <MenuItem.Header>
          <local:ColorSelector ColorSelectedCommand="local:GraphCommand.MarkPostDominanceFrontier" />
        </MenuItem.Header>
      </MenuItem>
    </MenuItem>
    <Separator />

    <MenuItem Header="Mark Loop">
      <MenuItem>
        <MenuItem.Header>
          <local:ColorSelector ColorSelectedCommand="local:GraphCommand.MarkLoop" CommandTarget="{Binding ElementName=GraphHost}" />
        </MenuItem.Header>
      </MenuItem>
    </MenuItem>

    <MenuItem Header="Mark Loop Nest">
      <MenuItem>
        <MenuItem.Header>
          <local:ColorSelector ColorSelectedCommand="local:GraphCommand.MarkLoopNest" />
        </MenuItem.Header>
      </MenuItem>
    </MenuItem>
    <Separator />

    <MenuItem Header="Query">
      <MenuItem
        Command="local:GraphCommand.SelectQueryBlock1"
        CommandTarget="{Binding ElementName=GraphHost}"
        Header="Select Block A"
        InputGestureText="Click + Ctrl/Alt + A/1" />

      <MenuItem
        Command="local:GraphCommand.SelectQueryBlock2"
        CommandTarget="{Binding ElementName=GraphHost}"
        Header="Select Block B"
        InputGestureText="Click + Ctrl/Alt + B/2" />

    </MenuItem>

    <MenuItem Header="Clear">
      <MenuItem.Icon>
        <Image
          Width="16"
          Height="16"
          Source="{StaticResource RemoveIcon}" />
      </MenuItem.Icon>
      <MenuItem
        Command="local:GraphCommand.ClearMarked"
        CommandTarget="{Binding ElementName=GraphHost}"
        Header="Selected Marker" />
      <MenuItem
        Command="local:GraphCommand.ClearAllMarked"
        CommandTarget="{Binding ElementName=GraphHost}"
        Header="All Markers" />
    </MenuItem>
  </ContextMenu>

  <Style x:Key="RemarkTreeViewItemStyle" TargetType="{x:Type TreeViewItem}">
    <Style.Resources>
      <SolidColorBrush x:Key="{x:Static SystemColors.HighlightBrushKey}" Color="#FFB1D6F1" />
      <SolidColorBrush x:Key="{x:Static SystemColors.InactiveSelectionHighlightBrushKey}" Color="#FFB1D6F1" />
      <SolidColorBrush x:Key="{x:Static SystemColors.HighlightTextBrushKey}" Color="Black" />
      <SolidColorBrush x:Key="GlyphBrush" Color="#444" />

      <Style x:Key="TreeViewItemFocusVisual">
        <Setter Property="Control.Template">
          <Setter.Value>
            <ControlTemplate>
              <Rectangle
                Margin="0,0,0,0"
                Opacity="0"
                Stroke="Black"
                StrokeDashArray="1 2"
                StrokeThickness="5" />
            </ControlTemplate>
          </Setter.Value>
        </Setter>
      </Style>

      <Style x:Key="ExpandCollapseToggleStyle" TargetType="ToggleButton">
        <Setter Property="Template">
          <Setter.Value>
            <ControlTemplate TargetType="ToggleButton">
              <Grid
                Width="15"
                Height="13"
                Background="Transparent">
                <Path
                  x:Name="ExpandPath"
                  Margin="1,1,1,1"
                  HorizontalAlignment="Left"
                  VerticalAlignment="Center"
                  Data="M 4 0 L 8 4 L 4 8 Z"
                  Fill="{StaticResource GlyphBrush}" />
              </Grid>
              <ControlTemplate.Triggers>
                <Trigger Property="IsChecked" Value="True">
                  <Setter TargetName="ExpandPath" Property="Data" Value="M 0 4 L 8 4 L 4 8 Z" />
                </Trigger>
              </ControlTemplate.Triggers>
            </ControlTemplate>
          </Setter.Value>
        </Setter>
      </Style>
    </Style.Resources>

    <Setter Property="Background" Value="Transparent" />
    <Setter Property="HorizontalContentAlignment" Value="{Binding Path=HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
    <Setter Property="VerticalContentAlignment" Value="{Binding Path=VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
    <Setter Property="Padding" Value="1,0,0,0" />
    <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
    <Setter Property="FocusVisualStyle" Value="{StaticResource TreeViewItemFocusVisual}" />

    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type TreeViewItem}">
          <Grid SnapsToDevicePixels="true">
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="Auto" MinWidth="19" />
              <ColumnDefinition Width="Auto" />
              <ColumnDefinition Width="*" />
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
              <RowDefinition Height="Auto" />
              <RowDefinition />
            </Grid.RowDefinitions>
            <Rectangle
              x:Name="VerLn"
              Grid.RowSpan="2"
              Width="1"
              Margin="0,0,0,0"
              Stroke="#66888888"
              StrokeThickness="1" />

            <ToggleButton
              x:Name="Expander"
              Margin="5,-5,0,0"
              Panel.ZIndex="2"
              ClickMode="Press"
              IsChecked="{Binding Path=IsExpanded, RelativeSource={RelativeSource TemplatedParent}}"
              Style="{StaticResource ExpandCollapseToggleStyle}" />
            <Border
              x:Name="Bd"
              Grid.Column="1"
              Grid.ColumnSpan="2"
              Margin="-10,0,0,0"
              Padding="{TemplateBinding Padding}"
              Background="{TemplateBinding Background}"
              BorderBrush="{TemplateBinding BorderBrush}"
              BorderThickness="{TemplateBinding BorderThickness}">
              <Grid>
                <Grid.RowDefinitions>
                  <RowDefinition Height="*" />
                  <RowDefinition Height="4" />
                </Grid.RowDefinitions>
                <ContentPresenter
                  x:Name="PART_Header"
                  Grid.Row="0"
                  Margin="8,2,0,0"
                  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                  ContentSource="Header"
                  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />

                <Rectangle
                  Grid.Row="1"
                  Height="1"
                  VerticalAlignment="Bottom"
                  Stroke="#66888888"
                  StrokeThickness="1" />
              </Grid>
            </Border>
            <ItemsPresenter
              x:Name="ItemsHost"
              Grid.Row="1"
              Grid.Column="1"
              Grid.ColumnSpan="2" />


          </Grid>
          <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Converter={StaticResource LineConverter}}" Value="true">
              <Setter TargetName="VerLn" Property="VerticalAlignment" Value="Stretch" />
            </DataTrigger>
            <Trigger Property="IsExpanded" Value="false">
              <Setter TargetName="ItemsHost" Property="Visibility" Value="Collapsed" />
            </Trigger>
            <Trigger Property="HasItems" Value="false">
              <Setter TargetName="Expander" Property="Visibility" Value="Hidden" />
            </Trigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="HasHeader" Value="false" />
                <Condition Property="Width" Value="Auto" />
              </MultiTrigger.Conditions>
              <Setter TargetName="PART_Header" Property="MinWidth" Value="75" />
            </MultiTrigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="HasHeader" Value="false" />
                <Condition Property="Height" Value="Auto" />
              </MultiTrigger.Conditions>
              <Setter TargetName="PART_Header" Property="MinHeight" Value="19" />
            </MultiTrigger>
            <Trigger Property="IsSelected" Value="true">
              <Setter TargetName="Bd" Property="Background" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
              <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
            </Trigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="IsSelected" Value="true" />
                <Condition Property="IsSelectionActive" Value="false" />
              </MultiTrigger.Conditions>
              <Setter TargetName="Bd" Property="Background" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
              <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
            </MultiTrigger>
            <Trigger Property="IsEnabled" Value="false">
              <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style x:Key="TabControlStyle" TargetType="TabItem">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="TabItem">
          <StackPanel Name="Panel">
            <ContentPresenter
              x:Name="ContentSite"
              Margin="4,2"
              HorizontalAlignment="Center"
              VerticalAlignment="Center"
              ContentSource="Header"
              TextBlock.FontSize="12.5"
              TextBlock.FontWeight="SemiBold" />
            <Rectangle
              Name="SelectedLine"
              Height="2"
              Margin="4,0,4,0"
              HorizontalAlignment="Stretch"
              Fill="DimGray"
              Stroke="DimGray" />
          </StackPanel>
          <ControlTemplate.Triggers>
            <Trigger Property="IsSelected" Value="True">
              <Setter TargetName="SelectedLine" Property="Visibility" Value="Visible" />
            </Trigger>
            <Trigger Property="IsSelected" Value="False">
              <Setter TargetName="SelectedLine" Property="Visibility" Value="Hidden" />
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
              <Setter TargetName="SelectedLine" Property="Visibility" Value="Visible" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
              <Setter TargetName="ContentSite" Property="TextBlock.Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <!--  MenuItem style that doesn't show a black box for a checked item like default one.  -->
  <SolidColorBrush x:Key="Menu.Static.Background" Color="#FFF0F0F0" />
  <SolidColorBrush x:Key="Menu.Static.Border" Color="#FF999999" />
  <SolidColorBrush x:Key="Menu.Static.Foreground" Color="#FF212121" />
  <SolidColorBrush x:Key="Menu.Static.Separator" Color="#FFD7D7D7" />
  <SolidColorBrush x:Key="Menu.Disabled.Foreground" Color="#FF707070" />
  <SolidColorBrush x:Key="MenuItem.Selected.Background" Color="#3D26A0DA" />
  <SolidColorBrush x:Key="MenuItem.Selected.Border" Color="#FF26A0DA" />
  <SolidColorBrush x:Key="MenuItem.Highlight.Background" Color="#3D26A0DA" />
  <SolidColorBrush x:Key="MenuItem.Highlight.Border" Color="#FF26A0DA" />
  <SolidColorBrush x:Key="MenuItem.Highlight.Disabled.Background" Color="#0A000000" />
  <SolidColorBrush x:Key="MenuItem.Highlight.Disabled.Border" Color="#21000000" />
  <Geometry x:Key="Checkmark">F1 M 10.0,1.2 L 4.7,9.1 L 4.5,9.1 L 0,5.2 L 1.3,3.5 L 4.3,6.1L 8.3,0 L 10.0,1.2 Z</Geometry>
  <Style x:Key="SubMenuItemHeaderStyle" TargetType="MenuItem">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type MenuItem}">
          <Border
            x:Name="templateRoot"
            Height="22"
            Background="{TemplateBinding Background}"
            BorderBrush="{TemplateBinding BorderBrush}"
            BorderThickness="{TemplateBinding BorderThickness}"
            SnapsToDevicePixels="true">
            <Grid Margin="-1">
              <Grid.ColumnDefinitions>
                <ColumnDefinition
                  Width="Auto"
                  MinWidth="22"
                  SharedSizeGroup="MenuItemIconColumnGroup" />
                <ColumnDefinition Width="13" />
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="30" />
                <ColumnDefinition Width="Auto" SharedSizeGroup="MenuItemIGTColumnGroup" />
                <ColumnDefinition Width="20" />
              </Grid.ColumnDefinitions>
              <ContentPresenter
                x:Name="Icon"
                Width="16"
                Height="16"
                Margin="3"
                HorizontalAlignment="Center"
                VerticalAlignment="Center"
                ContentSource="Icon"
                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
              <Border
                x:Name="GlyphPanel"
                Width="22"
                Height="22"
                Margin="-1,0,0,0"
                HorizontalAlignment="Center"
                VerticalAlignment="Center"
                Background="{StaticResource MenuItem.Selected.Background}"
                BorderBrush="{StaticResource MenuItem.Selected.Border}"
                BorderThickness="1"
                ClipToBounds="False"
                Visibility="Hidden">
                <Path
                  x:Name="Glyph"
                  Width="10"
                  Height="11"
                  Data="{StaticResource Checkmark}"
                  Fill="{StaticResource Menu.Static.Foreground}"
                  FlowDirection="LeftToRight" />
              </Border>
              <ContentPresenter
                x:Name="menuHeaderContainer"
                Grid.Column="2"
                Margin="{TemplateBinding Padding}"
                HorizontalAlignment="Left"
                VerticalAlignment="Center"
                ContentSource="Header"
                RecognizesAccessKey="True"
                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
              <TextBlock
                x:Name="menuGestureText"
                Grid.Column="4"
                Margin="{TemplateBinding Padding}"
                VerticalAlignment="Center"
                Opacity="0.7"
                Text="{TemplateBinding InputGestureText}" />
            </Grid>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="Icon" Value="{x:Null}">
              <Setter TargetName="Icon" Property="Visibility" Value="Collapsed" />
            </Trigger>
            <Trigger Property="IsChecked" Value="True">
              <Setter TargetName="GlyphPanel" Property="Visibility" Value="Visible" />
              <Setter TargetName="Icon" Property="Visibility" Value="Collapsed" />
            </Trigger>
            <Trigger Property="IsHighlighted" Value="True">
              <Setter TargetName="templateRoot" Property="Background" Value="{StaticResource MenuItem.Highlight.Background}" />
              <Setter TargetName="templateRoot" Property="BorderBrush" Value="{StaticResource MenuItem.Highlight.Border}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
              <Setter TargetName="templateRoot" Property="TextElement.Foreground" Value="{StaticResource Menu.Disabled.Foreground}" />
              <Setter TargetName="Glyph" Property="Fill" Value="{StaticResource Menu.Disabled.Foreground}" />
            </Trigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="IsHighlighted" Value="True" />
                <Condition Property="IsEnabled" Value="False" />
              </MultiTrigger.Conditions>
              <Setter TargetName="templateRoot" Property="Background" Value="{StaticResource MenuItem.Highlight.Disabled.Background}" />
              <Setter TargetName="templateRoot" Property="BorderBrush" Value="{StaticResource MenuItem.Highlight.Disabled.Border}" />
            </MultiTrigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style TargetType="ListBoxItem">
    <Setter Property="HorizontalContentAlignment" Value="Left" />
    <Setter Property="VerticalContentAlignment" Value="Center" />
  </Style>

  <Style TargetType="MenuItem">
    <Setter Property="HorizontalContentAlignment" Value="Left" />
    <Setter Property="VerticalContentAlignment" Value="Center" />
  </Style>
</ResourceDictionary>
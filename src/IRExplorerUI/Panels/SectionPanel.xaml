<local:ToolPanelControl
    d:DesignHeight="450"
    d:DesignWidth="1200"
    mc:Ignorable="d"
    x:Class="IRExplorerUI.SectionPanel"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:local="clr-namespace:IRExplorerUI"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:tree="clr-namespace:Aga.Controls.Tree;assembly=TreeListView"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    <local:ToolPanelControl.CommandBindings>
        <CommandBinding Command="local:Command.ClearTextbox" Executed="ExecuteClearTextbox" />
        <CommandBinding Command="local:Command.OpenInNewTab" Executed="OpenInNewTabExecuted" />
        <CommandBinding Command="local:Command.OpenLeft" Executed="OpenLeftExecuted" />
        <CommandBinding Command="local:Command.OpenRight" Executed="OpenRightExecuted" />
        <CommandBinding
            CanExecute="OpenSideBySideCanExecute"
            Command="local:Command.OpenSideBySide"
            Executed="OpenSideBySideExecuted" />
        <CommandBinding
            CanExecute="OpenSideBySideCanExecute"
            Command="local:Command.DiffSideBySide"
            Executed="DiffSideBySideExecuted" />
        <CommandBinding
            CanExecute="DiffWithOtherDocumentCanExecute"
            Command="local:Command.DiffWithOtherDocument"
            Executed="DiffWithOtherDocumentExecuted" />
        <CommandBinding
            CanExecute="DiffWithOtherDocumentCanExecute"
            Command="local:Command.SyncDiffedDocuments"
            Executed="SyncDiffedDocumentsExecuted" />
        <CommandBinding Command="local:Command.Open" Executed="OpenExecuted" />
        <CommandBinding Command="local:Command.ToggleTag" Executed="ToggleTagExecuted" />
        <CommandBinding Command="local:Command.PreviousSection" Executed="PreviousSectionExecuted" />
        <CommandBinding Command="local:Command.NextSection" Executed="NextSectionExecuted" />
        <CommandBinding Command="local:Command.FocusSearch" Executed="FocusSearchExecuted" />
        <CommandBinding Command="local:Command.CopySectionText" Executed="CopySectionTextExecuted" />
        <CommandBinding Command="local:Command.SaveSectionText" Executed="SaveSectionTextExecuted" />
        <CommandBinding Command="local:Command.SaveFunctionText" Executed="SaveFunctionTextExecuted" />
        <CommandBinding Command="local:Command.CopyFunctionText" Executed="CopyFunctionTextExecuted" />
        <CommandBinding Command="local:Command.OpenDocumentInEditor" Executed="OpenDocumentInEditorExecuted" />
        <CommandBinding Command="local:Command.OpenDocumentInNewInstance" Executed="OpenDocumentInNewInstanceExecuted" />
        <CommandBinding Command="local:Command.DisplayCallGraph" Executed="DisplayCallGraphExecuted" />
        <CommandBinding Command="local:Command.DisplayPartialCallGraph" Executed="DisplayPartialCallGraphExecuted" />
        <CommandBinding Command="local:Command.CopyFunctionName" Executed="CopyFunctionNameExecuted" />
        <CommandBinding Command="local:Command.CopyDemangledFunctionName" Executed="CopyDemangledFunctionNameExecuted" />
        <CommandBinding Command="local:Command.ExportFunctionList" Executed="ExportFunctionListExecuted" />
    </local:ToolPanelControl.CommandBindings>

    <local:ToolPanelControl.Resources>
        <Style TargetType="Image" x:Key="IconTagged">
            <Style.Triggers>
                <DataTrigger Binding="{Binding Path=IsTagged}" Value="False">
                    <Setter Property="Visibility" Value="Collapsed" />
                </DataTrigger>
            </Style.Triggers>
        </Style>

        <Style TargetType="Image" x:Key="IconDifferentFromPrevious">
            <Style.Triggers>
                <DataTrigger Binding="{Binding Path=IsDiffFromPrevious}" Value="False">
                    <Setter Property="Visibility" Value="Collapsed" />
                </DataTrigger>
            </Style.Triggers>
        </Style>

        <Style TargetType="Image" x:Key="IconSelected">
            <Style.Triggers>
                <DataTrigger Binding="{Binding Path=IsSelected}" Value="False">
                    <Setter Property="Visibility" Value="Hidden" />
                </DataTrigger>
            </Style.Triggers>
        </Style>

        <Style TargetType="{x:Type ColumnDefinition}" x:Key="ColumnsGridSplitterStyle">
            <Style.Setters>
                <Setter Property="Width" Value="2" />
            </Style.Setters>
            <Style.Triggers>
                <DataTrigger Binding="{Binding IsSectionListVisible}" Value="False">
                    <DataTrigger.Setters>
                        <Setter Property="Width" Value="0" />
                        <Setter Property="MaxWidth" Value="0" />
                    </DataTrigger.Setters>
                </DataTrigger>
            </Style.Triggers>
        </Style>

        <Style TargetType="{x:Type ColumnDefinition}" x:Key="ModulesColumnsGridSplitterStyle">
            <Style.Setters>
                <Setter Property="Width" Value="2" />
            </Style.Setters>
            <Style.Triggers>
                <DataTrigger Binding="{Binding ModuleControlsVisible}" Value="False">
                    <DataTrigger.Setters>
                        <Setter Property="Width" Value="0" />
                        <Setter Property="MaxWidth" Value="0" />
                    </DataTrigger.Setters>
                </DataTrigger>
            </Style.Triggers>
        </Style>

        <Style TargetType="{x:Type ColumnDefinition}" x:Key="ModulesColumnsStyle">
            <Style.Setters>
                <Setter Property="Width" Value="210" />
            </Style.Setters>
            <Style.Triggers>
                <DataTrigger Binding="{Binding ShowModules}" Value="False">
                    <DataTrigger.Setters>
                        <Setter Property="Width" Value="0" />
                        <Setter Property="MaxWidth" Value="0" />
                    </DataTrigger.Setters>
                </DataTrigger>
            </Style.Triggers>
        </Style>

        <Style TargetType="{x:Type ColumnDefinition}" x:Key="FunctionsColumnsStyle">
            <Style.Setters>
                <Setter Property="Width" Value="*" />
            </Style.Setters>
            <Style.Triggers>
                <DataTrigger Binding="{Binding IsFunctionListVisible}" Value="False">
                    <DataTrigger.Setters>
                        <Setter Property="Width" Value="0" />
                        <Setter Property="MaxWidth" Value="0" />
                    </DataTrigger.Setters>
                </DataTrigger>
            </Style.Triggers>
        </Style>

        <Style TargetType="{x:Type ColumnDefinition}" x:Key="SectionsColumnsStyle">
            <Style.Setters>
                <Setter Property="Width" Value="2*" />
            </Style.Setters>
            <Style.Triggers>
                <DataTrigger Binding="{Binding IsSectionListVisible}" Value="False">
                    <DataTrigger.Setters>
                        <Setter Property="Width" Value="0" />
                        <Setter Property="MaxWidth" Value="0" />
                    </DataTrigger.Setters>
                </DataTrigger>
                <DataTrigger Binding="{Binding ProfileControlsVisible}" Value="True">
                    <DataTrigger.Setters>
                        <Setter Property="Width" Value="*" />
                    </DataTrigger.Setters>
                </DataTrigger>
            </Style.Triggers>
        </Style>
    </local:ToolPanelControl.Resources>

    <Grid
        HorizontalAlignment="Stretch"
        VerticalAlignment="Stretch"
        x:Name="MainGrid">
        <Grid.ColumnDefinitions>
            <ColumnDefinition Style="{StaticResource FunctionsColumnsStyle}" />
            <ColumnDefinition Style="{StaticResource ColumnsGridSplitterStyle}" />
            <ColumnDefinition Style="{StaticResource SectionsColumnsStyle}" />
        </Grid.ColumnDefinitions>

        <Grid
            Background="{DynamicResource {x:Static SystemColors.ControlLightBrushKey}}"
            Grid.Column="0"
            x:Name="FunctionPart">
            <Grid.RowDefinitions>
                <RowDefinition Height="28" />
                <RowDefinition Height="*" />
            </Grid.RowDefinitions>

            <Grid Grid.Row="0">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="25" />
                </Grid.ColumnDefinitions>
                <ToolBarTray
                    Background="{DynamicResource {x:Static SystemColors.ControlLightBrushKey}}"
                    Grid.Column="0"
                    Height="28"
                    HorizontalAlignment="Stretch"
                    IsLocked="True"
                    Margin="0,0,24,0"
                    Name="FunctionToolbarTray"
                    VerticalAlignment="Top"
                    Visibility="{Binding IsFunctionListVisible, Converter={StaticResource BoolToVisibilityConverter}}">
                    <ToolBar
                        Background="{DynamicResource {x:Static SystemColors.ControlLightBrushKey}}"
                        HorizontalAlignment="Stretch"
                        Loaded="ToolBar_Loaded"
                        Name="FunctionToolbar"
                        SizeChanged="ToolBar_SizeChanged"
                        VerticalAlignment="Top"
                        Width="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ToolBarTray}}, Path=ActualWidth}">
                        <ToggleButton
                            BorderBrush="{DynamicResource {x:Static SystemColors.ActiveBorderBrushKey}}"
                            Content="Modules"
                            HorizontalContentAlignment="Stretch"
                            IsChecked="{Binding ShowModules, Mode=TwoWay}"
                            Padding="4,2,4,2"
                            Visibility="{Binding ModuleControlsVisible, Converter={StaticResource BoolToVisibilityConverter}}" />

                        <ToggleButton
                            BorderBrush="{DynamicResource {x:Static SystemColors.ActiveBorderBrushKey}}"
                            Content="Sections"
                            HorizontalContentAlignment="Stretch"
                            IsChecked="{Binding ShowSections, Mode=TwoWay}"
                            Margin="-1,0,0,0"
                            Padding="2,2,4,2"
                            Visibility="{Binding ProfileControlsVisible, Converter={StaticResource BoolToVisibilityConverter}}" />

                        <Grid Visibility="{Binding ProfileControlsVisible, Converter={StaticResource BoolToVisibilityConverter}}" Width="8" />
                        <Image Source="{StaticResource SearchIcon}" ToolBar.OverflowMode="Never" />

                        <Grid
                            Height="24"
                            MaxWidth="300"
                            ToolBar.OverflowMode="Never"
                            x:Name="FunctionFilterGrid">
                            <TextBox
                                Background="{DynamicResource {x:Static SystemColors.ControlLightLightBrushKey}}"
                                BorderBrush="{DynamicResource {x:Static SystemColors.ActiveBorderBrushKey}}"
                                Height="24"
                                HorizontalAlignment="Stretch"
                                Margin="4,0,0,0"
                                MaxWidth="300"
                                Name="FunctionFilter"
                                TextChanged="FunctionFilter_TextChanged"
                                ToolTip="Filter function list based on a case-insensitive substring"
                                VerticalAlignment="Center"
                                VerticalContentAlignment="Center">
                                <TextBox.InputBindings>
                                    <KeyBinding
                                        Command="local:Command.ClearTextbox"
                                        CommandParameter="{Binding ElementName=FunctionFilter}"
                                        Key="Escape" />
                                </TextBox.InputBindings>

                            </TextBox>
                            <TextBlock
                                Foreground="DimGray"
                                IsHitTestVisible="False"
                                Margin="8,4"
                                Text="Search functions"
                                Visibility="{Binding ElementName=FunctionFilter, Path=Text.IsEmpty, Converter={StaticResource BoolToVisibilityConverter}}" />
                        </Grid>

                        <Button
                            Command="local:Command.ClearTextbox"
                            CommandParameter="{Binding ElementName=FunctionFilter}"
                            ToolBar.OverflowMode="Never"
                            ToolTip="Reset function filter">
                            <Image
                                Height="16"
                                Source="{StaticResource ClearIcon}"
                                Width="16" />
                        </Button>
                    </ToolBar>
                </ToolBarTray>
                <local:PanelToolbarTray
                    Grid.Column="1"
                    HasDuplicateButton="False"
                    HasPinButton="False"
                    SettingsClicked="FixedToolbar_SettingsClicked"
                    Visibility="{Binding IsSectionListVisible, Converter={StaticResource InvertedBoolToVisibilityConverter}}" />
            </Grid>

            <Grid
                Grid.Row="1"
                HorizontalAlignment="Stretch"
                VerticalAlignment="Stretch">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Style="{StaticResource ModulesColumnsStyle}" />
                    <ColumnDefinition Style="{StaticResource ModulesColumnsGridSplitterStyle}" />
                    <ColumnDefinition Width="2*" />
                </Grid.ColumnDefinitions>

                <ListView
                    AlternationCount="2"
                    AutomationProperties.AutomationId="AutoFunctionList"
                    Background="{DynamicResource {x:Static SystemColors.ControlLightLightBrushKey}}"
                    BorderBrush="{x:Null}"
                    BorderThickness="0,0,0,0"
                    Grid.Column="0"
                    Panel.ZIndex="2"
                    VirtualizingStackPanel.IsVirtualizing="True"
                    VirtualizingStackPanel.VirtualizationMode="Recycling"
                    Visibility="{Binding ShowModules, Converter={StaticResource BoolToVisibilityConverter}}"
                    x:Name="ModulesList">
                    <ListView.View>
                        <GridView>
                            <GridViewColumn Width="180">
                                <GridViewColumnHeader Content="Module" x:Name="ModuleColumnHeader" />
                                <GridViewColumn.HeaderContainerStyle>
                                    <Style TargetType="{x:Type GridViewColumnHeader}">
                                        <Setter Property="HorizontalContentAlignment" Value="Left" />
                                    </Style>
                                </GridViewColumn.HeaderContainerStyle>

                                <GridViewColumn.CellTemplate>
                                    <DataTemplate>
                                        <DockPanel Margin="2">
                                            <TextBlock
                                                DockPanel.Dock="Top"
                                                FontWeight="Medium"
                                                Margin="0,0,0,2"
                                                Text="{Binding Name}" />

                                            <Border
                                                Background="{Binding BackColor}"
                                                DockPanel.Dock="Bottom"
                                                HorizontalAlignment="Stretch">
                                                <ContentControl
                                                    Content="{Binding}"
                                                    ContentTemplate="{StaticResource ProfileExclusivePercentageTemplate}"
                                                    HorizontalAlignment="Stretch" />
                                            </Border>
                                        </DockPanel>
                                    </DataTemplate>
                                </GridViewColumn.CellTemplate>
                            </GridViewColumn>
                        </GridView>
                    </ListView.View>
                    <ListView.ItemContainerStyle>
                        <Style BasedOn="{StaticResource FlatListViewItem}" TargetType="{x:Type ListViewItem}">
                            <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.ControlLightLightBrushKey}}" />
                            <EventSetter Event="MouseDoubleClick" Handler="ModuleDoubleClick" />
                            <Setter Property="HorizontalContentAlignment" Value="Stretch" />

                            <Style.Triggers>
                                <Trigger Property="ItemsControl.AlternationIndex" Value="0">
                                    <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.ControlLightLightBrushKey}}" />
                                </Trigger>
                                <Trigger Property="ItemsControl.AlternationIndex" Value="1">
                                    <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.MenuBrushKey}}" />
                                </Trigger>
                            </Style.Triggers>
                        </Style>
                    </ListView.ItemContainerStyle>
                </ListView>

                <GridSplitter
                    Background="{DynamicResource {x:Static SystemColors.ActiveBorderBrushKey}}"
                    Grid.Column="1"
                    HorizontalAlignment="Stretch"
                    VerticalAlignment="Stretch"
                    Width="2" />

                <ListView
                    AlternationCount="2"
                    Background="{DynamicResource {x:Static SystemColors.ControlLightLightBrushKey}}"
                    BorderBrush="{x:Null}"
                    BorderThickness="0,0,0,0"
                    Grid.Column="2"
                    Panel.ZIndex="1"
                    SelectionChanged="FunctionList_SelectionChanged"
                    VirtualizingStackPanel.IsVirtualizing="True"
                    VirtualizingStackPanel.VirtualizationMode="Recycling"
                    x:Name="FunctionList">
                    <ListView.View>
                        <GridView>
                            <GridViewColumn DisplayMemberBinding="{Binding Name}" Width="200">
                                <GridViewColumnHeader Content="Function" x:Name="FunctionColumnHeader" />
                                <GridViewColumn.HeaderContainerStyle>
                                    <Style TargetType="{x:Type GridViewColumnHeader}">
                                        <Setter Property="HorizontalContentAlignment" Value="Left" />
                                    </Style>
                                </GridViewColumn.HeaderContainerStyle>
                            </GridViewColumn>
                            <GridViewColumn
                                DisplayMemberBinding="{Binding SectionCount}"
                                Width="50"
                                local:GridViewColumnVisibility.IsVisible="{Binding SectionCountColumnVisible}">
                                <GridViewColumnHeader Content="Sections" x:Name="SectionsColumnHeader" />
                                <GridViewColumn.HeaderContainerStyle>
                                    <Style TargetType="{x:Type GridViewColumnHeader}">
                                        <Setter Property="HorizontalContentAlignment" Value="Left" />
                                    </Style>
                                </GridViewColumn.HeaderContainerStyle>
                            </GridViewColumn>

                            <GridViewColumn
                                DisplayMemberBinding="{Binding ModuleName}"
                                Width="100"
                                local:GridViewColumnVisibility.IsVisible="{Binding ModuleControlsVisible}">
                                <GridViewColumnHeader Content="Module" x:Name="FunctionModuleColumnHeader" />
                                <GridViewColumn.HeaderContainerStyle>
                                    <Style TargetType="{x:Type GridViewColumnHeader}">
                                        <Setter Property="HorizontalContentAlignment" Value="Left" />
                                    </Style>
                                </GridViewColumn.HeaderContainerStyle>
                            </GridViewColumn>

                            <GridViewColumn Width="150" local:GridViewColumnVisibility.IsVisible="{Binding OptionalDataColumnVisible}">
                                <GridViewColumnHeader Content="{Binding OptionalDataColumnName}" x:Name="OptionalColumnHeader" />

                                <GridViewColumn.HeaderContainerStyle>
                                    <Style TargetType="{x:Type GridViewColumnHeader}">
                                        <Setter Property="HorizontalContentAlignment" Value="Left" />
                                    </Style>
                                </GridViewColumn.HeaderContainerStyle>

                                <GridViewColumn.CellTemplate>
                                    <DataTemplate>
                                        <Border Background="{Binding BackColor}" HorizontalAlignment="Stretch">
                                            <ContentControl
                                                Content="{Binding}"
                                                ContentTemplate="{StaticResource ProfileExclusivePercentageTemplate}"
                                                HorizontalAlignment="Stretch" />
                                        </Border>
                                    </DataTemplate>
                                </GridViewColumn.CellTemplate>
                            </GridViewColumn>

                            <GridViewColumn Width="150" local:GridViewColumnVisibility.IsVisible="{Binding OptionalDataColumnVisible2}">
                                <GridViewColumnHeader Content="{Binding OptionalDataColumnName2}" x:Name="OptionalColumnHeader2" />

                                <GridViewColumn.HeaderContainerStyle>
                                    <Style TargetType="{x:Type GridViewColumnHeader}">
                                        <Setter Property="HorizontalContentAlignment" Value="Left" />
                                    </Style>
                                </GridViewColumn.HeaderContainerStyle>

                                <GridViewColumn.CellTemplate>
                                    <DataTemplate>
                                        <Border Background="{Binding BackColor2}" HorizontalAlignment="Stretch">
                                            <ContentControl
                                                Content="{Binding}"
                                                ContentTemplate="{StaticResource ProfilePercentageTemplate}"
                                                HorizontalAlignment="Stretch" />
                                        </Border>
                                    </DataTemplate>
                                </GridViewColumn.CellTemplate>
                            </GridViewColumn>

                            <GridViewColumn Width="200" local:GridViewColumnVisibility.IsVisible="{Binding AlternateNameColumnVisible}">
                                <GridViewColumnHeader Content="Demangled Name" x:Name="AlternateNameColumnHeader" />

                                <GridViewColumn.HeaderContainerStyle>
                                    <Style TargetType="{x:Type GridViewColumnHeader}">
                                        <Setter Property="HorizontalContentAlignment" Value="Left" />
                                    </Style>
                                </GridViewColumn.HeaderContainerStyle>

                                <GridViewColumn.CellTemplate>
                                    <DataTemplate>
                                        <Border HorizontalAlignment="Stretch">
                                            <TextBlock Text="{Binding AlternateName}" />
                                        </Border>
                                    </DataTemplate>
                                </GridViewColumn.CellTemplate>
                            </GridViewColumn>
                        </GridView>
                    </ListView.View>
                    <ListView.ItemContainerStyle>
                        <Style BasedOn="{StaticResource FlatListViewItem}" TargetType="{x:Type ListViewItem}">
                            <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.ControlLightLightBrushKey}}" />
                            <EventSetter Event="MouseDoubleClick" Handler="FunctionDoubleClick" />
                            <Setter Property="HorizontalContentAlignment" Value="Stretch" />

                            <Style.Triggers>
                                <DataTrigger Binding="{Binding Path=IsDeletionDiff}" Value="True">
                                    <Setter Property="Background" Value="{Binding Path=MissingSectionBrush, Converter={StaticResource ColorBrushOpacityConverter}, ConverterParameter=0.2}" />
                                    <Setter Property="FontWeight" Value="Medium" />
                                    <Setter Property="BorderBrush" Value="{Binding Path=MissingSectionBrush}" />
                                    <Setter Property="BorderThickness" Value="1" />
                                </DataTrigger>

                                <DataTrigger Binding="{Binding Path=IsInsertionDiff}" Value="True">
                                    <Setter Property="Background" Value="{Binding Path=NewSectionBrush, Converter={StaticResource ColorBrushOpacityConverter}, ConverterParameter=0.2}" />
                                    <Setter Property="FontWeight" Value="Medium" />
                                    <Setter Property="BorderBrush" Value="{Binding Path=NewSectionBrush}" />
                                    <Setter Property="BorderThickness" Value="1" />
                                </DataTrigger>

                                <DataTrigger Binding="{Binding Path=HasDiffs}" Value="True">
                                    <Setter Property="FontWeight" Value="Medium" />
                                    <Setter Property="Background" Value="{Binding Path=ChangedSectionBrush, Converter={StaticResource ColorBrushOpacityConverter}, ConverterParameter=0.2}" />
                                    <Setter Property="BorderBrush" Value="{Binding Path=ChangedSectionBrush}" />
                                    <Setter Property="BorderThickness" Value="1" />
                                </DataTrigger>

                                <DataTrigger Binding="{Binding Path=IsPlaceholderDiff}" Value="True">
                                    <Setter Property="BorderBrush" Value="Transparent" />
                                    <Setter Property="BorderThickness" Value="1" />
                                </DataTrigger>

                                <Trigger Property="ItemsControl.AlternationIndex" Value="0">
                                    <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.ControlLightLightBrushKey}}" />
                                </Trigger>
                                <Trigger Property="ItemsControl.AlternationIndex" Value="1">
                                    <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.MenuBrushKey}}" />
                                </Trigger>
                            </Style.Triggers>
                        </Style>
                    </ListView.ItemContainerStyle>
                    <ListView.ContextMenu>
                        <ContextMenu>
                            <MenuItem
                                Command="local:Command.CopyFunctionName"
                                CommandParameter="{Binding RelativeSource={RelativeSource AncestorType=ContextMenu}, Path=PlacementTarget.SelectedItem}"
                                CommandTarget="{Binding ElementName=FunctionList}"
                                Header="Copy Function Name"
                                ToolTip="Copy the function name to the clipboard" />
                            <MenuItem
                                Command="local:Command.CopyDemangledFunctionName"
                                CommandParameter="{Binding RelativeSource={RelativeSource AncestorType=ContextMenu}, Path=PlacementTarget.SelectedItem}"
                                CommandTarget="{Binding ElementName=FunctionList}"
                                Header="Copy Demangled Function Name"
                                ToolTip="Copy the demangled function name to the clipboard (C/C++)" />
                            <MenuItem
                                Command="local:Command.ExportFunctionList"
                                CommandParameter="{Binding RelativeSource={RelativeSource AncestorType=ContextMenu}, Path=PlacementTarget.SelectedItem}"
                                CommandTarget="{Binding ElementName=FunctionList}"
                                Header="Export Function List as Excel File"
                                ToolTip="Save the list of functions and associated column data as an Excel worksheet" />
                            <Separator />

                            <MenuItem
                                Command="local:Command.CopyFunctionText"
                                CommandParameter="{Binding RelativeSource={RelativeSource AncestorType=ContextMenu}, Path=PlacementTarget.SelectedItem}"
                                CommandTarget="{Binding ElementName=FunctionList}"
                                Header="Copy Function Text"
                                ToolTip="Copies the text (IR) of all sections for the selected function to the clipboard" />
                            <MenuItem
                                Command="local:Command.SaveFunctionText"
                                CommandParameter="{Binding RelativeSource={RelativeSource AncestorType=ContextMenu}, Path=PlacementTarget.SelectedItem}"
                                CommandTarget="{Binding ElementName=FunctionList}"
                                Header="Save Function Text"
                                ToolTip="Save the text (IR) of all sections for the selected function to a file" />
                            <MenuItem
                                Command="local:Command.OpenDocumentInNewInstance"
                                CommandParameter="{Binding RelativeSource={RelativeSource AncestorType=ContextMenu}, Path=PlacementTarget.SelectedItem}"
                                CommandTarget="{Binding ElementName=FunctionList}"
                                Header="Open File in New IR Explorer Instance"
                                ToolTip="Opens the IR document in a new instance of IR Explorer" />
                            <MenuItem
                                Command="local:Command.OpenDocumentInEditor"
                                CommandParameter="{Binding RelativeSource={RelativeSource AncestorType=ContextMenu}, Path=PlacementTarget.SelectedItem}"
                                CommandTarget="{Binding ElementName=FunctionList}"
                                Header="Open File in External Editor"
                                ToolTip="Opens the IR document in the default external editor" />

                            <Separator Visibility="{Binding IsInTwoDocumentsMode, Converter={StaticResource BoolToVisibilityConverter}}" />
                            <MenuItem
                                Command="local:Command.SaveFunctionText"
                                CommandParameter="{Binding RelativeSource={RelativeSource AncestorType=ContextMenu}, Path=PlacementTarget.SelectedItem}"
                                CommandTarget="{Binding ElementName=FunctionList}"
                                Header="Copy Diff Function Text"
                                ToolTip="Copies the text (IR) of all sections for the selected diff function to the clipboard"
                                Visibility="{Binding IsInTwoDocumentsMode, Converter={StaticResource BoolToVisibilityConverter}}" />
                            <MenuItem
                                Command="local:Command.SaveFunctionText"
                                CommandParameter="{Binding RelativeSource={RelativeSource AncestorType=ContextMenu}, Path=PlacementTarget.SelectedItem}"
                                CommandTarget="{Binding ElementName=FunctionList}"
                                Header="Save Function Text"
                                ToolTip="Save the text (IR) of all sections for the selected diff function to a file"
                                Visibility="{Binding IsInTwoDocumentsMode, Converter={StaticResource BoolToVisibilityConverter}}" />
                            <MenuItem
                                Command="local:Command.SaveFunctionText"
                                CommandParameter="{Binding RelativeSource={RelativeSource AncestorType=ContextMenu}, Path=PlacementTarget.SelectedItem}"
                                CommandTarget="{Binding ElementName=FunctionList}"
                                Header="Open Diff File in New IR Explorer Instance"
                                ToolTip="Opens the diff IR document in a new instance of IR Explorer"
                                Visibility="{Binding IsInTwoDocumentsMode, Converter={StaticResource BoolToVisibilityConverter}}" />
                            <MenuItem
                                Command="local:Command.SaveFunctionText"
                                CommandParameter="{Binding RelativeSource={RelativeSource AncestorType=ContextMenu}, Path=PlacementTarget.SelectedItem}"
                                CommandTarget="{Binding ElementName=FunctionList}"
                                Header="Open Diff File in External Editor"
                                ToolTip="Opens the diff IR document in the default external editor"
                                Visibility="{Binding IsInTwoDocumentsMode, Converter={StaticResource BoolToVisibilityConverter}}" />

                        </ContextMenu>
                    </ListView.ContextMenu>
                </ListView>

            </Grid>
        </Grid>

        <GridSplitter
            Background="{DynamicResource {x:Static SystemColors.ActiveBorderBrushKey}}"
            Grid.Column="1"
            HorizontalAlignment="Stretch"
            VerticalAlignment="Stretch"
            Width="2"
            x:Name="MainGridSplitter" />

        <Grid Grid.Column="2" Visibility="{Binding IsSectionListVisible, Converter={StaticResource BoolToVisibilityConverter}}">

            <Grid Visibility="{Binding ShowSections, Converter={StaticResource BoolToVisibilityConverter}}" x:Name="SectionGrid">
                <Grid.RowDefinitions>
                    <RowDefinition Height="28" />
                    <RowDefinition Height="*" />
                </Grid.RowDefinitions>

                <Grid Grid.Row="0" x:Name="SectionToolbarGrid">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="*" />
                        <ColumnDefinition Width="25" />
                    </Grid.ColumnDefinitions>

                    <ToolBarTray
                        Background="{DynamicResource {x:Static SystemColors.ControlLightBrushKey}}"
                        Grid.Column="0"
                        Height="28"
                        IsLocked="True"
                        x:Name="SectionToolbar">
                        <ToolBar
                            Background="{DynamicResource {x:Static SystemColors.ControlLightBrushKey}}"
                            HorizontalAlignment="Stretch"
                            Loaded="ToolBar_Loaded"
                            VerticalAlignment="Top">

                            <Image Source="{StaticResource SearchIcon}" />
                            <Grid Height="24">
                                <TextBox
                                    Background="{DynamicResource {x:Static SystemColors.ControlLightLightBrushKey}}"
                                    BorderBrush="{DynamicResource {x:Static SystemColors.ActiveBorderBrushKey}}"
                                    HorizontalAlignment="Center"
                                    Margin="4,0,0,0"
                                    TabIndex="4"
                                    TextChanged="SectionFilter_TextChanged"
                                    ToolTip="Filter section list based on a case-insensitive string (Ctrl+F)"
                                    VerticalContentAlignment="Center"
                                    Width="200"
                                    x:Name="SectionFilter">
                                    <TextBox.InputBindings>
                                        <KeyBinding
                                            Command="local:Command.ClearTextbox"
                                            CommandParameter="{Binding ElementName=SectionFilter}"
                                            Key="Escape" />
                                    </TextBox.InputBindings>
                                </TextBox>
                                <TextBlock
                                    Foreground="DimGray"
                                    IsHitTestVisible="False"
                                    Margin="8,4"
                                    Text="Search sections"
                                    Visibility="{Binding ElementName=SectionFilter, Path=Text.IsEmpty, Converter={StaticResource BoolToVisibilityConverter}}" />

                            </Grid>
                            <Button
                                Command="local:Command.ClearTextbox"
                                CommandParameter="{Binding ElementName=SectionFilter}"
                                TabIndex="5"
                                ToolTip="Reset section filter">
                                <Image
                                    Height="16"
                                    Source="{StaticResource ClearIcon}"
                                    Width="16" />
                            </Button>
                            <Separator />

                            <ToggleButton
                                IsChecked="{Binding FilterTagged}"
                                TabIndex="2"
                                ToolTip="Show only sections with a tag">
                                <Image Source="{StaticResource TagIcon}" />
                            </ToggleButton>

                            <ToggleButton
                                IsChecked="{Binding FilterDiffFromPrevious}"
                                TabIndex="2"
                                ToolTip="Show only sections that are different from the previous one">
                                <Image Source="{StaticResource EyeIcon}" />
                            </ToggleButton>
                            <Separator />

                            <Button
                                Command="local:Command.PreviousSection"
                                CommandTarget="{Binding ElementName=SectionList}"
                                TabIndex="0"
                                ToolTip="Switch to previous section (Ctrl+P)"
                                x:Name="PreviousButton">
                                <Image Source="{StaticResource LeftArrowIcon}" />
                            </Button>
                            <Button
                                Command="local:Command.NextSection"
                                CommandTarget="{Binding ElementName=SectionList}"
                                TabIndex="1"
                                ToolTip="Switch to next section (Ctrl+N)"
                                x:Name="NextButton">
                                <Image Source="{StaticResource RightArrowIcon}" />
                            </Button>

                            <Separator />
                            <TextBlock
                                HorizontalAlignment="Center"
                                Margin="4,0,0,0"
                                Text="{Binding DocumentTitle}"
                                VerticalAlignment="Center" />
                        </ToolBar>
                    </ToolBarTray>

                    <local:PanelToolbarTray
                        Grid.Column="1"
                        HasDuplicateButton="False"
                        HasPinButton="False"
                        SettingsClicked="FixedToolbar_SettingsClicked"
                        x:Name="FixedToolbar" />
                </Grid>

                <ListView
                    AutomationProperties.AutomationId="AutoSectionList"
                    Background="{DynamicResource {x:Static SystemColors.ControlLightLightBrushKey}}"
                    BorderBrush="{x:Null}"
                    BorderThickness="0,0,0,0"
                    Grid.Row="1"
                    HorizontalAlignment="Stretch"
                    ScrollViewer.HorizontalScrollBarVisibility="Hidden"
                    VerticalAlignment="Stretch"
                    VirtualizingStackPanel.IsVirtualizing="True"
                    VirtualizingStackPanel.VirtualizationMode="Recycling"
                    x:Name="SectionList">
                    <ListView.View>
                        <GridView>
                            <GridViewColumn Width="50">
                                <GridViewColumnHeader Content="#" x:Name="NumberColumnHeader" />
                                <GridViewColumn.HeaderContainerStyle>
                                    <Style TargetType="{x:Type GridViewColumnHeader}">
                                        <Setter Property="HorizontalContentAlignment" Value="Left" />
                                    </Style>
                                </GridViewColumn.HeaderContainerStyle>
                                <GridViewColumn.CellTemplate>
                                    <DataTemplate>
                                        <Border
                                            BorderBrush="{Binding BorderBrush}"
                                            BorderThickness="{Binding BorderThickness}"
                                            Margin="-6,-2,-6,-2">
                                            <StackPanel Margin="6,2,6,2" Orientation="Horizontal">
                                                <Image
                                                    Height="16"
                                                    Source="{StaticResource DockRightIcon}"
                                                    Style="{StaticResource IconSelected}"
                                                    Width="16" />

                                                <TextBlock Text="{Binding NumberString}" />
                                            </StackPanel>
                                        </Border>
                                    </DataTemplate>
                                </GridViewColumn.CellTemplate>
                            </GridViewColumn>

                            <GridViewColumn Width="280">
                                <GridViewColumnHeader Content="Section" x:Name="NameColumnHeader" />
                                <GridViewColumn.HeaderContainerStyle>
                                    <Style TargetType="{x:Type GridViewColumnHeader}">
                                        <Setter Property="HorizontalContentAlignment" Value="Left" />
                                    </Style>
                                </GridViewColumn.HeaderContainerStyle>

                                <GridViewColumn.CellTemplate>
                                    <DataTemplate>
                                        <Border
                                            BorderBrush="{Binding BorderBrush}"
                                            BorderThickness="{Binding BorderThickness}"
                                            Margin="-6,-2,-6,-2">
                                            <TextBlock Margin="6,2,6,2" Text="{Binding Name}" />
                                        </Border>
                                    </DataTemplate>
                                </GridViewColumn.CellTemplate>
                            </GridViewColumn>
                            <GridViewColumn Width="50">
                                <GridViewColumnHeader
                                    Content="Blocks"
                                    Width="50"
                                    x:Name="BlocksColumnHeader" />
                                <GridViewColumn.HeaderContainerStyle>
                                    <Style TargetType="{x:Type GridViewColumnHeader}">
                                        <Setter Property="HorizontalContentAlignment" Value="Left" />
                                    </Style>
                                </GridViewColumn.HeaderContainerStyle>
                                <GridViewColumn.CellTemplate>
                                    <DataTemplate>
                                        <Border
                                            BorderBrush="{Binding BorderBrush}"
                                            BorderThickness="{Binding BorderThickness}"
                                            Margin="-6,-2,-6,-2">
                                            <TextBlock Margin="6,2,6,2" Text="{Binding BlockCountString}" />
                                        </Border>
                                    </DataTemplate>
                                </GridViewColumn.CellTemplate>
                            </GridViewColumn>

                            <GridViewColumn Width="40">
                                <GridViewColumnHeader Content="Flags" />
                                <GridViewColumn.HeaderContainerStyle>
                                    <Style TargetType="{x:Type GridViewColumnHeader}">
                                        <Setter Property="HorizontalContentAlignment" Value="Left" />
                                    </Style>
                                </GridViewColumn.HeaderContainerStyle>
                                <GridViewColumn.CellTemplate>
                                    <DataTemplate>
                                        <Border
                                            BorderBrush="{Binding BorderBrush}"
                                            BorderThickness="{Binding BorderThickness}"
                                            Margin="-6,-2,-6,-2">
                                            <StackPanel Margin="6,2,6,2" Orientation="Horizontal">
                                                <Image
                                                    Height="16"
                                                    Source="{StaticResource DotIconTransparent}"
                                                    Style="{StaticResource IconDifferentFromPrevious}"
                                                    Width="16" />
                                                <Image
                                                    Height="16"
                                                    Source="{StaticResource TagIcon}"
                                                    Style="{StaticResource IconTagged}"
                                                    Width="16" />
                                            </StackPanel>
                                        </Border>
                                    </DataTemplate>
                                </GridViewColumn.CellTemplate>
                            </GridViewColumn>

                        </GridView>
                    </ListView.View>

                    <ListView.ItemContainerStyle>
                        <Style BasedOn="{StaticResource FlatListViewItem}" TargetType="{x:Type ListViewItem}">
                            <EventSetter Event="MouseDoubleClick" Handler="SectionDoubleClick" />

                            <Setter Property="HorizontalContentAlignment" Value="Stretch" />
                            <Setter Property="VerticalContentAlignment" Value="Stretch" />
                            <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.ControlLightLightBrushKey}}" />

                            <Style.Triggers>
                                <DataTrigger Binding="{Binding Path=IsSelected}" Value="True">
                                    <Setter Property="FontWeight" Value="Bold" />
                                </DataTrigger>

                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding Path=IsDiffFromPrevious}" Value="False" />
                                        <Condition Binding="{Binding Path=LowerIdenticalToPreviousOpacity}" Value="True" />
                                        <Condition Binding="{Binding Path=IsSelected}" Value="False" />
                                    </MultiDataTrigger.Conditions>
                                    <Setter Property="Opacity" Value="0.6" />
                                </MultiDataTrigger>

                                <DataTrigger Binding="{Binding Path=IsMarked}" Value="True">
                                    <Setter Property="Foreground" Value="{Binding Path=TextColor}" />
                                </DataTrigger>

                                <DataTrigger Binding="{Binding Path=IsDeletionDiff}" Value="True">
                                    <Setter Property="Background" Value="{Binding Path=MissingSectionBrush, Converter={StaticResource ColorBrushOpacityConverter}, ConverterParameter=0.2}" />
                                    <Setter Property="FontWeight" Value="Medium" />
                                    <Setter Property="BorderBrush" Value="{Binding Path=MissingSectionBrush}" />
                                    <Setter Property="BorderThickness" Value="1" />
                                </DataTrigger>

                                <DataTrigger Binding="{Binding Path=IsInsertionDiff}" Value="True">
                                    <Setter Property="Background" Value="{Binding Path=NewSectionBrush, Converter={StaticResource ColorBrushOpacityConverter}, ConverterParameter=0.2}" />
                                    <Setter Property="FontWeight" Value="Medium" />
                                    <Setter Property="BorderBrush" Value="{Binding Path=NewSectionBrush}" />
                                    <Setter Property="BorderThickness" Value="1" />
                                </DataTrigger>

                                <DataTrigger Binding="{Binding Path=HasDiffs}" Value="True">
                                    <Setter Property="FontWeight" Value="Medium" />
                                    <Setter Property="Background" Value="{Binding Path=ChangedSectionBrush, Converter={StaticResource ColorBrushOpacityConverter}, ConverterParameter=0.2}" />
                                    <Setter Property="BorderBrush" Value="{Binding Path=ChangedSectionBrush}" />
                                    <Setter Property="BorderThickness" Value="1" />
                                </DataTrigger>

                                <DataTrigger Binding="{Binding Path=IsPlaceholderDiff}" Value="True">
                                    <Setter Property="BorderBrush" Value="Transparent" />
                                    <Setter Property="BorderThickness" Value="1" />
                                </DataTrigger>
                            </Style.Triggers>

                        </Style>
                    </ListView.ItemContainerStyle>
                    <ListView.ContextMenu>
                        <ContextMenu>
                            <MenuItem
                                Command="local:Command.Open"
                                CommandParameter="{Binding RelativeSource={RelativeSource AncestorType=ContextMenu}, Path=PlacementTarget.SelectedItem}"
                                CommandTarget="{Binding ElementName=SectionList}"
                                Header="Open"
                                InputGestureText="Return" />
                            <MenuItem
                                Command="local:Command.OpenInNewTab"
                                CommandParameter="{Binding RelativeSource={RelativeSource AncestorType=ContextMenu}, Path=PlacementTarget.SelectedItem}"
                                CommandTarget="{Binding ElementName=SectionList}"
                                Header="Open in New Tab"
                                InputGestureText="Shift+Return">
                                <MenuItem.Icon>
                                    <Image
                                        Height="16"
                                        Source="{StaticResource OpenExternalIcon}"
                                        Width="16" />
                                </MenuItem.Icon>
                            </MenuItem>
                            <MenuItem
                                Command="local:Command.OpenLeft"
                                CommandParameter="{Binding RelativeSource={RelativeSource AncestorType=ContextMenu}, Path=PlacementTarget.SelectedItem}"
                                CommandTarget="{Binding ElementName=SectionList}"
                                Header="Open in Left Tab"
                                InputGestureText="Ctrl+Left">
                                <MenuItem.Icon>
                                    <Image
                                        Height="16"
                                        Source="{StaticResource DockLeftIcon}"
                                        Width="16" />
                                </MenuItem.Icon>
                            </MenuItem>
                            <MenuItem
                                Command="local:Command.OpenRight"
                                CommandParameter="{Binding RelativeSource={RelativeSource AncestorType=ContextMenu}, Path=PlacementTarget.SelectedItem}"
                                CommandTarget="{Binding ElementName=SectionList}"
                                Header="Open in Right Tab"
                                InputGestureText="Ctrl+Right">
                                <MenuItem.Icon>
                                    <Image
                                        Height="16"
                                        Source="{StaticResource DockRightIcon}"
                                        Width="16" />
                                </MenuItem.Icon>
                            </MenuItem>
                            <MenuItem
                                Command="local:Command.OpenSideBySide"
                                CommandParameter="{Binding RelativeSource={RelativeSource AncestorType=ContextMenu}, Path=PlacementTarget.SelectedItem}"
                                CommandTarget="{Binding ElementName=SectionList}"
                                Header="Open Side-By-Side"
                                InputGestureText="Return"
                                ToolTip="Open the two selected sections from the same document">
                                <MenuItem.Icon>
                                    <Image
                                        Height="16"
                                        Source="{StaticResource WordWrapIcon}"
                                        Width="16" />
                                </MenuItem.Icon>
                            </MenuItem>
                            <Separator />

                            <MenuItem
                                Command="local:Command.DiffSideBySide"
                                CommandParameter="{Binding RelativeSource={RelativeSource AncestorType=ContextMenu}, Path=PlacementTarget.SelectedItem}"
                                CommandTarget="{Binding ElementName=SectionList}"
                                Header="Compare Side-By-Side"
                                InputGestureText="Shift+Return"
                                ToolTip="Compare the two selected sections from the same document">
                                <MenuItem.Icon>
                                    <Image
                                        Height="16"
                                        Source="{StaticResource BookIcon}"
                                        Width="16" />
                                </MenuItem.Icon>
                            </MenuItem>

                            <MenuItem
                                Command="local:Command.DiffWithOtherDocument"
                                CommandParameter="{Binding RelativeSource={RelativeSource AncestorType=ContextMenu}, Path=PlacementTarget.SelectedItem}"
                                CommandTarget="{Binding ElementName=SectionList}"
                                Header="Compare with Other Document"
                                InputGestureText="Ctrl+Return"
                                ToolTip="Compare section with same one from the other document" />
                            <MenuItem
                                Command="local:Command.SyncDiffedDocuments"
                                CommandParameter="{Binding RelativeSource={RelativeSource AncestorType=ContextMenu}, Path=PlacementTarget.SelectedItem}"
                                CommandTarget="{Binding ElementName=SectionList}"
                                Header="Sync Section with Other Document"
                                IsCheckable="True"
                                IsChecked="{Binding Path=SyncDiffedDocuments, Mode=TwoWay}"
                                ToolTip="Sync the diffed section between the two documents" />
                            <Separator />

                            <MenuItem
                                Command="local:Command.CopySectionText"
                                CommandParameter="{Binding RelativeSource={RelativeSource AncestorType=ContextMenu}, Path=PlacementTarget.SelectedItem}"
                                CommandTarget="{Binding ElementName=SectionList}"
                                Header="Copy Section Text"
                                ToolTip="Copy the section text (IR) to the clipboard">
                                <MenuItem.Icon>
                                    <Image
                                        Height="16"
                                        Source="{StaticResource ClipboardIcon}"
                                        Width="16" />
                                </MenuItem.Icon>
                            </MenuItem>

                            <MenuItem
                                Command="local:Command.SaveSectionText"
                                CommandParameter="{Binding RelativeSource={RelativeSource AncestorType=ContextMenu}, Path=PlacementTarget.SelectedItem}"
                                CommandTarget="{Binding ElementName=SectionList}"
                                Header="Save Section Text"
                                ToolTip="Save the section text (IR) to a file" />
                            <Separator />

                            <MenuItem
                                Command="local:Command.ToggleTag"
                                CommandParameter="{Binding RelativeSource={RelativeSource AncestorType=ContextMenu}, Path=PlacementTarget.SelectedItem}"
                                CommandTarget="{Binding ElementName=SectionList}"
                                Header="Toggle Tag"
                                InputGestureText="Ctrl+T">
                                <MenuItem.Icon>
                                    <Image
                                        Height="16"
                                        Source="{StaticResource TagIcon}"
                                        Width="16" />
                                </MenuItem.Icon>
                            </MenuItem>
                            <MenuItem Header="More...">
                                <MenuItem
                                    Command="local:Command.DisplayPartialCallGraph"
                                    CommandParameter="{Binding RelativeSource={RelativeSource AncestorType=ContextMenu}, Path=PlacementTarget.SelectedItem}"
                                    CommandTarget="{Binding ElementName=FunctionList}"
                                    Header="Show Function Call Graph"
                                    ToolTip="Show the call graph that includes all reachable functions starting with the selected one" />

                                <MenuItem
                                    Command="local:Command.DisplayCallGraph"
                                    CommandParameter="{Binding RelativeSource={RelativeSource AncestorType=ContextMenu}, Path=PlacementTarget.SelectedItem}"
                                    CommandTarget="{Binding ElementName=FunctionList}"
                                    Header="Show Call Graph"
                                    ToolTip="Show the call graph for all the functions in the document" />
                            </MenuItem>

                        </ContextMenu>
                    </ListView.ContextMenu>
                    <ListView.InputBindings>
                        <KeyBinding
                            Command="local:Command.Open"
                            CommandParameter="{Binding ElementName=SectionList, Path=SelectedItem}"
                            CommandTarget="{Binding ElementName=SectionList}"
                            Key="Enter" />
                        <KeyBinding
                            Command="local:Command.OpenInNewTab"
                            CommandParameter="{Binding ElementName=SectionList, Path=SelectedItem}"
                            CommandTarget="{Binding ElementName=SectionList}"
                            Key="Enter"
                            Modifiers="Shift" />
                        <KeyBinding
                            Command="local:Command.ToggleTag"
                            CommandParameter="{Binding ElementName=SectionList, Path=SelectedItem}"
                            CommandTarget="{Binding ElementName=SectionList}"
                            Key="T"
                            Modifiers="Ctrl" />
                        <KeyBinding
                            Command="local:Command.CopyFunctionName"
                            CommandParameter="{Binding ElementName=SectionList, Path=SelectedItem}"
                            CommandTarget="{Binding ElementName=SectionList}"
                            Key="C"
                            Modifiers="Ctrl" />
                        <KeyBinding
                            Command="local:Command.CopyDemangledFunctionName"
                            CommandParameter="{Binding ElementName=SectionList, Path=SelectedItem}"
                            CommandTarget="{Binding ElementName=SectionList}"
                            Key="C"
                            Modifiers="Ctrl+Shift" />
                        <KeyBinding
                            Command="local:Command.CopyFunctionName"
                            CommandParameter="{Binding ElementName=FunctionList, Path=SelectedItem}"
                            CommandTarget="{Binding ElementName=FunctionList}"
                            Key="C"
                            Modifiers="Ctrl" />
                        <KeyBinding
                            Command="local:Command.CopyDemangledFunctionName"
                            CommandParameter="{Binding ElementName=FunctionList, Path=SelectedItem}"
                            CommandTarget="{Binding ElementName=FunctionList}"
                            Key="C"
                            Modifiers="Ctrl+Shift" />
                    </ListView.InputBindings>
                </ListView>

            </Grid>
        </Grid>
    </Grid>

    <local:ToolPanelControl.InputBindings>
        <KeyBinding
            Command="local:Command.PreviousSection"
            Key="P"
            Modifiers="Ctrl" />
        <KeyBinding
            Command="local:Command.NextSection"
            Key="N"
            Modifiers="Ctrl" />
        <KeyBinding
            Command="local:Command.FocusSearch"
            Key="F"
            Modifiers="Ctrl" />
        <KeyBinding
            Command="local:Command.OpenLeft"
            CommandParameter="{Binding ElementName=SectionList, Path=SelectedItem}"
            Key="Left"
            Modifiers="Ctrl" />
        <KeyBinding
            Command="local:Command.OpenRight"
            CommandParameter="{Binding ElementName=SectionList, Path=SelectedItem}"
            Key="Right"
            Modifiers="Ctrl" />
        <KeyBinding
            Command="local:Command.DiffWithOtherDocument"
            CommandParameter="{Binding ElementName=SectionList, Path=SelectedItem}"
            Key="Return"
            Modifiers="Ctrl" />
        <KeyBinding
            Command="local:Command.DiffSideBySide"
            CommandParameter="{Binding ElementName=SectionList, Path=SelectedItem}"
            Key="Return"
            Modifiers="Shift" />
    </local:ToolPanelControl.InputBindings>
</local:ToolPanelControl>
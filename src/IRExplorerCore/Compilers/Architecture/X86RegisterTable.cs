// Copyright (c) Microsoft Corporation
// The Microsoft Corporation licenses this file to you under the MIT license.
// See the LICENSE file in the project root for more information.
namespace IRExplorerCore.IR;

public enum X86Register {
  RAX,
  EAX,
  AX,
  AL,
  AH,
  RBX,
  EBX,
  BX,
  BL,
  BH,
  RCX,
  ECX,
  CX,
  CL,
  CH,
  RDX,
  EDX,
  DX,
  DL,
  DH,
  RSP,
  ESP,
  SP,
  SPL,
  RBP,
  EBP,
  BP,
  BPL,
  RSI,
  ESI,
  SI,
  SIL,
  RDI,
  EDI,
  DI,
  DIL,
  R8,
  R8D,
  R8W,
  R8B,
  R9,
  R9D,
  R9W,
  R9B,
  R10,
  R10D,
  R10W,
  R10B,
  R11,
  R11D,
  R11W,
  R11B,
  R12,
  R12D,
  R12W,
  R12B,
  R13,
  R13D,
  R13W,
  R13B,
  R14,
  R14D,
  R14W,
  R14B,
  R15,
  R15D,
  R15W,
  R15B,
  CS,
  DS,
  ES,
  FS,
  GS,
  SS,
  RIP,
  EIP,
  IP,
  RFLAGS,
  EFLAGS,
  FLAGS,
  CF,
  PF,
  AF,
  ZF,
  SF,
  TF,
  IF,
  DF,
  OF,
  XMM0,
  XMM1,
  XMM2,
  XMM3,
  XMM4,
  XMM5,
  XMM6,
  XMM7,
  XMM8,
  XMM9,
  XMM10,
  XMM11,
  XMM12,
  XMM13,
  XMM14,
  XMM15,
  YMM0,
  YMM1,
  YMM2,
  YMM3,
  YMM4,
  YMM5,
  YMM6,
  YMM7,
  YMM8,
  YMM9,
  YMM10,
  YMM11,
  YMM12,
  YMM13,
  YMM14,
  YMM15
}

public class X86RegisterTable : RegisterTable {
  private static readonly RegisterIR[] registers_ = {
    //             Name      Register     Bit offset  Bit length
    new RegisterIR("rax", X86Register.RAX, 0, 64,
                   new RegisterIR("eax", X86Register.EAX, 0, 32,
                                  new RegisterIR("ax", X86Register.AX, 0, 16,
                                                 new RegisterIR("al", X86Register.AL, 0, 8),
                                                 new RegisterIR("ah", X86Register.AH, 8, 8)
                                  ))),
    new RegisterIR("rbx", X86Register.RBX, 0, 64,
                   new RegisterIR("ebx", X86Register.EBX, 0, 32,
                                  new RegisterIR("bx", X86Register.BX, 0, 16,
                                                 new RegisterIR("bl", X86Register.BL, 0, 8),
                                                 new RegisterIR("bh", X86Register.BH, 8, 8)
                                  ))),
    new RegisterIR("rcx", X86Register.RCX, 0, 64,
                   new RegisterIR("ecx", X86Register.ECX, 0, 32,
                                  new RegisterIR("cx", X86Register.CX, 0, 16,
                                                 new RegisterIR("cl", X86Register.CL, 0, 8),
                                                 new RegisterIR("ch", X86Register.CH, 8, 8)
                                  ))),
    new RegisterIR("rdx", X86Register.RDX, 0, 64,
                   new RegisterIR("edx", X86Register.EDX, 0, 32,
                                  new RegisterIR("dx", X86Register.DX, 0, 16,
                                                 new RegisterIR("dl", X86Register.DL, 0, 8),
                                                 new RegisterIR("dh", X86Register.DH, 8, 8)
                                  ))),
    new RegisterIR("rsp", X86Register.RSP, 0, 64,
                   new RegisterIR("esp", X86Register.ESP, 0, 32,
                                  new RegisterIR("sp", X86Register.SP, 0, 16,
                                                 new RegisterIR("spl", X86Register.SPL, 0, 8)
                                  ))),
    new RegisterIR("rbp", X86Register.RBP, 0, 64,
                   new RegisterIR("ebp", X86Register.EBP, 0, 32,
                                  new RegisterIR("bp", X86Register.BP, 0, 16,
                                                 new RegisterIR("bpl", X86Register.BPL, 0, 8)
                                  ))),
    new RegisterIR("rsi", X86Register.RSI, 0, 64,
                   new RegisterIR("esi", X86Register.ESI, 0, 32,
                                  new RegisterIR("si", X86Register.SI, 0, 16,
                                                 new RegisterIR("sil", X86Register.SIL, 0, 8)
                                  ))),
    new RegisterIR("rdi", X86Register.RDI, 0, 64,
                   new RegisterIR("edi", X86Register.EDI, 0, 32,
                                  new RegisterIR("di", X86Register.DI, 0, 16,
                                                 new RegisterIR("dil", X86Register.DIL, 0, 8))
                   )),
    new RegisterIR("r8", X86Register.R8, 0, 64,
                   new RegisterIR("r8d", X86Register.R8D, 0, 32,
                                  new RegisterIR("r8w", X86Register.R8W, 0, 16,
                                                 new RegisterIR("r8b", X86Register.R8B, 0, 8)
                                  ))),
    new RegisterIR("r9", X86Register.R9, 0, 64,
                   new RegisterIR("r9d", X86Register.R9D, 0, 32,
                                  new RegisterIR("r9w", X86Register.R9W, 0, 16,
                                                 new RegisterIR("r9b", X86Register.R9B, 0, 8)
                                  ))),
    new RegisterIR("r10", X86Register.R10, 0, 64,
                   new RegisterIR("r10d", X86Register.R10D, 0, 32,
                                  new RegisterIR("r10w", X86Register.R10W, 0, 16,
                                                 new RegisterIR("r10b", X86Register.R10B, 0, 8)
                                  ))),
    new RegisterIR("r11", X86Register.R11, 0, 64,
                   new RegisterIR("r11d", X86Register.R11D, 0, 32,
                                  new RegisterIR("r11w", X86Register.R11W, 0, 16,
                                                 new RegisterIR("r11b", X86Register.R11B, 0, 8)
                                  ))),
    new RegisterIR("r12", X86Register.R12, 0, 64,
                   new RegisterIR("r12d", X86Register.R12D, 0, 32,
                                  new RegisterIR("r12w", X86Register.R12W, 0, 16,
                                                 new RegisterIR("r12b", X86Register.R12B, 0, 8)
                                  ))),
    new RegisterIR("r13", X86Register.R13, 0, 64,
                   new RegisterIR("r13d", X86Register.R13D, 0, 32,
                                  new RegisterIR("r13w", X86Register.R13W, 0, 16,
                                                 new RegisterIR("r13b", X86Register.R13B, 0, 8)
                                  ))),
    new RegisterIR("r14", X86Register.R14, 0, 64,
                   new RegisterIR("r14d", X86Register.R14D, 0, 32,
                                  new RegisterIR("r14w", X86Register.R14W, 0, 16,
                                                 new RegisterIR("r14b", X86Register.R14B, 0, 8)
                                  ))),
    new RegisterIR("r15", X86Register.R15, 0, 64,
                   new RegisterIR("r15d", X86Register.R15D, 0, 32,
                                  new RegisterIR("r15w", X86Register.R15W, 0, 16,
                                                 new RegisterIR("r15b", X86Register.R15B, 0, 8)
                                  ))),
    new RegisterIR("cs", X86Register.CS, 0, 16),
    new RegisterIR("ds", X86Register.DS, 0, 16),
    new RegisterIR("es", X86Register.ES, 0, 16),
    new RegisterIR("fs", X86Register.FS, 0, 16),
    new RegisterIR("gs", X86Register.GS, 0, 16),
    new RegisterIR("ss", X86Register.SS, 0, 16),
    new RegisterIR("rip", X86Register.RIP, 0, 64,
                   new RegisterIR("eip", X86Register.EIP, 0, 32,
                                  new RegisterIR("ip", X86Register.IP, 0, 16)
                   )),
    new RegisterIR("rflags", X86Register.RFLAGS, 0, 64,
                   new RegisterIR("eflags", X86Register.EFLAGS, 0, 32,
                                  new RegisterIR("flags", X86Register.FLAGS, 0, 16,
                                                 new RegisterIR("cf", X86Register.CF, 0, 1),
                                                 new RegisterIR("pf", X86Register.PF, 2, 1),
                                                 new RegisterIR("af", X86Register.AF, 4, 1),
                                                 new RegisterIR("zf", X86Register.ZF, 6, 1),
                                                 new RegisterIR("sf", X86Register.SF, 7, 1),
                                                 new RegisterIR("tf", X86Register.TF, 8, 1),
                                                 new RegisterIR("if", X86Register.IF, 9, 1),
                                                 new RegisterIR("df", X86Register.DF, 10, 1),
                                                 new RegisterIR("of", X86Register.OF, 11, 1)
                                  ))),
    new RegisterIR("ymm0", X86Register.YMM0, 0, 256,
                   new RegisterIR("xmm0", X86Register.XMM0, 0, 128)),
    new RegisterIR("ymm1", X86Register.YMM1, 0, 256,
                   new RegisterIR("xmm1", X86Register.XMM1, 0, 128)),
    new RegisterIR("ymm2", X86Register.YMM2, 0, 256,
                   new RegisterIR("xmm2", X86Register.XMM2, 0, 128)),
    new RegisterIR("ymm3", X86Register.YMM3, 0, 256,
                   new RegisterIR("xmm3", X86Register.XMM3, 0, 128)),
    new RegisterIR("ymm4", X86Register.YMM4, 0, 256,
                   new RegisterIR("xmm4", X86Register.XMM4, 0, 128)),
    new RegisterIR("ymm5", X86Register.YMM5, 0, 256,
                   new RegisterIR("xmm5", X86Register.XMM5, 0, 128)),
    new RegisterIR("ymm6", X86Register.YMM6, 0, 256,
                   new RegisterIR("xmm6", X86Register.XMM6, 0, 128)),
    new RegisterIR("ymm7", X86Register.YMM7, 0, 256,
                   new RegisterIR("xmm7", X86Register.XMM7, 0, 128)),
    new RegisterIR("ymm8", X86Register.YMM8, 0, 256,
                   new RegisterIR("xmm8", X86Register.XMM8, 0, 128)),
    new RegisterIR("ymm9", X86Register.YMM9, 0, 256,
                   new RegisterIR("xmm9", X86Register.XMM9, 0, 128)),
    new RegisterIR("ymm10", X86Register.YMM10, 0, 256,
                   new RegisterIR("xmm10", X86Register.XMM10, 0, 128)),
    new RegisterIR("ymm11", X86Register.YMM11, 0, 256,
                   new RegisterIR("xmm11", X86Register.XMM11, 0, 128)),
    new RegisterIR("ymm12", X86Register.YMM12, 0, 256,
                   new RegisterIR("xmm12", X86Register.XMM12, 0, 128)),
    new RegisterIR("ymm13", X86Register.YMM13, 0, 256,
                   new RegisterIR("xmm13", X86Register.XMM13, 0, 128)),
    new RegisterIR("ymm14", X86Register.YMM14, 0, 256,
                   new RegisterIR("xmm14", X86Register.XMM14, 0, 128)),
    new RegisterIR("ymm15", X86Register.YMM15, 0, 256,
                   new RegisterIR("xmm15", X86Register.XMM15, 0, 128))
  };

  public X86RegisterTable() {
    PopulateRegisterTable(registers_);
  }
}

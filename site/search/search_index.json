{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"about.html","title":"About","text":""},{"location":"about.html#overview","title":"Overview","text":"<p>Profile Explorer is a tool for viewing CPU profiling traces collected through the Event Tracing for Windows (ETW) infrastructure on machines with x64 and ARM64 CPUs. Its focus is on presenting the slowest parts of the profiled application through an easy-to-use but detailed UI consisting of several views, such as slow functions list, flame graph, call tree, timeline, assembly code view, and source file view.  </p> <p>The app offers some unique features based on the binary analysis it performs and the IDE-like UI, such as easy navigation through disassembly, improved mapping to source lines, displaying the function control-flow graph, viewing of multiple functions at the same time, marking, searching, filtering and much more.  </p> <p>One of the app's key advantages is its performance. It loads traces fast and offers near-instant UI interaction, even for very large traces (over 10 GB ETL files). Most profile processing steps and algorithms are multi-threaded and don't block the UI.</p>"},{"location":"about.html#automatic-updates","title":"Automatic updates","text":"<p>The app includes an auto-update feature that notifies you when a new version is available and offers to download and install it.</p> <p>When the app starts, if a new version is available, an Update Available button is displayed in the status bar. Click on it to see the release notes and install the update.</p> <p></p>"},{"location":"about.html#download","title":"Download","text":"<p>Installers for the latest version:  </p> <ul> <li>x64 installer </li> <li>ARM64 installer</li> </ul> <p>Use the ARM64 installer if you have a machine with an ARM64 CPU, since it includes a native build of the app (no emulation), otherwise use the x64 installer. Note that the x64 app can open traces recorded on ARM64 machines and vice versa.  </p> <p>The installers for previous versions can be downloaded from the Releases page.  </p>"},{"location":"assembly-view.html","title":"Assembly view","text":""},{"location":"assembly-view.html#overview","title":"Overview","text":"<p>The Assembly view shows the function's machine code after disassembly, with syntax highlighting for x86_64/ARM64 architectures. The view is interactive, with the text being parsed into instructions with operands and higher-level constructs such as basic blocks and loops are recovered.</p> <p>The assembly instructions are augmented with annotations from the debug info files, such as source line numbers and inlinees, and combined with the execution time from the profile trace.</p> <p></p> <p>The view has four parts:  </p> <ul> <li>a main toolbar at the top, with general action buttons.</li> <li>a secondary toolbar underneath with profiling-specific info and action buttons.</li> <li>the text view with the function's assembly.</li> <li>several columns on the right side with the profiling data for each instruction. If CPU performance counters are found and loaded from the trace, the additional columns with metrics and the counters are appended after the last column.  </li> </ul> Note <p>When a function is opened in the Assembly view, its corresponding source file is automatically loaded in the Source File view and its control-flow graph (CFG) displayed in the Flow Graph view. </p>"},{"location":"assembly-view.html#assembly-text-view","title":"Assembly text view","text":"<p>The function assembly area can be treated a read-only code editor. Each line corresponds to one instruction, with the following values from left to right:</p> <p></p> <ul> <li>instruction number (line number in the text).</li> <li>optional marking icon for call targets.</li> <li>instruction virtual address (blue text).</li> <li>instruction opcode (bold text).</li> <li>an optional list of instruction operands.</li> <li>source line number associated with the instruction, obtained from the debug info (gray text).</li> <li>inlinees (inlined functions) associated with the instruction, obtained from the debug info (green text).</li> <li>profiling data columns, such as the execution time percentage and value.</li> </ul>"},{"location":"assembly-view.html#source-lines","title":"Source lines","text":"<p>The debug info files usually contain a mapping between the source line numbers and the instructions that were generated for those lines. The source line number is appended at the end of an instruction if available. Note that the accuracy of this mapping usually depends on the compiler optimization level, with higher levels being less accurate or even lacking the mapping for some instructions.  </p> <p>Hovering over the line number shows a tooltip with the name and path of the source file. To copy this info to clipboard, first click the line number, then press Ctrl+C.  </p> <p> </p> Note <p>Click on an instruction selects and brings into view its corresponding source line in the Source File view and its basic block in the Flow Graph view.  </p>"},{"location":"assembly-view.html#inlinees","title":"Inlinees","text":"<p>During function inlining, the compiler may preserve additional details about the function code being inlined so that the origin of an instruction can be saved into the debug info file. If available, the inlinees (inlined functions) are appended after the source line number, separated by the | letter.  </p> <p>For example, if the function contains a call chain like foo() -&gt; bar(), with both calls being inlined, the final instructions will record the fact that they originate from bar, which got inlined into foo, then foo inlined into the function.</p> <p>Hovering over the inlinee shows a tooltip with the call path (stack trace) of the functions inlined at that point. To copy this info to clipboard, first click the inlinee, then press Ctrl+C:  </p> <p></p>"},{"location":"assembly-view.html#basic-blocks","title":"Basic blocks","text":"<p>The assembly is parsed and analyzed to recover the function's control-flow graph (CFG), identifying basic blocks and loops. This information is used to split the assembly text into basic blocks and to display the Flow Graph view.</p> <p>The example below shows a subset of a function's basic blocks, with the corresponding control-flow graph part from the Flow Graph view. The basic blocks B3-B6 are marked on the left side as folding sections that can be collapsed/expanded with a click on the -/+ buttons.</p> <p>Notice how B5 is recognized for being a loop (the last instruction in the block jumps to the start of the block). The Flow Graph view uses a green arrow to mark loops - B4 is also the start block of a larger loop.</p> <p> </p> Note <p>Click on the target address of a jump/branch instructions marks the target instruction and its basic block in the Flow Graph view (uses a green background color by default).  </p> <p>Double-click on a target address operand jumps to the target instruction.</p>"},{"location":"assembly-view.html#profiling-annotations","title":"Profiling annotations","text":"<p>Instruction execution time is displayed and annotated on several parts of the assembly instructions, columns, basic blocks, and the control-flow graph using text, colors, and flame icons:</p> <p> </p> <ul> <li>the Time (%) column displays the instruction's execution time percentage relative to the total function execution time. The column style can be changed in the Assembly options.</li> <li>the Time (ms) column displays the instruction's execution time value. The time unit and column style can be changed in the Assembly options..</li> <li>the instruction background is colored based on its execution time - the slowest instruction has a red color, next slowest orange, then shades of yellow. The instruction location is also marked in the vertical text scrollbar.</li> <li>the three slowest instructions also have a flame icon in the Time (%) column using the same color coding.</li> </ul> <p> </p> <ul> <li>the basic blocks have a label with the block's execution time percentage, as a sum of its instruction's execution time (in the example above, the 55.73% label for B4). Hovering over the label shows the block's execution time value. The label background color uses the same color coding.</li> <li>the basic blocks in the Flow Graph view have below the same execution time percentage label as in the Assembly view, with the corresponding background color.</li> </ul> <p>When displaying a function for the first time, by default, the slowest instruction is selected and brought into view (this can be configured in the Assembly options). When the function is displayed subsequently, the last vertical scroll position is used instead.  </p> <p>To jump at any time to the slowest instruction, click the red  from the toolbar or the Ctrl+H keyboard shortcut.</p> Note <p>When multiple instructions are selected, the application status bar displays the sum of their execution time as a percentage and value. </p>"},{"location":"assembly-view.html#call-targets","title":"Call targets","text":"<p>Combining the parsed assembly and profiling information, call instructions are marked with their target(s) and have an arrow icon placed before the call opcode:  </p> <ul> <li>for direct calls (target is an function name/address), a black arrow is used.</li> <li>for indirect or virtual function calls (target is a register or memory operand), a green arrow is used.</li> </ul> <p>Hovering with the mouse over the arrow displays a list of target functions with details about their execution time. For example, the indirect call below at runtime has the std::_Random_device function as the only target:  </p> <p> </p> Note <p>Functions in the list have a right-click context menu with options to open the Assembly view, preview popup, and select the function in the other views.  </p> <p>Double-click/Ctrl+Return opens the Assembly view for the selected function. Combine these shortcuts with the Shift key to open the Assembly view in a new tab instead.</p> <p>Call instructions with a known target have the function name operand changed into a link (underlined, bold, blue text). The link makes it easy to navigate to the called function and the function history to go back to the caller.</p> <ul> <li>Double-click on the function name (or the Return key with the name selected) opens the called function in the same tab.  </li> <li>Shift+Double-Click (or Shift+Return) opens the called function in a new tab.  </li> <li>Alt+Return shows a preview popup with the called function's assembly. Press the Escape key to close the popup.  </li> <li>Hovering with the mouse over the function name also shows the preview popup.</li> <li>Use the shortcuts from the Opened function history section below to go back to the caller.</li> </ul> <p> </p>"},{"location":"assembly-view.html#opened-functions-history","title":"Opened functions history","text":"<p>When multiple functions were opened in the same tab, a history is kept per tab that makes it possible to go back/forward to a previous/next opened function. This is especially useful when navigating to a called function by double-clicking its name in the assembly, since it makes it easy to back to the caller.  </p> <ul> <li> <p>Click the Back button in the toolbar to navigate back to the previous function in the sequence (or press the Backspace key or the optional Back button on the mouse). The back button also has a menu that lists the previous functions.  </p> </li> <li> <p>Click the &gt; button in the toolbar to navigate to the next function in the sequence (or press the optional Forward button on the mouse).  </p> </li> </ul> <p> </p>"},{"location":"assembly-view.html#profiling-toolbar","title":"Profiling toolbar","text":"<p>The profiling toolbar provides more advanced functionality for identifying the slow parts of a function and filtering the profiling data based on a function instance and the threads the function executed on. The following sections document the main functionality.  </p>"},{"location":"assembly-view.html#profile","title":"Profile","text":"<p>Displays a menu with the slowest instructions, sorted by execution time in decreasing order.  </p> <ul> <li>Click on a menu entry to select and bring the instruction into view.  </li> <li>Click the  icon to jump to the slowest instruction in the function.  </li> <li>Click the +/- buttons to jump to the next/previous slowest instruction in the sequence.</li> </ul> <p> </p>"},{"location":"assembly-view.html#blocks","title":"Blocks","text":"<p>Displays a menu with the slowest blocks, sorted by execution time in decreasing order. Click on a menu entry to select and bring the start of the block into view.</p> <p> </p>"},{"location":"assembly-view.html#inlinees_1","title":"Inlinees","text":"<p>Displays a menu with the inlinees (inlined functions) that directly contribute slow instructions, sorted by the execution time of all instructions originating from a particular inlinee in decreasing order.  </p> <p> </p> <p>Click on a menu entry to select all instruction associated with the inlinee and brings the first one into view.  </p> <p>In the example above, most of the execution time (46.79%) is taken by instructions originating in the std::Rng_from... inlinee, while only 3.60% of execution time is from non-inlined instructions.</p>"},{"location":"assembly-view.html#instances","title":"Instances","text":"<p>By default the Assembly view displays the function profile accumulated across all instances the function (see the Flame Graph view documentation for more details about instances). Filtering the function profile based on an instance makes it possible to better understand when certain parts of the function dominate execution time (for example, based on a parameter passed by the caller, one part or another of the function executes).  </p> <p>The Instances menu displays the call paths leading to all instances of the function, with their execution time percentage and value. The menu entries use a compact form of the call path, where the first name is the caller, then it's caller, going up the call tree. Hover over an entry to display a tooltip with the complete call path.</p> <p> </p> <p>Click on a menu entry to filter the profile data to include only the selected instance, updating the execution time and all profiling annotations for instructions and basic blocks.  </p> <p>The menu entries are checkboxes which allows selecting multiple instances to be included. Use the All Instances entry or uncheck all instances to view the entire function profile again.</p>"},{"location":"assembly-view.html#threads","title":"Threads","text":"<p>By default the Assembly view displays the function profile accumulated across all threads the function executed on. Similar to instances, the profile can be filtered to consider only a subset of the threads. The Threads menu displays the threads IDs and their execution time percentage and value.  </p> <p>The menu entries are checkboxes which allows selecting multiple threads to be included. Use the All Threads entry or uncheck all instances to view the entire function profile again.</p> <p> </p> Note <p>Hovering with the mouse over the Assembly view tab displays a tooltip with details such as the total/self execution time, module and complete function name and if filtering is used, the name of the instances and threads included in the view. </p>"},{"location":"assembly-view.html#export","title":"Export","text":"<p>See the Exporting documentation section below.</p>"},{"location":"assembly-view.html#view","title":"View","text":"<p>Displays a menu which allows selecting the columns that should be displayed. The settings are saved across sessions when closing the application.</p> <p> </p>"},{"location":"assembly-view.html#view-interaction","title":"View interaction","text":"Toolbar Button Description Navigate back to a previously opened function or the next one in the sequence. See the Opened functions history section for more details. The dropdown displays a list of all basic blocks, selecting one jumps to it. Jumps to the previous/next basic block in the function. Displays a menu with options for viewing, setting and removing bookmarks associated with instructions. The up/down arrows jump to the previous/next bookmark. Displays a menu with options for removing markings from the selected or all instructions and operands. Opens the current function into a new preview popup. Displays the text search panel. Press the Escape key to reset the search and close the panel. Mouse shortcuts Action Description Hover Hovering over a call target function name displays a popup with the function's assembly. Pin or drag the popup to keep it open. Click Selects an instruction and also selects and brings into view its corresponding source line in the Source File view and its basic block in the Flow Graph view. Double-click If an instruction operand is selected, jumps to its definition.For jump/branch target address, jumps to the destination basic block.For call target function names, it opens the target function in the active tab. Shift+Double-click For call target function names, it opens the target function in a new tab. Right-click Shows the context menu for the selected instructions. Back If the mouse has an optional Back button, navigates back to the previous opened function in the tab. Forward If the mouse has an optional Forward button, Navigates forward to the next opened function in the tab. Keyboard shortcuts Keys Description Return If an instruction operand is selected, jumps to its definition.For jump/branch target address, jumps to the destination basic block.For call target function names, it opens the target function in the active tab. Shift+Return For call target function names, it opens the target function in a new tab. Alt+Return For direct call target function names, displays a preview popup with the target function's assembly. Backspace Navigates back to the previous opened function in the tab. Shift+Backspace Navigates forward to the next opened function in the tab. Ctrl+H Jumps to the slowest instruction. F2 Jumps to the next slowest instruction in the sequence. Shift+F2 Jumps to the next previous instruction in the sequence. Ctrl+C Copies to clipboard a HTML and Markdown table with a summary of the selected instructions. Ctrl+Shift+C Copies to clipboard the assembly text of the selected instructions. Ctrl+F Displays the text search panel, F3 Jumps to the next text search result. Shift+F3 Jumps to the previous text search result. Escape Resets text searching and closed the text search panel. Ctrl+B Add a bookmark associated with the selected instruction. Ctrl+Arrow Up Jumps to the previous basic block. Ctrl+Arrow Down Jumps to the next basic block. Page Up/DownArrow keys Scroll text view similar to other text editors."},{"location":"assembly-view.html#exporting","title":"Exporting","text":"<p>The function's assembly, combined with source line numbers and profiling annotations and execution time can be exported and saved into multiple formats, with the slowest instructions marked using a similar style as in the application:</p> <ul> <li>Excel worksheet (*.xlsx) </li> <li>HTML table (*.html) </li> <li>Markdown table (*.md) </li> </ul> <p>The Export menu in the toolbar also has an option to copy to clipboard the function's assembly as a HTML/Markdown table (pasting in an application supporting HTML - such as the Microsoft Office suite and online editors - will use the HTML version, code/text editors will use Markdown version instead).  </p> <p>The Ctrl+C keyboard shortcut copies to the clipboard only the selected instructions as a HTML/Markdown table.</p>"},{"location":"assembly-view.html#view-options","title":"View options","text":"<p>Click on the Gears icon in the top-right part of the view displays the options panel (alternatively, use the Assembly Code tab in the application Settings window.).  </p> <p>The tabs below describe each page of the options panel:  </p> GeneralAppearanceSource FileProfiling <p> </p> <p> </p> <p> </p> <p> </p>"},{"location":"assembly-view.html#column-options","title":"Column options","text":"<p>Right-click on a column, such as the Time columns, displays the option panel that allows changing the style and displayed information by the selected column. Each column can have a different style if desired.  </p> <p> </p>"},{"location":"assembly-view.html#documentation-in-progress","title":"Documentation in progress","text":"<ul> <li>View options</li> <li>Column options</li> </ul>"},{"location":"call-tree-panel.html","title":"Call Tree view","text":""},{"location":"call-tree-panel.html#overview","title":"Overview","text":"<p>The Call Tree view displays the tree derived from combining the call stacks associated with all profile samples in the trace, with each node representing a unique instance of a function. The node's children represents the callees (called functions) and the parent the caller function.  </p> <p>Total (inclusive) execution time is computed by accumulating the time of all samples that have the instance in the call stack. Self (exclusive) execution time is computed by subtracting the time spent in children nodes from the total execution time.</p> <p></p> <p>The view has two parts:  </p> <ul> <li>a toolbar at the top, with action buttons and the Search input box.</li> <li>the tree list view displaying the call tree.  </li> </ul> <p>A function node has the demangled (undecorated) function name, optionally prepended with the module name, the total execution time percentage (relative to the entire trace),  followed by total/self execution time and module columns.</p> Note <p>By default, several levels of the call path with the longest execution time is expanded. This can be configured in the Call Tree options panel.  </p> <p>The columns in all list views can be resized and reorder. The new layout is saved across sessions when closing the application.</p>"},{"location":"call-tree-panel.html#searching-functions","title":"Searching functions","text":"<p>Use the search input box in the toolbar to search for functions with a specific name using a case-insensitive substring search. Matching nodes and function names are marked and the up/down buttons showing on the right can be used to navigate between results. Press the Escape key to reset the search or the X button next to the input box.</p> <p></p>"},{"location":"call-tree-panel.html#view-interaction","title":"View interaction","text":"Toolbar Button Description Resets the view to the initial state. Expands several levels of the the slowest path in the call tree. If enabled, selecting a node also selects the associated function in the other profiling views. If enabled, selecting a node also displays the associated function in the Source file view, with the source lines annotated with profiling data. If enabled, display the module name before the function name in the nodes as module!function. Search box Search for nodes with a specific function name using a case-insensitive substring search. Press the Escape key to reset the search or the X button next to the input box. Mouse shortcuts Action Description Hover Hovering over a node briefly displays a preview popup with the complete function name and total/self execution times, similar to the Flame Graph view. Click Selects the function. If Sync is enabled in the toolbar, the function is selected in the other panels. Displays the associated function in the Source file view if Source is enabled in the toolbar. Ctrl+Double-click Opens the Assembly view of the selected function in the active tab. Ctrl+Shift+Double-click Opens the Assembly view of the selected function in a new tab. Right-click Shows the context menu for the selected function. Keyboard shortcuts Keys Description Ctrl+Return Opens the Assembly view of the selected function in the active tab. Ctrl+Shift+Return Opens the Assembly view of the selected function in a new tab. Alt+Return Opens a preview popup with the assembly of the selected function. Press the Escape key to close the popup.Multiple preview popups can be can be kept open at the same time. Alt+Shift+Return Opens a preview popup with the assembly of the selected function, with profile data filtered to include only the selected instance. Ctrl+C Copies to clipboard a HTML and Markdown table with a summary of the selected nodes. Ctrl+Shift+C Copies to clipboard the function names of the selected nodes. Ctrl+Alt+C Copies to clipboard the mangled/decorated function names of the selected nodes. Ctrl+= Expands several levels of the the slowest path of children of the selected function. Ctrl+- Collapses all children of the selected function. Ctrl+0Ctrl+R Resets the view to the initial state. Left-arrow key Collapses the children of the selected function and goes up one level. Right-arrow key Expands the children of the selected function and goes down one level. Right-click context menu"},{"location":"call-tree-panel.html#view-options","title":"View options","text":"<p>Click on the Gears icon in the top-right part of the view displays the options panel (alternatively, use the Call Tree tab in the application Settings window.).  </p> <p>The tabs below describe each page of the options panel:  </p> General <p> </p>"},{"location":"call-tree-panel.html#documentation-in-progress","title":"Documentation in progress","text":"<ul> <li>Marking nodes</li> <li>View options</li> </ul>"},{"location":"caller-panel.html","title":"Caller/Callee view","text":""},{"location":"caller-panel.html#overview","title":"Overview","text":"<p>The Caller/Callee view displays the active function's list of callers and callees (function being called by it). It can be viewed as an extension of the Call Tree view focused on a single function.     </p> <p></p> <p>The view has four parts:  </p> <ul> <li>a toolbar at the top, with action buttons and the Search input box.</li> <li>a function node representing the active function, with a 100% total execution time.</li> <li>the Calling tree list view displaying the callee functions.</li> <li>the Callers tree list view displaying the caller functions.</li> </ul> <p>A function node has the demangled (undecorated) function name, optionally prepended with the module name, the total execution time percentage (relative to the entire trace),  followed by total/self execution time and module columns.</p> Note <p>The columns in all list views can be resized and reorder. The new layout is saved across sessions when closing the application.</p> <p>By default all function instances are displayed combined, with the lists of callers and callees merged and execution time summed up. To display individual instances instead, disable Combine in the toolbar.</p> <p></p> <p>Expanding a caller function form the list goes up the call tree, showing a list of callers which forms a stack trace leading to the entry function. This makes it easy to see the call path that leads to a caller.</p> <p></p> <p>Expanding a callee function from the list goes down the call tree, showing a list of callees until a leaf node is reached. This makes it easy to see which functions are being called starting with a callee.</p> <p></p>"},{"location":"caller-panel.html#view-interaction","title":"View interaction","text":"Toolbar Button Description Navigates back to the previous viewed function in the view. If enabled, selecting a node also selects the associated function in the other profiling views. If enabled, selecting a node also displays the associated function in the Source file view, with the source lines annotated with profiling data. If enabled, all function instances are displayed combined, with the lists of callers and callees merged and execution time summed up. If enabled, display the module name before the function name in the nodes as module!function. Search box Search for nodes with a specific function name using a case-insensitive substring search. Press the Escape key to reset the search or the X button next to the input box. Mouse shortcuts Action Description Hover Hovering over a node briefly displays a preview popup with the complete function name and total/self execution times, similar to the Flame Graph view. Click Selects the function. If Sync is enabled in the toolbar, the function is selected in the other panels. Displays the associated function in the Source file view if Source is enabled in the toolbar. Double-click Switches the view to display the selected function instead. Ctrl+Double-click Opens the Assembly view of the selected function in the active tab. Ctrl+Shift+Double-click Opens the Assembly view of the selected function in a new tab. Right-click Shows the context menu for the selected function. Back If the mouse has an optional Back button, navigates back to the previous viewed function in the view. Keyboard shortcuts Keys Description Return Switches the view to display the selected function instead. Ctrl+Return Opens the Assembly view of the selected function in the active tab. Ctrl+Shift+Return Opens the Assembly view of the selected function in a new tab. Alt+Return Opens a preview popup with the assembly of the selected function. Press the Escape key to close the popup.Multiple preview popups can be can be kept open at the same time. Alt+Shift+Return Opens a preview popup with the assembly of the selected function, with profile data filtered to include only the selected instance. Ctrl+C Copies to clipboard a HTML and Markdown table with a summary of the selected nodes. Ctrl+Shift+C Copies to clipboard the function names of the selected nodes. Ctrl+Alt+C Copies to clipboard the mangled/decorated function names of the selected nodes. Backspace navigates back to the previous viewed function in the view. Ctrl+= Expands several levels of the the slowest path of children of the selected function. Ctrl+- Collapses all children of the selected function. Ctrl+0Ctrl+R Resets the view to the initial state. Left-arrow key Collapses the children of the selected function and goes up one level. Right-arrow key Expands the children of the selected function and goes down one level. Right-click context menu"},{"location":"caller-panel.html#view-options","title":"View options","text":"<p>Click on the Gears icon in the top-right part of the view displays the options panel (alternatively, use the Caller/Callee tab in the application Settings window.).  </p> <p>The tabs below describe each page of the options panel:  </p> General <p> </p>"},{"location":"caller-panel.html#documentation-in-progress","title":"Documentation in progress","text":"<ul> <li>Marking nodes</li> <li>View options</li> </ul>"},{"location":"demos.html","title":"Video Demos","text":""},{"location":"demos.html#ui-overview-loading-and-navigating-a-trace","title":"UI overview, loading and navigating a trace","text":""},{"location":"flame-graph-panel.html","title":"Flame Graph view","text":"Introduction to flame graphs <p>A flame graph is an alternative, more compact way of viewing a call tree. In this view, function instances are nodes with a size proportional to the time spent relative to the caller (parent) function and makes it easier to identify the portions of the app that take most of the time.  </p> <p>Nodes are sorted in the horizontal direction based on decreasing time relative to their parent node, while the ordering in the vertical direction forms a stack trace (a path in the call tree). The function taking the most time in the application is then found in the leftmost, bottom part of the Flame graph.</p> <p> In the example above, the main function is considered the process entry point, calling foo and bar, with foo taking 60% of the time and bar 40%. Function foo spends a part of its total (inclusive) time in the calls to baz and etc1, while the rest is self (exclusive) time, meaning instructions part of foo which are not calls to other functions.  </p> <p>Note that there are two instances of the function baz with different execution time, each with a unique path to it in the call tree starting from main (all other functions have a single instance). You can see the time of each instance by hovering with the mouse over it or in the Details panel after it's selected.</p> <p>The following links provide an introduction to the flame graph visualization concept, its history, and how it's being used across the industry for performance investigations.  </p> <ul> <li>CPU Flame Graphs (brendangregg.com)</li> <li>Visualizing Performance - The Developers\u2019 Guide to Flame Graphs (youtube.com)</li> </ul>"},{"location":"flame-graph-panel.html#overview","title":"Overview","text":"<p>The Flame graph view is the main means of identifying the parts of the application where most time is spent. </p> <p></p> <p>The view has three parts:</p> <ul> <li>a toolbar at the top, with action buttons and the Search input box.</li> <li>the interactive flame graph itself.</li> <li>the Details panel on the right side. The panel displays detailed info about the selected node(s), and its visibility can be toggled using the Details button in the toolbar.</li> </ul>"},{"location":"flame-graph-panel.html#flame-graph-nodes","title":"Flame graph nodes","text":"<p>The flame graph displays nodes representing functions stacked top to bottom according to the call tree paths forming the stack traces. Each node is a unique instance of a function \u2014 a function having multiple instances means there are several paths in the call tree that call the function. \u00a0</p> <p>Each node has the demangled (undecorated) function name, optionally prepended with the module name, followed by the execution time percentage relative to the entire trace and the execution time. \u00a0</p> <p>By default, the nodes are color-coded based on the module names to which the functions belong. Nodes for functions executing in the kernel/managed context are marked with a different text and border color (blue by default). The displayed text fields and colors can be customized in the Flame graph options. \u00a0</p> Note <p>When the called function nodes are too small to be visible in the view, they are collapsed under a placeholder node rendered with a hatch pattern. Placeholder nodes are expanded into individual nodes when zooming in the view. \u00a0</p>"},{"location":"flame-graph-panel.html#navigating-the-flame-graph","title":"Navigating the Flame graph","text":"<p>A double-click on a node expands it to cover the entire view and may expand the collapsed nodes. For example, the called nodes become visible after double-clicking the node hovered in the screenshot above. </p> <p>Expanding a node can be repeated to go deeper down the call path. The Back button in the toolbar (or Backspace key/Back mouse button) undoes the operation and returns the view to its previous state. \u00a0</p> <p></p> Note <p>In the screenshot above, the nodes starting with ntoskrnl.exe!KiPageFault use a different style to mark code executing in kernel mode. The user mode and kernel mode call stacks are automatically combined.</p>"},{"location":"flame-graph-panel.html#changing-the-root-node","title":"Changing the root node","text":"<p>It can be useful to view only a subregion of the Flame graph. By changing the root node, only nodes for functions starting with the new root are displayed and execution time percentages are computed relative to the new root starting at 100%.</p> <p>To change the root node, from the right-click context menu, select Set Function as Root (alternatively, use the Alt+Double-click shortcut). After the switch, the toolbar displays the name of the current root node. Setting a new root node can be repeated in the new view.</p> <p>To remove the root node and view the entire Flame graph, click the X button next to its name in the toolbar. If multiple nested root nodes were set, removing the current node activates the previous one.</p> <p></p>"},{"location":"flame-graph-panel.html#searching-functions","title":"Searching functions","text":"<p>Use the search input box in the toolbar to search for functions with a specific name using a case-insensitive substring search. Matching nodes and function names are marked and the up/down buttons showing on the right can be used to navigate between results. Press the Escape key to reset the search or the X button next to the input box.</p> <p></p>"},{"location":"flame-graph-panel.html#view-interaction","title":"View interaction","text":"Toolbar Button Description Undoes the previous action, such as expanding a node or changing the root node. Resets the view to it's original state, displaying the entire Flame graph. Zooms out the view around the center point. Zooms in the view around the center point. If enabled, selecting a node also selects the associated function in the other profiling views. If enabled, selecting a node also displays the associated function in the Source file view, with the source lines annotated with profiling data. If enabled, display the module name before the function name in the nodes as module!function. If enabled, display the Details panel on the right side of the Flame graph view. Search box Search for nodes with a specific function name using a case-insensitive substring search. Press the Escape key to reset the search or the X button next to the input box. Mouse shortcuts Action Description Hover Hovering over a node briefly displays a preview popup with the complete function name and total/self execution times. Clicking the Pin button or dragging the popup expands it into a panel equivalent to the Details panel. Multiple such panels can be kept open at the same time. Click Selects a node and deselects any previously selected nodes. The Details panel is updated and, if Sync is enabled in the toolbar, the function is selected in the other panels. Displays the associated function in the Source file view if Source is enabled in the toolbar. Clicking an empty part of the view deselects all nodes. Ctrl+Click Selects the pointed node and keeps the previously selected nodes (append). The Details panel is updated to display a combined view of all selected nodes. Shift+Click When a node is selected, it expands the selection to include all nodes in the call stack between the pointed node and the selected one. The Details panel is updated to display a combined view of all selected nodes. Double-click Expands (zooms-in) the pointed node to cover the view's width, adjusting child node widths accordingly. Ctrl+Double-click Opens the Assembly view of the selected function in the active tab. Ctrl+Shift+Double-click Opens the Assembly view of the selected function in a new tab. Alt+Double-click Sets the selected node as the root node of the Flame graph. Back If the mouse has an optional Back button, this undoes the previous action, such as expanding a node (double-click) or changing the root node. An alternative is pressing the Backspace key or the Back button in the toolbar. Right-click Shows the context menu for the selected nodes. Click+Drag If the flame graph is larger than the view, clicking on and dragging an empty part of the view moves the view in the direction of the mouse. Scroll wheel Scrolls the view vertically if the flame graph is larger than the view. Shift+Scroll wheel Scrolls the view horizontally if the flame graph is larger than the view. Ctrl+Scroll wheel Zooms in or out the view around the mouse pointer position. Click+Scroll wheel Zooms in or out the view around the mouse pointer position. <p>Note</p> <p>When multiple nodes are selected, the application status bar displays the sum of their execution time as a percentage and value. </p> Keyboard shortcuts Keys Description Return Expands (zooms-in) the pointed node to cover the view's width, adjusting child node widths accordingly. Ctrl+Return Opens the Assembly view of the selected function in the active tab. Ctrl+Shift+Return Opens the Assembly view of the selected function in a new tab. Alt+Return Opens a preview popup with the assembly of the selected function. Press the Escape key to close the popup.Multiple preview popups can be can be kept open at the same time. Alt+Shift+Return Opens a preview popup with the assembly of the selected function, with profile data filtered to include only the selected instance. Ctrl+C Copies to clipboard a HTML and Markdown table with a summary of the selected nodes. Ctrl+Shift+C Copies to clipboard the function names of the selected nodes. Ctrl+Alt+C Copies to clipboard the mangled/decorated function names of the selected nodes. Backspace Undoes the previous action, such as expanding a node (double-click) or changing the root node. Ctrl+= Zooms in the view around the center point. Ctrl+- Zooms out the view around the center point. Ctrl+0Ctrl+R Resets the view to the initial state. Arrow keys Scrolls the view in the horizontal and vertical directions if the flame graph is larger than the view. Right-click context menu <p> </p>"},{"location":"flame-graph-panel.html#details-panel","title":"Details panel","text":"<p>The Details panel shows extended information about the selected node(s) in the Flame graph. It provides a quick overview of the slowest functions and modules being called directly or through other functions starting with the selection. \u00a0</p> <p>The top shows the Total (inclusive) execution time and Self (exclusive) execution time values for the selected node (function instance). The right side shows the index of the chosen instance, among all instances, with the slowest instance having the lowest index. Use the left/right arrow buttons to switch to the previous/next function instance. \u00a0</p> Note <p>Functions in the lists have a right-click context menu with options to open the Assembly view, preview popup, and select the function in the other views.  </p> <p>Double-click/Ctrl+Return opens the Assembly view for the selected function. Combine these shortcuts with the Shift key to open the Assembly view in a new tab instead. Hovering with the mouse over a function opens a preview popup with the function's assembly.    </p> <p>When multiple functions are selected, the application status bar displays the sum of their execution time as a percentage and value.</p> <p>The information displayed in the tabs below is for the selected function instance only, except the Info tab which displays statistics for all instances instead.  </p> InfoStackFunctionsModulesCategoriesInstances <p> </p> <p>The Info tab displays details and statistics about all instances of the selected funcion node.  </p> Section Description Instances Displays total execution time (sum), average, and median across all function instances, as a total/self execution time percentage relative to the entire trace and execution time value. Histogram The histogram displays the time distribution across all function instances. Instances with similar times are grouped, and the number of instances in each group is shown above, with more details when hovering over a group with the mouse.Clicking on a group selects the first node from the group in the Flame graph view. The Total/Self radio buttons switch between using the total time or self time for the histogram.In the above example, there are 3 instances of function genString, one with an execution time of ~1.5ms and two, binned together, with ~1sec each. The time of the selected instance is marked with a green arrow, and the average/median times are indicated by red/blue dotted lines. Threads Displays the list of threads on which all function instances execute, with each thread's total/self execution time percentage and execution time value.Right-clicking a thread shows a context menu with options to open the Assembly view with profile data filtered to include only the selected thread and multiple options for changing the thread filtering for the entire trace.Double-clicking a thread filters the entire trace to show only code executing on that thread. Module Displays the name of the module to which the function belongs. Shortcut buttons on the right side: Marks all function nodes belonging to the module with a color. Copies to clipboard the module name. Function Displays the complete function name, followed by the execution context as U/K/M standing for User/Kernel/Managed mode. Shortcut buttons on the right side: Opens a preview popup with the function's assembly. Opens the function's Assembly view in a new tab. Marks all function nodes with a color. Copies to clipboard the function name. <p> </p> <p>The Stack tab displays the call stack (stack trace) leading to the selected function instance node.</p> <p> </p> <p>The Functions tab lists the slowest functions being called directly or through other functions, starting with the selected function instance node. By default, the list is sorted by self (exclusive) time in descending order. The Flame graph options can change the sorting to consider total (inclusive) time instead.</p> <p> </p> <p>The Modules tab is similar to the Functions tab, with the difference that functions are first grouped by the module they belong to, and the execution time per module is also displayed. Selecting a module shows the list of the slowest functions.</p> <p> </p> <p>The Categories tab is similar to the Functions tab, with the difference that functions are first grouped by the category they belong to, and the execution time per category is also displayed. Selecting a category shows the list of the slowest functions.Right-click on a category shows options to export a report as a HTML/Markdown file and copy the report to clipboard.</p> <p> </p> <p>The Instances tab lists all instances of the function, sorted by total (inclusive) execution time.</p>"},{"location":"flame-graph-panel.html#view-options","title":"View options","text":"<p>Click on the Gears icon in the top-right part of the view displays the options panel (alternatively, use the Flame Graph tab in the application Settings window.).  </p> <p>The tabs below describe each page of the options panel:  </p> GeneralAppearanceDetails Panel <p> </p> <p> </p> <p> </p>"},{"location":"flame-graph-panel.html#documentation-in-progress","title":"Documentation in progress","text":"<ul> <li>Marking nodes</li> <li>View options</li> </ul>"},{"location":"flow-graph-panel.html","title":"Flow Graph view","text":""},{"location":"flow-graph-panel.html#overview","title":"Overview","text":"<p>The Flow Graph view displays the control-flow graph (CFG) of the function viewed in the active assembly view.  </p> <p>The function CFG makes it easier to see the structure of a function and control-flow created by jumps, branches and loops. The slowest basic blocks are annotated with profiling information.  </p> <p></p> <p>The view has two parts:  </p> <ul> <li>a main toolbar at the top, with general action buttons.</li> <li>an interactive CFG area, supporting zooming and panning.</li> </ul> <p>Each basic block is represented by a rectangle, with the block number as the label. An edge between two blocks means the source and destination block are connected either through a jump/branch or fall-through code.  </p>"},{"location":"flow-graph-panel.html#color-coding","title":"Color coding","text":"<p>Different colors of the blocks and edges are used to help identify control flow. The used colors can be customized in the Flow Graph options.</p> <p>Block border colors coding (default colors):  </p> <ul> <li>blue: blocks ends with a branch instruction.</li> <li>green: block is the target of a loop back-edge (it's a loop header).</li> <li>red: block ends with a return instruction (it's a function exit),</li> </ul> <p>Edge color coding (default colors):  </p> <ul> <li>blue: target block is a branch target (branch in the source block jumps to it).</li> <li>green: loop back-edge, target block is a loop header (start of a  loop).</li> <li>red: target block is a function exit block.</li> <li>dotted: target block is the immediate dominator of the source block.</li> </ul>"},{"location":"flow-graph-panel.html#selection-sync","title":"Selection sync","text":"<p>When a block is selected, the corresponding instructions are also selected in the Assembly view, like in the example below where B5 is selected. Notice that B5 is a single-block, nested loop, while B4 is the loop header block of a larger loop including B5.  </p> <p> </p>"},{"location":"flow-graph-panel.html#profiling-annotations","title":"Profiling annotations","text":"<p>Blocks with a significant execution time are marked by using bold text for the block number and changing their background color (same color coding as in the Assembly view).  </p> <p>A label is displayed underneath with the block's execution time percentage, relative to the function's total execution time.</p>"},{"location":"flow-graph-panel.html#view-interaction","title":"View interaction","text":"Toolbar Button Description Resets the view to it's original state. Zooms out the view around the center point. Zooms in the view around the center point. Resizes the view so that the width of the graph matches the available horizontal area. Resizes the view so that the entire graph is visible. Displays a menu with options for clearing marker for the selected block or all blocks. Mouse shortcuts Action Description Hover Hovering over a block displays a preview popup with the corresponding instructions from the Assembly view. Click Selects a block and also selects the corresponding instructions the Assembly view (can be configured in the Flow Graph options) Right-click Shows the context menu for the selected block. Click+Drag Clicking on and dragging an empty part of the view moves the view in the direction of the mouse. Scroll wheel Scrolls the view vertically if graph is larger than the view. Ctrl+Scroll wheel Zooms in or out the view around the mouse pointer position. Keyboard shortcuts Keys Description Ctrl+= Zooms in the view around the center point. Ctrl+- Zooms out the view around the center point. Ctrl+0Ctrl+R Resets the view to the initial state. Ctrl+W Resizes the view so that the width of the graph matches the available horizontal area. Ctrl+A Resizes the view so that the entire graph is visible. Arrow keys Scrolls the view in the horizontal and vertical directions if the flame graph is larger than the view. Right-click context menu"},{"location":"flow-graph-panel.html#view-options","title":"View options","text":"<p>Click on the Gears icon in the top-right part of the view displays the options panel (alternatively, use the Flow Graph tab in the application Settings window.).  </p> <p>The tabs below describe each page of the options panel:  </p> GeneralAppearance <p> </p> <p></p>"},{"location":"flow-graph-panel.html#documentation-in-progress","title":"Documentation in progress","text":"<ul> <li>View options</li> </ul>"},{"location":"intro.html","title":"Introduction","text":""},{"location":"intro.html#getting-started","title":"Getting started","text":"<ul> <li>About: provides an introduction to the application.</li> <li>Profiling UI overview: provides an overview of the main profiling views.  </li> <li>Video Demos: has several screen recording videos presenting the UI and features.  </li> </ul>"},{"location":"intro.html#trace-loading-and-recording","title":"Trace loading and recording","text":"<ul> <li>Loading a trace </li> <li>Recording a trace </li> <li>Trace overview report </li> </ul>"},{"location":"intro.html#profiling-views","title":"Profiling views","text":"<p>Trace profiling views:  </p> <ul> <li>Summary view </li> <li>Flame Graph view </li> <li>Timeline view </li> <li>Call Tree view </li> <li>Caller/Callee view </li> </ul> <p>Function profiling views (focus on an individual function):  </p> <ul> <li>Assembly view </li> <li>Source File view </li> <li>Flow Graph view </li> </ul> Note <p>The documentation is currently being worked on. Several pages need to be completed or are currently missing (the Additional functionality section).</p>"},{"location":"intro.html#documentation-tips","title":"Documentation tips","text":"<p>Most app views have a question mark button in the upper-right corner. Click it to view the panel's documentation page in the app's built-in Help panel.  </p> <p>Images</p> <p>Click on an image to enlarge it. Depending on where the documentation is viewed:  </p> <ul> <li>the image is opened in a new tab if viewed in a browser.</li> <li>the image is opened in a preview popup if viewed from the app's built-in Help panel. To close the preview popup, click again on the image (either in the preview popup or in the page) or press the Escape key.</li> </ul> <p>Videos</p> <p>Click on a video's full-screen button in the bottom-right corner to enlarge it. To restore to default size, click again on the full-screen button or press the Escape key.</p>"},{"location":"profiling-ui.html","title":"Profiling UI overview","text":""},{"location":"profiling-ui.html#trace-views","title":"Trace views","text":"<p>Once a trace is loaded, the Summary, Flame Graph, and Timeline views provide a high-level overview of the profiled application's slowest parts. These views allow you to identify the functions where most time is spent and when they execute.</p> <p></p> <ul> <li>Summary view: displays all the functions with profiling data, which are sorted by default based on their exclusive (self) duration. The left side of the panel lists the modules (binaries) with profiling data, sorted based on the total time used by the functions part of the module.</li> <li>Flame Graph view: displays an interacitve flame graph view of the call tree. The right side of the panel shows detailed information about the selected node(s).</li> <li>Timeline view: displays the thread activity during the entire duration of the trace and allows filtering of the displayed profiling data to specific threads and time ranges.</li> <li>Call Tree view: displays nested call tree view showing the function call sequence for the entire trace.</li> <li>Caller/Callee view: displays for the function selected in the Summary view the list of callers (functions calling the selected one) and callees (functions called by the selected one).</li> </ul>"},{"location":"profiling-ui.html#single-function-views","title":"Single function views","text":"<p>Open a function to display the Assembly, Source file, and Flow graph views and see which parts take the most time (a double-click or the Return key in any of the views opens the function's Assembly view).</p> <p></p> <ul> <li>Assembly view: displays the function's assembly code, where each instruction is annotated with the corresponding source line number and inlining information. The right side shows the time percentage (relative to the function's time) and time taken by each instruction. The slowest instructions are marked with colors and flame icons. Clicking on an instruction selects its corresponding source line in the Source File view.</li> <li>Source File view: displays the function's source file and, optionally, the assembly code generated for each line. The right side shows the time percentage (relative to the function's time) and time taken by each line. The slowest lines are marked with colors and flame icons. Clicking on a line selects the corresponding instructions in the Assembly view.</li> <li>Flow Graph view: displays the function's control-flow graph, constructed by analyzing the assembly code and forming basic blocks (a sequence of instructions that starts with jump targets and ends with jumps or branch instructions). The slowest blocks are marked with colors and labeled with the time percentage (relative to the function's time). Blocks forming a loop are marked with a green arrow.</li> </ul>"},{"location":"source-panel.html","title":"Source File view","text":""},{"location":"source-panel.html#overview","title":"Overview","text":"<p>The Source File view displays the source code of the function viewed in the active assembly view. When a function is opened in the Assembly view, using the debug info file, its corresponding source file is identified, downloaded if needed, and loaded in the view, with source lines annotated with profiling information.  </p> <p></p>"},{"location":"source-panel.html#finding-source-files","title":"Finding source files","text":"<p>Locating the source file to load is done with the help of the debug info file, which usually records the file path associated with each function. In some cases, additional information is available to locate and download source files from remote locations and Source Servers.</p> <p>Steps for locating a source file:  </p> <ul> <li>check the local file system using the debug info file path. This check handles the case of the trace being opened on the same machine where the application was built or the source is available at the exact file system location.</li> <li>check and download the source file from a Source Server if the debug info file has additional remote file mapping information such as SourceLink or built-in commands for retrieving the file. In case authentication is needed, it can be configured in the Load Profile Trace window options.</li> <li>if neither of the above steps works, ask the user to manually locate the source file on a local file system or network share. The mapping between the expected and actual source file locations is saved across sessions when the application is closed. See the Mapping source files section below for more details.</li> </ul> <p>Once a source file is available, its signature is computed and compared with the expected signature from the debug info file. If it does not match, it means the source file was modified between the time the application was built and the trace being loaded, and the file will be rejected (a future version will allow ignoring such a mismatch). \u00a0</p>"},{"location":"source-panel.html#missing-source-files","title":"Missing source files","text":"<p>If a source file cannot be found, the app will show a dialog asking if it should continue trying to locate the same source file in the future; if not, the file is added to an exclusion list saved across sessions. \u00a0</p> <p>The same dialog also has the option to stop asking to locate source files manually during the current session altogether.</p> <p>Use the Reset button in the toolbar to remove the exclusion from the current file, all files or clear all exclusion and mapping settings. The Source File options displays editable lists of exclusions and mappings. \u00a0</p>"},{"location":"source-panel.html#mapping-source-file-locations","title":"Mapping source file locations","text":"<p>When a local source file is manually selected, a mapping between the original debug file path and the local file path is created. This mapping is used to locate the same source file later and to help locate other source files found in the same or a nearby location. \u00a0</p> <p>For example, if the original path from the build machine was saved in the debug info file as: <code>C:\\server\\src\\subdir\\source.cpp</code></p> <p>and the selected local file path is: <code>D:\\local\\project\\src\\subdir\\source.cpp</code></p> <p>several path mappings are created between the original and local directories such as: <code>C:\\build\\src\\subdir  -&gt;  D:\\local\\project\\src\\subdir</code> <code>C:\\build\\src  -&gt;  D:\\local\\project\\src</code> <code>C:\\build  -&gt;  D:\\local\\project</code> </p> <p>When another source file is searched, starting with the debug info path, the mappings are used to locate it in the local file system. The mapping also works with intermediate directories between the file name and the mapped directories. For example:</p> <p><code>C:\\build\\src\\other\\nested\\subdir\\file.cpp</code> found as <code>D:\\local\\project\\src\\other\\nested\\subdir\\file.cpp</code></p>"},{"location":"source-panel.html#source-code-view","title":"Source code view","text":"<p>The view is similar to the Assembly view, having four parts:  </p> <ul> <li>a main toolbar at the top, with general action buttons.</li> <li>a secondary toolbar underneath with profiling-specific info and action buttons.</li> <li>the text view with the source file.</li> <li>several columns on the right side with the profiling data for each source line. If CPU performance counters are found and loaded from the trace, the additional columns with metrics and the counters are appended after the last column.  </li> </ul> <p>Each line corresponds to one source line, with the following values and buttons from left to right:</p> <p></p> <ul> <li>source line number.</li> <li>optional ASM section expand/collapse +/- button.</li> <li>optional marking icons for statements and call targets.</li> <li>source line text.</li> <li>profiling data columns, such as the execution time percentage and value.</li> </ul>"},{"location":"source-panel.html#selection-sync","title":"Selection sync","text":"<p>When a source line is selected, if Sync is enabled in the toolbar, the associated instructions are also selected in the Assembly view.  </p> <p>In the example below, the start of the loop on line 21 is selected, with the instructions forming the loop header selected in the Assembly view; the selected instructions corresponding to the loop back-edge are not visible in the screenshot.</p> <p></p> <p>Vice versa, selecting an instruction in the Assembly view also selects the corresponding source line.</p>"},{"location":"source-panel.html#profiling-annotations","title":"Profiling annotations","text":"<p>Similar to the Assembly view, execution time is displayed and annotated on several parts of the source lines and columns using text, colors, and flame icons:</p> <ul> <li>the Time (%) column displays the source line's execution time percentage relative to the total function execution time. The column style can be changed in the Source File options.</li> <li>the Time (ms) column displays the source files's execution time value. The time unit and column style can be changed in the Source File options.</li> <li>the source line background is colored based on its execution time - the slowest source line has a red color, next slowest orange, then shades of yellow. The line is also marked in the vertical text scrollbar.</li> <li>the three slowest source lines also have a flame icon in the Time (%) column using the same color coding.</li> </ul> <p>When loading a source file, the slowest source line is selected and brought into view by default (this can be configured in the Source File options).  </p> <p>To jump at any time to the slowest source line, click the  icon from the toolbar or the Ctrl+H keyboard shortcut.  </p> Note <p>When multiple source lines are selected, the application status bar displays the sum of their execution time as a percentage and value. </p>"},{"location":"source-panel.html#assembly-code-sections","title":"Assembly code sections","text":"<p>IIf enabled, each source line is followed by a section with the assembly instructions generated for it based on the debug info file. By default, the sections are collapsed and can be expanded by pressing the + button on the left of the source lines. Each line of assembly has the same profiling annotations as the source lines.</p> <p></p> <p>To view the assembly sections, toggle the ASM button in the toolbar (enabled by default). The Expand and Collapse buttons in the toolbar can be used to toggle the visibility of all assembly sections together.</p>"},{"location":"source-panel.html#call-targets","title":"Call targets","text":"<p>Combining the parsed assembly code and profiling information, source lines with associated call instructions are marked with their target(s) and have an arrow icon placed before the call opcode:  </p> <ul> <li>for direct calls (target is an function name/address), a black arrow is used.</li> <li>for indirect or virtual function calls (target is a register or memory operand), a green arrow is used.</li> </ul> <p>Hovering with the mouse over the arrow displays a list of target functions with details about their execution time. Note that the list may contain a function that doesn't appear directly in the source code due to function inlining, like in the example below.</p> <p></p>"},{"location":"source-panel.html#source-code-outline","title":"Source code outline","text":"<p>On load, source files are parsed using tree-sitter in order to build an Abstract Syntax Tree (AST). The AST identifies and marks some of the high-level parts of the function's source code, such as if/else/switch statements, for/do/while loops, and call expressions. The supported languages are C, C++, C#, and Rust.  </p> <p>For each such statement and expression, the execution time is computed by accumulating the time of each source line found in its range. This makes it easier, for example, to see the amount of time spent in an entire loop (or nested loop), the then/else branch of an if statement, or a specific case of a switch statement.  </p> <p>Source lines that start a statement are marked with an icon based on the statement kind on the left side and in the execution time percentage column (configurable in the Source File options).  </p> <p>Hovering with the mouse over a statement marking shows its execution time as a percentage and value relative to the function time and highlights the source lines part of the statement.  </p> <p></p> <p>Use the Outline button from the profiling toolbar displays to display a menu summarizing the nested statements and their execution time. Each menu entry has the source line number, statement kind icon, statement start source code, execution time percentage, and value. \u00a0</p> <p>Click on a menu entry to jump to the statement start. Hovering with the mouse over a menu entry highlights the source lines part of the statement.</p> <p>The example blow shows the outline of a function having three nested loops, with if/else statements in the last level loop.</p> <p></p>"},{"location":"source-panel.html#profiling-toolbar","title":"Profiling toolbar","text":"<p>The profiling toolbar provides more advanced functionality for identifying the slow parts of a function and filtering the profiling data based on a function instance and the threads the function executed on. The following sections document the main functionality.  </p>"},{"location":"source-panel.html#profile","title":"Profile","text":"<p>Displays a menu with the slowest source lines, sorted by execution time in decreasing order. Even if assembly sections are enabled, instructions are not included.  </p> <ul> <li>Click on a menu entry to select and bring the source line into view.  </li> <li>Click the  icon to jump to the slowest source line in the function.  </li> <li>Click the +/- buttons to jump to the next/previous slowest source line in the sequence.</li> </ul> <p> </p>"},{"location":"source-panel.html#outline","title":"Outline","text":"<p>Displays a menu that summarizes  the nested statements and their execution time. See the Source code outline section above for documentation.</p>"},{"location":"source-panel.html#instances","title":"Instances","text":"<p>The Instances menu displays the call paths leading to all instances of the function, with their execution time percentage and value, similar to the Assembly view feature.  </p> <p>See the Profiling toolbar: Instances section in the Assembly view page for details.</p>"},{"location":"source-panel.html#threads","title":"Threads","text":"<p>The Threads menu displays the threads IDs and their execution time percentage and value, similar to the Assembly view feature.  </p> <p>See the Profiling toolbar: Threads section in the Assembly view page for details.</p>"},{"location":"source-panel.html#view-interaction","title":"View interaction","text":"Toolbar Button Description Shows an Open File dialog to select a local source file to load in the view. Displays a menu with options for resetting exclusions set on the current source file or all source files. Displays a menu with options for copying the source file path to clipboard, navigating to the source file in File Explorer and opening the source file in the default editor. If enabled, selecting a source lines also selects all associated instructions in the Assembly view. If enabled, inlinees (inlined functions) debug info is used to load the deepest inlinee function and its source file instead of the current function in the Assembly view. If enabled, each source line is followed by a section with the assembly instructions generated for it, based on the debug info file. See Assembly code sections above for details. Hides (collapses) all assembly sections. Shows (expands) all assembly sections. Opens the current source file into a new preview popup."},{"location":"source-panel.html#exporting","title":"Exporting","text":"<p>The function's source code, combined with profiling annotations and execution time can be exported and saved into multiple formats, with the slowest source lines marked using a similar style as in the application:</p> <ul> <li>Excel worksheet (*.xlsx) </li> <li>HTML table (*.html) </li> <li>Markdown table (*.md) </li> </ul> <p>The Export menu in the toolbar also has an option to copy to clipboard the function's source code as a HTML/Markdown table (pasting in an application supporting HTML - such as the Microsoft Office suite and online editors - will use the HTML version, code/text editors will use Markdown version instead).  </p> <p>The Ctrl+C keyboard shortcut copies to the clipboard only the selected source lines as a HTML/Markdown table.</p>"},{"location":"source-panel.html#view-options","title":"View options","text":"<p>Click on the Gears icon in the top-right part of the view displays the options panel (alternatively, use the Source File tab in the application Settings window.).  </p> <p>The tabs below describe each page of the options panel:  </p> GeneralSource FilesProfiling <p> </p> <p> </p> <p> </p>"},{"location":"source-panel.html#more-documentation-in-progress","title":"More documentation in progress","text":"<ul> <li>inlinees</li> <li>options panel</li> </ul>"},{"location":"summary-panel.html","title":"Summary view","text":""},{"location":"summary-panel.html#overview","title":"Overview","text":"<p>The summary view displays all modules (binaries) and functions that have profile data in the trace, making it easy to identify the functions where most time is spent \u2014 otherwise known as application hotspots.</p> <p></p> <p>The view has three parts:  </p> <ul> <li>a toolbar at the top, with action buttons and the Search input box.</li> <li>the Modules panel on the left side. Its visibility can be toggled using the Modules button in the toolbar.</li> <li>the list of functions from either the entire trace or filtered to display only the functions part of a single module. By default the list is sorted by self (exclusive) time in descending order.</li> </ul>"},{"location":"summary-panel.html#modules-list","title":"Modules list","text":"<p>The modules list has an entry for each module with profile data and starts with an All entry representing all modules combined. Each entry has the module name, execution time percentage relative to the entire trace and execution time value. Modules are sorted by their execution time in descending order.</p> <p>By default the All entry is active and the function list displays all functions with profile data in the trace.  </p> <p>Double-click a module (or use the Return key) to display only its functions. Selecting a module while the All entry is active selects its functions in the list.</p>"},{"location":"summary-panel.html#functions-list","title":"Functions list","text":"<p>The function list has an entry for each function with profile data. An entry has the demangled (undecorated) function name, module and self (exclusive) execution time, and total (inclusive) execution time. If CPU performance counters are found and loaded from the trace, the additional columns with metrics and the counters are appended after the last column.  </p> <p>The list is filtered based on the active module. The displayed columns and style can be customized in the Summary options.</p> <p>The function list is by default sorted by the self (exclusive) execution time in decreasing order. Click the same column header to toggle between decreasing and  increasing order. Click on a column to sort the list based on its values.  </p> Note <p>The same sorting actions apply to other list views in the application. Not all list views support sorting currently.  </p> <p>The columns in all list views can be resized and reorder. The new layout is saved across sessions when closing the application.</p> <p>If marking of functions based on their name or module is active, the function entries use the marking background color.</p> <p>Hovering over a function displays a popup with the stack trace (call path) end with the slowest function's instance. Pin or drag the popup to keep it open. </p>"},{"location":"summary-panel.html#view-interaction","title":"View interaction","text":"Toolbar Button Description If enabled, selecting a function also selects it in the other profiling views. If enabled, selecting a function also displays the source in the Source file view, with the source lines annotated with profiling data. Export Export the current function list into one of multiple formats (Excel, HTML and Markdown) or copy to clipboard the function list as  a HTML/Markdown table. Search box Search for functions with a specific name using a case-insensitive substring search. Searching filters the list down to display only the matching entries. Press the Escape key to reset the search or the X button next to the input box. Scrolls up the list to the start (equivalent to pressing Ctrl+Home). Mouse shortcuts Action Description Hover Hovering over a function displays a popup with the stack trace (call path) end with the slowest function's instance. Pin or drag the popup to keep it open. Click Selects the function in the other views if Sync is enabled in the toolbar and displays the source in the Source file view if Source is enabled in the toolbar. Double-click Opens the Assembly view of the selected function in the active tab. Shift+Double-click Opens the Assembly view of the selected function in a new tab. Right-click Shows the context menu for the selected functions. <p>Note</p> <p>When multiple functions are selected, the application status bar displays the sum of their execution time as a percentage and value.</p> Keyboard shortcuts Keys Description Return Opens the Assembly view of the selected function in the active tab. Shift+Return Opens the Assembly view of the selected function in a new tab. Ctrl+Shift+Left Opens the Assembly view of the selected function in a new tab docked to the left of the active tab. Ctrl+Shift+Right Opens the Assembly view of the selected function in a new tab docked to the right of the active tab. Alt+Return Opens a preview popup with the assembly of the selected function. Press the Escape key to close the popup.Multiple preview popups can be can be kept open at the same time. Ctrl+C Copies to clipboard a HTML and Markdown table with a summary of the selected functions. Ctrl+Shift+C Copies to clipboard the function names of the selected functions. Ctrl+Alt+C Copies to clipboard the mangled/decorated function names of the selected functions. Right-click context menu <p> </p>"},{"location":"summary-panel.html#exporting-the-function-list","title":"Exporting the function list","text":"<p>The current function list can be exported and saved into multiple formats, with the slowest functions marked using a similar style as in the application:</p> <ul> <li>Excel worksheet (*.xlsx) </li> <li>HTML table (*.html) </li> <li>Markdown table (*.md) </li> </ul> <p>The Export menu in the toolbar also has an option to copy to the clipboard the current function list as an HTML/Markdown table (pasting in an application supporting HTML - such as the Microsoft Office suite and online editors - will use the HTML version, code/text editors will use Markdown version instead). \u00a0</p> <p>The Ctrl+C keyboard shortcut copies to the clipboard only the selected functions as a HTML/Markdown table.</p>"},{"location":"summary-panel.html#view-options","title":"View options","text":"<p>Click on the Gears icon in the top-right part of the view displays the options panel (alternatively, use the Summary tab in the application Settings window.).  </p> <p>The tabs below describe each page of the options panel:  </p> GeneralProfiling <p> </p> <p> </p>"},{"location":"summary-panel.html#more-documentation-in-progress","title":"More documentation in progress","text":"<ul> <li>Context menu</li> <li>Marking functions</li> <li>Options</li> </ul>"},{"location":"timeline-panel.html","title":"Timeline view","text":""},{"location":"timeline-panel.html#overview","title":"Overview","text":"<p>The Timeline view displays the application's activity for the entire trace duration, with each thread having a histogram showing the CPU usage based on the number of profile samples collected over time.  </p> <p>This view is helpful for identifying the threads and time ranges that had CPU activity (or lack of it due to locks and I/O) and also has features for filtering the entire profile data to consider only specific threads and time ranges.  </p> <p></p> <p>The view has three parts:</p> <ul> <li>a main toolbar at the top, with general action buttons.</li> <li>a graph showing the activity of the entire application, with the activity across all threads combined.</li> <li>for each thread, a graph showing the thread's activity. The thread list is sorted by the execution time in descending order.</li> </ul> <p>The All Threads entry displays on top the trace duration range, split into time units. The maximum number of CPU cores used by the application is displayed on the left. Individual threads use, at most, one core.  </p> <p>Each individual thread entry has the following values and buttons:</p> <p></p> <ul> <li>thread visibility button indicating if the samples from the thread is included in the profile data or not. Click to toggle between included  or excluded state .</li> <li>thread context menu button  that shows thread filtering actions.</li> <li>the thread ID number.</li> <li>the thread execution time as a sum of the duration of all samples that ran on the thread.</li> <li>if available in the trace, the thread name.</li> </ul>"},{"location":"timeline-panel.html#mouse-actions","title":"Mouse actions","text":"<p>Moving the mouse over the graphs shows the time position and the approximate number of cores used at that point.</p> <p></p> <p>Hovering with the mouse over the graph shows a preview popup with the slowest call path (stack trace) active at that point.  </p> <p></p> <p>Clicking a thread ID or name creates a time range selection for the thread covering the entire trace duration. If Sync is enabled in the toolbar, all functions executing on the selected thread are also selected in the other profiling views.  </p>"},{"location":"timeline-panel.html#selecting-a-time-range","title":"Selecting a time range","text":"<ul> <li> <p>To select a time range that includes all threads, click and drag over the desired range in the top All Threads graph. The duration of the current selection is displayed in the top All Threads graph. Note that if some threads are excluded, the selection will not consider them. \u00a0</p> <p></p> </li> <li> <p>To select a time range for a single thread, click and drag over the desired range in the specific thread graph. To include another thread in the same time range, from the thread action menu, click Include thread or use the  icon. \u00a0</p> <p></p> </li> </ul> Note <p>If the Sync option is enabled, selecting a time range also selects the functions executing during that time in the other profiling views, considering if all threads or a subset are included.</p>"},{"location":"timeline-panel.html#filtering-the-profile","title":"Filtering the profile","text":"<p>The entire profile can be filtered so that only specific threads and time ranges are displayed, with the profiling views updated to include only the profile samples accepted by the filter. The active filter is displayed in both the toolbar and the application menu bar.</p>"},{"location":"timeline-panel.html#filtering-based-on-a-time-range","title":"Filtering based on a time range","text":"<p>Select the desired time range, then double-click the selection (alternatively, right-click the selection and click \"Filter to Time Range*). If the selection is performed for a single thread, a thread filter that displays only the selected thread and excludes all others is also added. \u00a0</p> <p></p>"},{"location":"timeline-panel.html#filtering-based-on-a-thread","title":"Filtering based on a thread","text":"<p>There are multiple way to filter based on one or multiple threads, optionally combined with a time range filter.  </p> <p></p> <ul> <li>to include a single thread and exclude all others, double-click the thread ID or click Filter to Thread from the thread action menu.</li> <li>to include another thread, click the  icon or click Include Thread.</li> <li>to include all threads with the same name and exclude all others, click Filter to Same Name Threads.</li> <li>to include all threads with the same name, click Filter to Same Name Threads.</li> <li>to exclude a thread, click the  icon or click Exclude Thread.</li> <li>to exclude all threads with the same name, click Exclude Same Name Threads.</li> </ul> <p>Example of a filter including a single thread (58540) and a time range of ~2 sec. Excluded threads and time ranges are displayed using faded colors. Use the X buttons next to Time and Threads in the toolbar to remove the filter.</p> <p></p>"},{"location":"timeline-panel.html#marking-samples","title":"Marking samples","text":"<p>The samples corresponding to a function instance can be marked from the Flame Graph view using the right-click context menu of a node and selecting a color from the Mark In Timeline menu entry.  </p> <p>The Markers menu in the toolbar displays the currently marked functions.  Click on a menu entry to remove the marker.  </p> <p></p>"},{"location":"timeline-panel.html#view-interaction","title":"View interaction","text":"Toolbar Button Description Resets the view to it's original state, displaying the thread graphs for the entire trace duration. Zooms out the thread graphs and updates the time units. Zooms in the thread graphs and updates the time units. If enabled, selecting a time range also selects executing during that time in the other profiling views. Markers Search for nodes with a specific function name using a case-insensitive substring search. Press the Escape key to reset the search or the X button next to the input box."},{"location":"timeline-panel.html#documentation-in-progress","title":"Documentation in progress","text":"<ul> <li>View options</li> </ul>"},{"location":"trace-loading.html","title":"Loading a trace","text":""},{"location":"trace-loading.html#loading-a-new-trace","title":"Loading a new trace","text":"<p>There are several ways to open a new ETW trace file (*.etl):</p> <ul> <li>Use the Open button in the Start Page displayed on startup.</li> <li>Use the Profiling -&gt; Load Profile menu.</li> <li>Use the Ctrl+O keyboard shortcut.</li> </ul> <p>Once the trace file is selected in the Open File dialog, the Load profile trace window is displayed. It lists the processes (applications) that are captured in the trace, sorted by weight (number of samples).</p> <p></p> <p>From the list, select the process you want to analyze and press the Load Profile button (alternatively, use double-click or the Return key). The selected process is loaded from the trace file, any required binary and symbol files are downloaded and the profiling data is analyzed. Once loading is completed, the window closes and the profiling views are populated, as described in Profiling UI overview.</p> Note <p>If the trace fails to load, the Trace view report windows is automatically opened. The Modules tab lists the modules referenced by the trace and indicates whether the binary and debug info symbols could be found and loaded. See the Trace view report page for more details.</p>"},{"location":"trace-loading.html#loading-a-previously-opened-trace","title":"Loading a previously opened trace","text":"<p>Previously opened traces are saved as sessions. Recent sessions can be quickly opened again for the same process using either the Start page or the session list on the left of the Load profile trace window (use double-click or the Return key).</p> <p></p>"},{"location":"trace-loading.html#symbols-configuration","title":"Symbols configuration","text":"<p>Symbols are the binary (EXE/DLL) and debug info (PDB) files required to analyze the processes recorded in a trace. The binaries are used to disassembly individual functions and the debug files are used to resolve function names and provide the source file and line number information.</p> <p></p>"},{"location":"trace-loading.html#symbol-paths","title":"Symbol paths","text":"<p>Symbols are searched in the locations indicated by the Symbol Paths list, found in the Symbols tab of the Load profile trace window. Symbol locations can be of two types:  </p> <ul> <li>Paths to local directories or network file shares.  </li> <li>Symbol server URLs. By default the Microsoft public symbol server is added to the list, with a local download cache directory at C:\\Symbols.</li> </ul> <p>Note</p> <p>More info about symbol servers and the symbol path syntax is available here: https://learn.microsoft.com/en-us/windows/win32/debug/using-symsrv</p>"},{"location":"trace-loading.html#missing-debug-info-symbols","title":"Missing debug info symbols","text":"<p>When the debug info symbols (PDB file) for a module cannot be found, the names of the functions used by the app during the trace are replaced by their Relative virtual address (RVA) as a hexadecimal value (127F for example).  </p> <p>You can use the logs from the Trace view report to understand why symbols could not be found, such as using wrong local directory paths or a symbol server being unreachable.</p>"},{"location":"trace-loading.html#additional-symbol-options","title":"Additional symbol options","text":"Option Description Include __NT__SYMBOL__PATH environment variable Append the environment variable's value to the list of searched symbol paths. Include subdirectories for local paths Consider symbols in sub-directories up to 3 levels deep for the local directories in the Symbols Paths list. Don't load symbols for very low sample modules Skip downloading and loading of symbols for modules with a low number of samples. This helps reduce download time for processes with many modules, where the majority have few relevant samples. A module is skipped if it has fewer samples than a threshold. This threshold can be configured using the Minimum samples field as a percentage of the total number of samples. Don't load symbols that failed in previous sessions Skip downloading and loading of symbols that could not be found in previous sessions (for example, due to offline symbol servers). The list of skipped symbols can be viewed and cleared. Cache processed symbol files Cache the processed debug symbol files and use them to speed up loading of traces requiring the same symbols. The cache files are saved in the temporary directory and can be viewed and cleared."},{"location":"trace-loading.html#trace-processing-options","title":"Trace processing options","text":"Option Description Handle Kernel profile samples Include samples executing in the kernel context and connect the call stacks between kernel and user mode code. Handle CPU performance counter samples Process CPU performance counter (PMC) events and display them in the Summary, Assembly and Source File views using additional columns. Download source files from Source Server Automatically attempt to download source files from the location indicated by the debug info file. If the download URL requires authentication, it can be configured in the Authentication section found below."},{"location":"trace-loading.html#authentication","title":"Authentication","text":"<p>Authentication using an user/email address and Personal Autehnticaion token (PAT) can be configured for both source file servers and symbol servers.</p>"},{"location":"trace-loading.html#binary-files","title":"Binary files","text":"<p>Additional local directory paths for searching binary files can be configured. The binary files to process in a trace can be restricted to only the ones in the accepted list.</p>"},{"location":"trace-overview.html","title":"Trace overview report","text":""},{"location":"trace-overview.html#overview","title":"Overview","text":"<p>The Trace overview report provides details about the current profiling session, such as the loaded trace path and process name/ID, trace recording time and duration, and the machine used to record the trace.</p> <p>A list of modules referenced by the profiled code is also included, with the symbol search result for both binary and debug info files. The symbol search logs can help you understand why symbols could not be found, such as using wrong local directory paths or a symbol server being unreachable.</p> <p>To view the report, once a trace is loaded click Profiling report from the Profiling menu. The report is also automatically displayed if a trace fails to load.  </p>"},{"location":"trace-overview.html#summary","title":"Summary","text":""},{"location":"trace-overview.html#modules","title":"Modules","text":"<p>Once a module is selected, the Image file and Debug file tabs are updated to show the symbol info used to look up the symbols.  </p> <p></p> <p>The Logs section displays the list of symbol search paths used during the search and the steps taken by the algorithm.  </p> Tip <p>If a symbol file is found, but there is a timestamp/checksum mismatch, the symbol is not used and the next search path is queried.  </p> <p>If no matching symbols are found for the module, it usually means that the symbols are from a different version of the application than the one recorded in the trace.  </p> <p></p>"},{"location":"trace-recording.html","title":"Recording a trace","text":"Note <p>The documentation is currently being worked on.  </p>"},{"location":"trace-recording.html#recording-a-trace","title":"Recording a trace","text":"<p>ETW traces can be recorded directly from the app in several ways:  </p> <ul> <li>starting a new process.</li> <li>attaching to a running process.</li> <li>system-wide (default ETW recording mode).</li> </ul> <p>There are several ways to start a recording:</p> <ul> <li>Use the Record button in the Start Page displayed on startup.</li> <li>Use the Profiling -&gt; Record Profile menu.</li> </ul> <p></p>"}]}
# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# This workflow will build, test, sign and package a WPF or Windows Forms desktop application
# built on .NET Core.
# To learn how to migrate your existing application to .NET Core,
# refer to https://docs.microsoft.com/en-us/dotnet/desktop-wpf/migration/convert-project-from-net-framework
#
# To configure this workflow:
#
# 1. Configure environment variables
# GitHub sets default environment variables for every workflow run.
# Replace the variables relative to your project in the "env" section below.
#
# 2. Signing
# Generate a signing certificate in the Windows Application
# Packaging Project or add an existing signing certificate to the project.
# Next, use PowerShell to encode the .pfx file using Base64 encoding
# by running the following Powershell script to generate the output string:
#
# $pfx_cert = Get-Content '.\SigningCertificate.pfx' -Encoding Byte
# [System.Convert]::ToBase64String($pfx_cert) | Out-File 'SigningCertificate_Encoded.txt'
#
# Open the output file, SigningCertificate_Encoded.txt, and copy the
# string inside. Then, add the string to the repo as a GitHub secret
# and name it "Base64_Encoded_Pfx."
# For more information on how to configure your signing certificate for
# this workflow, refer to https://github.com/microsoft/github-actions-for-desktop-apps#signing
#
# Finally, add the signing certificate password to the repo as a secret and name it "Pfx_Key".
# See "Build the Windows Application Packaging project" below to see how the secret is used.
#
# For more information on GitHub Actions, refer to https://github.com/features/actions
# For a complete CI/CD sample to get started with GitHub Action workflows for Desktop Applications,
# refer to https://github.com/microsoft/github-actions-for-desktop-apps

name: Installer

on:
  push:
    branches: [ "dev" ]
  pull_request:
    branches: [ "dev" ]

jobs:

  build:
    strategy:
      matrix:
        configuration: [Release]

    runs-on: windows-latest  # For a list of available runner types, refer to
                             # https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idruns-on

    env:
      Solution_Name: src/ProfileExplorer.sln                         # Replace with your solution name, i.e. MyWpfApp.sln.
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        submodules: 'recursive'

    # Install the .NET Core workload
    - name: Install .NET Core
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x

    # Add  MSBuild to the PATH: https://github.com/microsoft/setup-msbuild
    - name: Setup MSBuild.exe
      uses: microsoft/setup-msbuild@v2

    - name: Install Inno Setup
      shell: cmd
      run: choco install innosetup

    # Build the project and installer
    - name: Build x64
      shell: cmd
      working-directory: installer\x64
      run: call prepare-out.cmd
      env:
        Configuration: ${{ matrix.configuration }}

    - name: Build x64
      shell: cmd
      working-directory: installer\x64
      run: call prepare-installer.cmd
      env:
        Configuration: ${{ matrix.configuration }}

    - name: Build ARM64
      shell: cmd
      working-directory: installer\arm64
      run: call prepare-out.cmd
      env:
        Configuration: ${{ matrix.configuration }}

    - name: Build ARM64
      shell: cmd
      working-directory: installer\arm64
      run: call prepare-installer.cmd
      env:
        Configuration: ${{ matrix.configuration }}

    - uses: actions/upload-artifact@v4
      with:
        name: Upload x64 output
        path: installer\x64\out\**\*

    - uses: actions/upload-artifact@v4
      with:
        name: Upload ARM64 output
        path: installer\arm64\out\**\*

    - uses: actions/upload-artifact@v4
      with:
        name: Upload x64 installer
        path: installer\x64\*.exe

    - uses: actions/upload-artifact@v4
      with:
        name: Upload ARM64 installer
        path: installer\arm64\*.exe